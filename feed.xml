<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Saumya</title>
    <atom:link href="https://saumya.github.io/ray/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>https://saumya.github.io/ray</link>
    <description>Where there is a will, there is a way.</description>
    <pubDate>Mon, 27 Jul 2020 05:30:00 +0630</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Vuex Actions in Vue</title>
      <link>https://saumya.github.io/ray/articles/99/</link>
      <pubDate>Mon, 27 Jul 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/99/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Vuex Actions in &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; are part of the &lt;a href=&quot;https://saumya.github.io/articles/94/&quot;&gt;Store&lt;/a&gt; as we have seen in the &lt;a href=&quot;https://saumya.github.io/articles/94/&quot;&gt;Vue basics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;From a &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; component in order to dispatch actions, it is as simple as this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.$store.dispatch(&amp;#39;auth/login_action&amp;#39;, user)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, &lt;a href=&quot;https://vuex.vuejs.org/guide/actions.html&quot;&gt;Vuex&lt;/a&gt; provides helper and utilities to do it even in more readable manner. First of all, one has to get the &lt;a href=&quot;https://vuex.vuejs.org/guide/actions.html&quot;&gt;Vuex&lt;/a&gt; into the component.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { mapActions } from &amp;#39;vuex&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next is the actual map of the dispatch code to a function call.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;methods : {
    ...mapActions({ 
        login : &amp;#39;auth/login_action&amp;#39;
    })
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, wherever necessary one can call &lt;code&gt;login()&lt;/code&gt; which will dispatch the action. The code will look something like calling a function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;login(user)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What is done by &lt;code&gt;mapActions&lt;/code&gt; from &lt;a href=&quot;https://vuex.vuejs.org/guide/actions.html&quot;&gt;Vuex&lt;/a&gt; is a mapping of &lt;code&gt;login&lt;/code&gt; function to &lt;code&gt;this.$store.dispatch( &amp;#39;auth/login_action&amp;#39;, user )&lt;/code&gt;. Wherever the &lt;code&gt;login(user)&lt;/code&gt; is called, it is actually doing &lt;code&gt;this.$store.dispatch( &amp;#39;auth/login_action&amp;#39;, user )&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Now both are same

login(user)

this.$store.dispatch(&amp;#39;auth/login_action&amp;#39;, user)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Desktop {{Vue}} Application</title>
      <link>https://saumya.github.io/ray/articles/98/</link>
      <pubDate>Sun, 26 Jul 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/98/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Writing &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; application is a pleasure to do. It is simple and developer experience(DX) is just too good. There are times when web application is the way to go.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;There are times when a Desktop application is better than a web application. In the &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; eco-system there are many utilities available.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;a href=&quot;https://nklayman.github.io/vue-cli-plugin-electron-builder/&quot;&gt;Vue CLI Plugin Electron Builder&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This &lt;a href=&quot;https://nklayman.github.io/vue-cli-plugin-electron-builder/&quot;&gt;Vue CLI Plugin&lt;/a&gt; is the simplest one. All one has to do is, &lt;code&gt;install&lt;/code&gt; it as a &lt;code&gt;npm&lt;/code&gt; package and you are ready to go. Though this project recommends to use &lt;code&gt;Yarn&lt;/code&gt;, but &lt;code&gt;npm&lt;/code&gt; also works. To add the plugin to the already build &lt;a href=&quot;https://vuejs.org/&quot;&gt;VueJS&lt;/a&gt; web application project, use the &lt;code&gt;vue cli&lt;/code&gt; as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vue add electron-builder&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is all. The next is to run the desktop application.&lt;/p&gt;
&lt;p&gt;In development mode it is like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run electron:serve&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The last is to build the application and that is done with this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run electron:build&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ansible! The basics.</title>
      <link>https://saumya.github.io/ray/articles/97/</link>
      <pubDate>Sat, 25 Jul 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/97/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Ansible is simpler than it sounds. For a long time I used to avoid it, even to know it. Then the time came to make an automated build for one of my opensource projects. I wrote down the automation and finally the build runs upon each &lt;code&gt;git push&lt;/code&gt; to the repository. Then I knew that I have written an &lt;code&gt;Ansible playbook&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ansible is automation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now that does not sound anything to me unless I work in Dev-Ops or operations in an enterprise! &lt;/p&gt;
&lt;p&gt;There are things like &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;installing a specific server&lt;/li&gt;
&lt;li&gt;installing specific softwares in that server&lt;/li&gt;
&lt;li&gt;getting the source-code from somewhere (download from another server)&lt;/li&gt;
&lt;li&gt;install the code in the server and configure the source and machine to run properly&lt;/li&gt;
&lt;li&gt;build some software (may be Android App or API service)&lt;/li&gt;
&lt;li&gt;release these builds (upload the build to some other server)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these things can be done from a single file. That file is either &lt;code&gt;.yaml&lt;/code&gt; or &lt;code&gt;.yml&lt;/code&gt;. Each of this &lt;code&gt;.yml&lt;/code&gt; file is called an &lt;code&gt;Ansible Playbook&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now a days there are enterprises and companies providing infrastructure at a very low cost or almost free. That makes things very different in terms of building softwares, whether in my own machine or building in these servers. This is just one example of many things which one could do in some other’s server(or infrastructure). &lt;/p&gt;
&lt;p&gt;All these are &lt;code&gt;Ansible&lt;/code&gt; and the way one does it, is with &lt;code&gt;Ansible Playbook&lt;/code&gt; that means with &lt;code&gt;.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Know more about &lt;a href=&quot;https://www.ansible.com&quot;&gt;Ansible&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Read the &lt;a href=&quot;https://docs.ansible.com/ansible/latest/index.html&quot;&gt;Docs about Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More about &lt;a href=&quot;https://yaml.org/&quot;&gt;YAML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;.yml&lt;/code&gt; file is more simpler than one thinks. It feels like working with &lt;code&gt;.xml&lt;/code&gt; or &lt;code&gt;.json&lt;/code&gt;. It is that simple. So the whole infrastructure and deployment thing is almost came to the developer’s side of the  job. We listen a lot of Dev-Ops jobs now a days because of that.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ansible automates the development and deployment infrastructure with the ease of a developer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One can code inside the &lt;code&gt;.yml&lt;/code&gt; file(the Ansible Playbook) like one does in other programming languages. &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CORS for multiple Domains in Node and Express</title>
      <link>https://saumya.github.io/ray/articles/96/</link>
      <pubDate>Sun, 12 Jul 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/96/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Cross-Origin Resource Sharing (&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt;) is a way / specification / standard, whatever you call it. It allows to use resources from one server in another server. Well simply said it enables to call, APIs on one server, from another server.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://enable-cors.org/&quot;&gt;Enable-CORS&lt;/a&gt; is a nice place to get information about the subject.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While working in &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt; and &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; it is easy to enable this with a middleware. However, we can do it without them also.&lt;/p&gt;
&lt;p&gt;Write a middleware function to enable CORS.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app.use(function (req, res, next) {
  res.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;http://localhost:3001&amp;#39;); 
  res.setHeader(&amp;#39;Access-Control-Allow-Methods&amp;#39;, &amp;#39;GET, POST, OPTIONS, PUT, PATCH, DELETE&amp;#39;);
  res.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;X-Requested-With,content-type, Accept&amp;#39;);
  res.setHeader(&amp;#39;Access-Control-Allow-Credentials&amp;#39;, true);
  next();
})&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is very much a case where, API servers were running somewhere and give special permission to use their services to particular domains(example- localhost:3001). &lt;/p&gt;
&lt;p&gt;What if our API is going to be used by many endpoints. Hoe to enable them. Will the simplest is to use a &lt;code&gt;*&lt;/code&gt; instead of a particular domain. That will allow any server to access the service. While it is open to all, it could be abused by anybody.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To enable the service for only few domains, use an array of domains.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app.use(function (req, res, next) {

  var allowedDomains = [&amp;#39;http://localhost:3001&amp;#39;,&amp;#39;http://localhost:8080&amp;#39; ];
  var origin = req.headers.origin;
  if(allowedDomains.indexOf(origin) &amp;gt; -1){
    res.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, origin);
  }

  res.setHeader(&amp;#39;Access-Control-Allow-Methods&amp;#39;, &amp;#39;GET, POST, OPTIONS, PUT, PATCH, DELETE&amp;#39;);
  res.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;X-Requested-With,content-type, Accept&amp;#39;);
  res.setHeader(&amp;#39;Access-Control-Allow-Credentials&amp;#39;, true);

  next();
})&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Setting up Thunk with Redux and React</title>
      <link>https://saumya.github.io/ray/articles/95/</link>
      <pubDate>Tue, 07 Jul 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/95/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is one of the reasons why getting up and running with &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; may take sometime. The setting up of the whole thing takes time. And it may take more time, if you want to setup this after you have a working &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; project. To start a &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; project today, it is easy to get up and running with &lt;a href=&quot;https://create-react-app.dev/&quot;&gt;Create-React-App&lt;/a&gt;. But gluing up &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; after that point is a very difficult and confusing process. And then comes &lt;a href=&quot;https://github.com/reduxjs/redux-thunk&quot;&gt;Thunk&lt;/a&gt; which will take some more involvement into it.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not be carried away by the words. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The simple meaning of the words are as follows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; allows the application to use a single central Data Object(ususally called Store)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reduxjs/redux-thunk&quot;&gt;Thunk&lt;/a&gt; is an addition to &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; for Asynchronous calls ( The API calls )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For working with &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; inside &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; we need two things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://react-redux.js.org/&quot;&gt;React-Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; manages the data in the central data object (Root Store), the &lt;a href=&quot;https://react-redux.js.org/&quot;&gt;React-Redux&lt;/a&gt; helps wiring-up &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; with &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;. The point is, &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; could be used in any project where we need a central data management functionality. It is a general purpose library. To use it easily inside &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; applications we need &lt;a href=&quot;https://react-redux.js.org/&quot;&gt;React-Redux&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install redux
npm install react-redux&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is all for setting up the &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; in our application. The &lt;code&gt;Code&lt;/code&gt; looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//index.js
//The application entry file

import { createStore } from &amp;#39;redux&amp;#39;
import { Provider } from &amp;#39;react-redux&amp;#39;

import allInOneReducer from &amp;#39;./reducers&amp;#39;

const theAppStore = createStore( allInOneReducer )

ReactDOM.render(
  &amp;lt;Provider store={ theAppStore }&amp;gt;
  &amp;lt;React.Fragment&amp;gt;
    &amp;lt;AppContainer /&amp;gt;
  &amp;lt;/React.Fragment&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&amp;#39;root&amp;#39;)
);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now to interact with the central Store we need to &lt;code&gt;dispatch&lt;/code&gt; actions from our components and &lt;code&gt;useSelector&lt;/code&gt; to get data to our component. These are provided by &lt;a href=&quot;https://react-redux.js.org/&quot;&gt;React-Redux&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//AppContainer.js

import { useDispatch, useSelector } from &amp;#39;react-redux&amp;#39;

let AppContainer = ()=&amp;gt;{
    const dispatch = useDispatch()
    dispatch( changeStatusMessage(&amp;#39;Inside AppContainer&amp;#39;) )

    const appMessages = useSelector( state=&amp;gt; state.messages )
    return( &amp;lt;div&amp;gt; My Component &amp;lt;/div&amp;gt; )
}
export default AppContainer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The central Store is stored inside &lt;code&gt;Reducers&lt;/code&gt; folder in ‘index.js’. One of the stores in the central store is ‘message’. This is like dividing the central store into small stores of their own.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//messages.js inside &amp;#39;reducers&amp;#39; folder

const initialState = {
    message_string: &amp;#39;Nothing&amp;#39;
}
const messages = (state = initialState, action )=&amp;gt;{
    switch(action.type){
        case &amp;#39;NEW_MESSAGE&amp;#39; :
            return { ...state, message_string: action.payload}
        default :
            return state
    }
}

export default messages&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To complete the Store setup, we need one more thing inside ‘reducers’ folder, the ‘index.js’.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//index.js inside &amp;#39;reducers&amp;#39; folder

import { combineReducers } from &amp;#39;redux&amp;#39;

import messages from &amp;#39;./messages&amp;#39;
import loginReducer from &amp;#39;./login_reducer&amp;#39;


const theReducer = combineReducers({
    messages: messages,
    loginData: loginReducer
})
export default theReducer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The actions looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//index.js inside &amp;#39;actions&amp;#39; folder

export const changeStatusMessage = message=&amp;gt; {
    return ({
        type: &amp;#39;NEW_MESSAGE&amp;#39;,
        payload: message
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are done with &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; and &lt;a href=&quot;https://react-redux.js.org/&quot;&gt;React-Redux&lt;/a&gt;. :) I know.&lt;/p&gt;
&lt;h3 id=&quot;thunk&quot;&gt;Thunk&lt;/h3&gt;
&lt;p&gt;As it is called the middleware of Redux, we need to initialise it where we are initialising the Redux store. That is the main application entry file.&lt;/p&gt;
&lt;p&gt;First install the library in the project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install redux-thunk&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now setting up the Store in the application entry is modified as this. Notice the use of &lt;code&gt;applyMiddleware&lt;/code&gt; from ‘redux’ here.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//index.js
//The application entry file

//import { createStore } from &amp;#39;redux&amp;#39;
import { createStore, applyMiddleware } from &amp;#39;redux&amp;#39;
import { Provider } from &amp;#39;react-redux&amp;#39;
import thunk from &amp;#39;redux-thunk&amp;#39;;

import allInOneReducer from &amp;#39;./reducers&amp;#39;

//const theAppStore = createStore( allInOneReducer )
const theAppStore = createStore( allInOneReducer, applyMiddleware(thunk) )

ReactDOM.render(
  &amp;lt;Provider store={ theAppStore }&amp;gt;
  &amp;lt;React.Fragment&amp;gt;
    &amp;lt;AppContainer /&amp;gt;
  &amp;lt;/React.Fragment&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(&amp;#39;root&amp;#39;)
);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The components in the application have to be updated as this. Notice the use of &lt;code&gt;connect&lt;/code&gt; from ‘react-redux’ while exporting the component.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//AppContainer.js

//import { useDispatch, useSelector } from &amp;#39;react-redux&amp;#39;
import { connect, useDispatch, useSelector } from &amp;#39;react-redux&amp;#39;

let AppContainer = ()=&amp;gt;{
    const dispatch = useDispatch()
    dispatch( changeStatusMessage(&amp;#39;Inside AppContainer&amp;#39;) )

    // This action will use Thunk
    dispatch( someAsyncCall(&amp;#39;data&amp;#39;) )

    const appMessages = useSelector( state=&amp;gt; state.messages )
    return( &amp;lt;div&amp;gt; My Component &amp;lt;/div&amp;gt; )
}

//export default AppContainer
export default connect()(AppContainer)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can write Async calls inside our actions. Here is an example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//index.js inside &amp;#39;actions&amp;#39; folder

export const changeStatusMessage = data=&amp;gt; {
    return ({
        type: &amp;#39;NEW_MESSAGE&amp;#39;,
        payload: data
    })
}


// This is possible because of Thunk.
// Calling an API and changing the state depending upon Success or Fail

export const someAsyncCall = data=&amp;gt;{
    return function (dispatch) {
        call_RestAPI(data).then( 
                function(success){
                        dispatch( changeStatusMessage(&amp;#39;API call Success&amp;#39;) )
                    }, 
                function(error){
                        dispatch( changeStatusMessage(&amp;#39;API call Fail&amp;#39;) )
                } 
            )
    }
}

const call_RestAPI = (data) =&amp;gt; {
  const url_1 = &amp;#39;https://some_api_endpoint&amp;#39;
  const fetch_data = {
    method: &amp;#39;POST&amp;#39;, 
    mode: &amp;#39;cors&amp;#39;, 
    headers: new Headers({ &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39; }),
    body: JSON.stringify(data)
  }
  return fetch(url_1, fetch_data)
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Most important things to remember here are to use &lt;code&gt;applyMiddleware&lt;/code&gt;, &lt;code&gt;connect&lt;/code&gt;. One is used while setting up the Store and one is used inside the components. And finally keep an eye on how to write an Async action and call the APIs.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Vue {{ it }}</title>
      <link>https://saumya.github.io/ray/articles/94/</link>
      <pubDate>Tue, 09 Jun 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/94/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Working with &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; is just sweet. 
The most important thing for me is less noise in the web.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While the community is active, very active, no one is making a loud noise throughout the internet. I think that is because, no one is trying to please the corporates they are working for and they are targetting to. Which is a very good sign as far as the framework goes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Appart from that, the documentation is just spot on. There is no way anyone will get to a wrong place and search for answers somewhere else. &lt;/p&gt;
&lt;p&gt;The eco-system for the framework is also just spot on and their documentation is as sweet. It all just works.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;vue--basics-&quot;&gt;Vue {{ Basics }}&lt;/h3&gt;
&lt;p&gt;The base of a &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; application is a &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; file. Yes, the extension is &lt;code&gt;.vue&lt;/code&gt; so the file is ‘filename.vue’. &lt;/p&gt;
&lt;p&gt;It has three parts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;template&lt;/li&gt;
&lt;li&gt;script&lt;/li&gt;
&lt;li&gt;style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those are self explanatory. The &lt;code&gt;template&lt;/code&gt; contains the ‘html’, &lt;code&gt;script&lt;/code&gt; contains ‘javascript’ and &lt;code&gt;style&lt;/code&gt; has the ‘css’. Here is a basic &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; file. Generally every &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; file is a &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; Component.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;one&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;One&amp;lt;/h1&amp;gt;
    &amp;lt;h2&amp;gt;Home.&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &amp;#39;One&amp;#39;
}
&amp;lt;/script&amp;gt;

&amp;lt;!-- Add &amp;quot;scoped&amp;quot; attribute to limit CSS to this component only --&amp;gt;
&amp;lt;style scoped&amp;gt;
a {
  color: #42b983;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are two main things one will need from the eco-system, &lt;a href=&quot;https://router.vuejs.org/&quot;&gt;Vue Router&lt;/a&gt; and &lt;a href=&quot;https://vuex.vuejs.org/&quot;&gt;VueX&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://router.vuejs.org/&quot;&gt;Vue Router&lt;/a&gt; is for making our URLs and mapping the URLs to respective components.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vuex.vuejs.org/&quot;&gt;Vuex&lt;/a&gt; is for using a global store / state / data, whatever you call it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;router--example-&quot;&gt;Router {{ Example }}&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;export default new Router({
    routes: [
                { path: &amp;#39;/home&amp;#39;, component: HomeComponent },
                { path: &amp;#39;/about&amp;#39;, component: AboutComponent },
            ]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inside the first &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; component of the application, that is the initial view of the application just have &lt;code&gt;router-view&lt;/code&gt;, where the routing components will be rendered.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;app_container&amp;quot;&amp;gt;
    &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt; 
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;vuex--example-&quot;&gt;VueX {{ Example }}&lt;/h3&gt;
&lt;p&gt;A basic store / state / data file is like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//myData.js

const state = {};
const getters = {};
const actions = {};
const mutations = {};
export default { state, getters, actions, mutations }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example with a basic working file. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const state = {
    user_message : &amp;#39;Nothing yet!&amp;#39;,
};
const getters = {
    getUserMessage: state =&amp;gt; {
        return state.user_message
    }
};
const actions = {
    doSomethingWithData: ({state,commit},payload) =&amp;gt; {
            //payload is someDataObject that is explained below
            fetch( url_1, fetch_data ).then(function(result){}).catch(function(error){});
            commit(&amp;#39;UPDATE_MESSAGE&amp;#39;, &amp;#39;Doing something&amp;#39;);
        },
};
const mutations = {
    UPDATE_MESSAGE:  (state, message) =&amp;gt; {
        state.user_message = message;
    }
};
export default { state, getters, actions, mutations }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From the &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; file one just needs to dispatch actions like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.$store.dispatch(&amp;#39;doSomethingWithData&amp;#39;, someDataObject);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, &lt;code&gt;someDataObject&lt;/code&gt; will be the &lt;code&gt;payload&lt;/code&gt; inside the actions call. Inside the &lt;code&gt;action&lt;/code&gt; one may need to call the &lt;code&gt;commit&lt;/code&gt; if it is needed to change the store / state. Like we are calling &lt;code&gt;commit(&amp;#39;UPDATE_MESSAGE&amp;#39;, &amp;#39;Doing something&amp;#39;)&lt;/code&gt;. That will go inside the &lt;code&gt;mutation&lt;/code&gt; and run the respective function to change the state / store / data.&lt;/p&gt;
&lt;p&gt;To get the data inside &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; file, we have to do something like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt; {{ getUserMessage }} &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;{{ }}&lt;/code&gt; is the thing that will convert the variable inside it to the value of it. Basically running javascript inside the template tags. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;most important&lt;/code&gt; of all, is to add &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;router&lt;/code&gt; to the initial part, where the Vue Application is initiated.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import Vue from &amp;#39;vue&amp;#39;
import App from &amp;#39;./App.vue&amp;#39;

import router from &amp;#39;./router&amp;#39;
import store from &amp;#39;./store&amp;#39;

new Vue({
  el: &amp;#39;#app&amp;#39;,
  router: router,
  store: store,
  render: function(createElement){
    return createElement(App)
  }
})&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As I have mentioned above, add the &lt;code&gt;router-view&lt;/code&gt; component in the first &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; file. In this case it is the ‘App.vue’. Example is as mentioned here.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class=&amp;quot;app_container&amp;quot;&amp;gt;
        &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt; 
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {
  name: &amp;#39;app&amp;#39;,
}
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Happy {{Vue}} coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Database and doing things without the 'for' Loop</title>
      <link>https://saumya.github.io/ray/articles/93/</link>
      <pubDate>Mon, 08 Jun 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/93/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is valid for all the languages and database engines.
The thing is to create / read / update / delete somethings in database. So it is about multiple actions in a table inserts / reads / updates / deletes. The quick and easy solution is to put the actions in a ‘for loop’ and then try to solve the problems created by the loop itself! There are better ways. &lt;/p&gt;
&lt;span class=&quot;more&quot;&gt;

&lt;p&gt;This is problem is generic. However I will be talking about &lt;a href=&quot;https://nodejs.org/en/about/&quot;&gt;Node.js&lt;/a&gt;, &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; and &lt;a href=&quot;https://sequelize.org/&quot;&gt;Sequelize&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id=&quot;recursion--make-your-own-loop&quot;&gt;Recursion / Make your own loop&lt;/h3&gt;
&lt;p&gt;I was developing an API where a call with an array of ids is expecting an array of objects. All that is needed is get the individual ‘id’ from the array and then process the database to find information about the ‘id’ and store it in another array. Finally return the resulting array. As I told you, in this case ‘for loop’ will create more problems than solving one. Whatever language you work with, in this case avoid ‘for loop’.&lt;/p&gt;
&lt;p&gt;The best way is to create your own loop and deal with the loop manually with events.&lt;/p&gt;
&lt;p&gt;First make a &lt;code&gt;counter&lt;/code&gt;, access the ‘id’ from the loop. Move to database, do your data manipulatioin, listen for the events and get the data from it. Then move to the next by increasing the counter.&lt;/p&gt;
&lt;p&gt;Here is the code for it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;router.get(&amp;#39;/getAllDoctorsByGroup/:groupId&amp;#39;, (request,response) =&amp;gt; {

    const onCallbackFromDB = function(dbResult){
        // Call the API to get the Doctors from the IDs we got in &amp;#39;dbResult&amp;#39;
        var aDoctors = [];
        var ai = 0;
        var onGotDoctorFromDB = function(result_doctor){
            aDoctors.push(result_doctor);
            ai++;
            getNextDoctor();
        }
        var getNextDoctor = function(){
            if(ai&amp;lt;dbResult.length){
                modelFactory.getDoctorWithId(onGotDoctorFromDB, dbResult[ai] );    
            }else{
                response.send(aDoctors);
            }
        }
        // initiate the loop
        getNextDoctor();
    }
    // first call to get the array of ids
    modelFactory.getAllDoctorIdsByGroupId( onCallbackFromDB, request.params.groupId );
});&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is basically the API GET call ‘getAllDoctorsByGroup’ and passed in a ‘groupId’. I have a table here with mapping for GroupId and DoctorId. So the first callback returns an array of ‘ids’ for the doctors. I have another table here with ‘doctorId’ and all the details for that ‘id’. So initiating a loop with a call to the next table for getting data for one particular ‘id’ and once got the callback, the counter ‘ai’ is incremented and then moved to the same call for the next ‘id’. Finally we got an array of all the ‘details’ for the ‘doctors’.&lt;/p&gt;
&lt;p&gt;This is straight forward and elegant. You could do the error checking and other things in the recursion and the flow is under your control. Rather than fixing the errors created by the ‘for loop’ and ‘synchronous’ methods.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Sequelize UPDATE call</title>
      <link>https://saumya.github.io/ray/articles/92/</link>
      <pubDate>Thu, 14 May 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/92/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Working with &lt;a href=&quot;https://sequelize.org/&quot;&gt;Sequelize ORM&lt;/a&gt; is just sweet. It makes working with RDBMS as if one is working in NoSQL. And the APIs are simple and on the spot. It just works. While making an API for the CRUD operations the work just gets faster and cleaner.&lt;span class=&quot;more&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sequelize.org/&quot;&gt;Sequelize ORM&lt;/a&gt; provides two APIs for an UPDATE call to a Model. One is a &lt;em&gt;Static&lt;/em&gt; method and the other one is an &lt;em&gt;Instance&lt;/em&gt; method.&lt;/p&gt;
&lt;h3 id=&quot;static-method-on-the-model&quot;&gt;Static method on the Model&lt;/h3&gt;
&lt;p&gt;This is called in the Model itself and not on the instance of the Model. Suppose we want to update one &lt;code&gt;PersonModel&lt;/code&gt;, we can directly call &lt;code&gt;update&lt;/code&gt; on Model.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PersonModel.update({
        name: person_name ,
        phone: person_phone ,
        email: person_email,
        address: person_address
    },{ where:{ id : person_id } })
    .then((result)=&amp;gt;{
        console.log(&amp;#39;Number of rows updated=&amp;#39;, result[0]); 
        })
    .catch((error)=&amp;gt;{});&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;instance-method-on-the-model-instance-object&quot;&gt;Instance method on the Model Instance (Object)&lt;/h3&gt;
&lt;p&gt;There may be a reason to call &lt;code&gt;UPDATE&lt;/code&gt; on an instance of the MODEL. This is done by first getting the instance from database and then calling &lt;code&gt;UPDATE&lt;/code&gt; on it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PersonModel.findOne({ where:{id : person_id} })
.then((personInstanceFromDB)=&amp;gt;{
        personInstanceFromDB.update({
                name: person_name ,
                phone: person_phone ,
                email: person_email,
                address: person_address
            })
        .then((result)=&amp;gt;{
            console.log(&amp;#39;The new Model Object=&amp;#39;, result.toJSON());
            })
        .catch((error2)=&amp;gt;{});
    })
.catch((error1)=&amp;gt;{});&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is simple, is not it? As you can see the &lt;code&gt;static&lt;/code&gt; method call on the Model is a little less code. However the &lt;code&gt;return&lt;/code&gt; of the calls are different. The &lt;code&gt;static&lt;/code&gt; method is returning the &lt;code&gt;number of rows&lt;/code&gt; that has been updated, however the instance method returns &lt;code&gt;the whole object&lt;/code&gt; itself.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Let's JAMstack.</title>
      <link>https://saumya.github.io/ray/articles/90/</link>
      <pubDate>Thu, 30 Jan 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/90/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;First project of 2020. A conversion of a portal from LAMP (Linux-Apache-MySQL-PHP) stack to &lt;a href=&quot;https://jamstack.org/&quot;&gt;JAM stack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have been doing static site development for a long time (this blog itself is an example), however the complexities of the project was a little more complex than this blog. &lt;span class=&quot;more&quot;&gt; &lt;/p&gt;
&lt;p&gt;The project was not very complex in terms of the content and application. The only trick is to get the content from database to the Markdown and deploy it to the server. Once this is done, the whole project is just about moving the deployment from a full stack web server to a static site web server. &lt;/p&gt;
&lt;p&gt;The code is committed to a &lt;a href=&quot;https://git-scm.com/&quot;&gt;GIT repository&lt;/a&gt;. Next is to configure a &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Continous Integration&lt;/a&gt; engine for &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;Continuous Deployment&lt;/a&gt;. Once this is done, all that is left is commit my content and code to the repository.&lt;/p&gt;
&lt;p&gt;The frontend is developed with &lt;a href=&quot;https://reactjs.org/&quot;&gt;React JS&lt;/a&gt; and built with &lt;a href=&quot;https://en.wikipedia.org/wiki/Serverless_computing&quot;&gt;serverless architecture&lt;/a&gt;. The blog engine is done with &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; and &lt;a href=&quot;https://www.markdownguide.org/&quot;&gt;Markdown&lt;/a&gt;. Made the APIs with &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; and datastorage is done with a cloud storage service. The authentication is done with one from the many authentication services available to use. And we have a running JAMStack application.&lt;/p&gt;
&lt;p&gt;There could be serverless functions used, however for the time being it is not. I am happy to see that I could do it. The whole process took me arround 45 days.&lt;/p&gt;
&lt;p&gt;Happy JAMStack-ing. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>OOP Functional React!</title>
      <link>https://saumya.github.io/ray/articles/91/</link>
      <pubDate>Thu, 30 Jan 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/91/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Developing with &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; is pleasant enough. I have worked with &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; from its beginning. When started it was as simple as a script tag in HTML file. And then create the components and it worked! It was so simple that I was thinking why other frameworks were so so complecated to start with!&lt;span class=&quot;more&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; got complicated soon. Toolchains came up and different frameworks around &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; came up. Companies were slow to adapt but then got momentum. &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; changed its licensing and probably that was the turning point for the coporates. But whatever that may be the thing is it got complicated very soon. It was expected, when corporates were into the game. The same thing had happened when Flash became Flex and started pleasing corporates. Ultimately this made me think of switching to other frameworks.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; came up with &lt;code&gt;Class&lt;/code&gt; and all the other OOP concepts. It started implementing them. The other frameworks around &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; also started doing the same. As an application developer it felt good at one level. But the fear was there, that the way it is moving. My applications also started using OOP concepts and developed some applicatioins like that. Somewhere I was thinking why it came this way!&lt;/p&gt;
&lt;p&gt;Developing for a new application today, I took &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; for a test now. I am surprised that &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; has made some changes again. The fun part is with the new toolchains also one can write simple &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; applications. I have tested the new release of the framework in my old application and it worked! That is a big thing for adapting a framework. Even if it matures, it keeps the old applications running. With the new release, now &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; is promoting &lt;code&gt;Funcational&lt;/code&gt; approach rather than the &lt;code&gt;Classical&lt;/code&gt; OOP. Well, learning may be a thing. But then once I know the new approach, it made sense to me. Tried developing simple components and made an application to know whether it works fine! I found it did.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;hooks&lt;/code&gt; are actually simpler to understand and maintain than the &lt;code&gt;lifecycle&lt;/code&gt; methods. I could made a &lt;code&gt;Functional&lt;/code&gt; component with &lt;code&gt;states&lt;/code&gt; with very few lines of code and still know what is happening where. First I thought, it might be difficult to understand the concepts of functional approach. Now it seems fine. Overall, I found it is interesting to work with &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; again.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The 2019.</title>
      <link>https://saumya.github.io/ray/articles/89/</link>
      <pubDate>Wed, 29 Jan 2020 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/89/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Happy new year! I am late about the post. But can not miss it. The reflection about the past year. &lt;span class=&quot;more&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://saumya.github.io/ray/ray/articles/89/saumya_2019_review.jpg&quot; alt=&quot;Evening Talk&quot;&gt;&lt;/p&gt;
&lt;p&gt;It was a year of breaking many things. The list will be very long to write and some of the things can not even be put in words. These are both internal and external. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A complete new life in the making now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From outside it may seem the same but from inside I can see this. There were people arround me who seem to be wondering as to, what and how I am doing life. That is alright.&lt;/p&gt;
&lt;p&gt;The first hand experience of court and lawyers was an eye opening as to “what is it, really?!” As it is said, one can only understand if got an experience. Knowing from outside and knowing from experience is a big difference.&lt;/p&gt;
&lt;p&gt;The year opened it all. The people who stand by me and the people who just pretend, are out in the open. It just amazes to see how people react, even if one does not do anything after knowing the facts.&lt;/p&gt;
&lt;p&gt;Worked in Architecure after a long time. Thanking all those, who gave me a chance to do it.&lt;/p&gt;
&lt;p&gt;Pitching for a startup, raising funds and group activity with new people for social cause brought in a whole new experience in itself.&lt;/p&gt;
&lt;p&gt;My fund raising expereince &lt;a href=&quot;https://saumya.github.io/ray/ray/articles/86/&quot;&gt;part 1&lt;/a&gt;, &lt;a href=&quot;https://saumya.github.io/ray/ray/articles/86/2.html&quot;&gt;part 2&lt;/a&gt;. 🙏 The campaigns are open and you still can donate.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make room for new. New can only come in, if you do break the old. Old thoughts and habits are a dead-end.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is very true. A whole new experience has started coming in, once I gave it a chance. Help came in from all directions, except from where and how I expected! But that is the beauty of life. Once one is open to it, one can get.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The “new” overwhelmed me so much, that I got out of the “old” effortlessly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There were tears with people whom I never thought I would talk to. There were smiles with people who are completly strangers. There were activity all around the year, yet I was home all the time. Some were thinking I was doing nothing sitting at home, at the same time there were people who thought “how are you doing all this?!”. That is fascinating to see. I have visited so many places, some alone and some with friends. Met a lot of new people and interacted with them. A lot of bike ride, in and arround the city. There was cyclone and the city devastated. I went through that with ease. No electricity, very little water for alomst more than a month.&lt;/p&gt;
&lt;p&gt;It gave me a foundation to build upon. &lt;/p&gt;
&lt;p&gt;Happy living. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Node, MongoDB and Express.</title>
      <link>https://saumya.github.io/ray/articles/88/</link>
      <pubDate>Wed, 25 Dec 2019 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/88/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Working with databases from &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt; is easy. But then working with a support from ORM/ODM makes it more interesting. &lt;a href=&quot;https://saumya.github.io/ray/articles/87/&quot;&gt;Last time&lt;/a&gt; we saw &lt;code&gt;how we can work with SQL servers?&lt;/code&gt;, this post is about NoSQL servers, specifically &lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt;. There is a nice ODM for &lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt; known as &lt;a href=&quot;https://mongoosejs.com/&quot;&gt;mongoose&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This &lt;a href=&quot;https://mongoosejs.com/&quot;&gt;mongoose&lt;/a&gt; makes the database calls as simple as it could be. The concepts here are &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define a schema&lt;/li&gt;
&lt;li&gt;Get the Model from the Schema&lt;/li&gt;
&lt;li&gt;Do the database operations on the Model&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/saumya/NodeOrmApi_103&quot;&gt;sample project is here&lt;/a&gt; in &lt;code&gt;Github&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first call to &lt;a href=&quot;https://mongoosejs.com/&quot;&gt;mongoose&lt;/a&gt; is a connection to &lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var mongoose = require(&amp;#39;mongoose&amp;#39;);
mongoose.connect( mongoURL , {useUnifiedTopology: true,useNewUrlParser: true},function(error){
        if(error){
            throw error
        }
        console.log(&amp;#39;Connection : SUCCESS : &amp;#39;);

        // Go ahead with Database modifications
        //
    });&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are two ways to call &lt;code&gt;connect&lt;/code&gt; function. The way it is shown above will give &lt;code&gt;error&lt;/code&gt; object if there is an error in connection. One has to check for the availability of this object and do things accordingly. If not present, then we have a successful connection. Once that is done, one can call the CRUD methods of the model for modifying the database.&lt;/p&gt;
&lt;p&gt;A model file(example: &lt;code&gt;dog.model.js&lt;/code&gt;) will look as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const mongoose = require(&amp;#39;mongoose&amp;#39;);
const DogSchema = mongoose.Schema({
    name: String,
    description: String
});
const DogModel = mongoose.model(&amp;#39;MyDog&amp;#39;, DogSchema);
module.exports = DogModel;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is how to get the model and from there on, you can use the &lt;a href=&quot;https://mongoosejs.com/&quot;&gt;mongoose&lt;/a&gt; API to modify the database through the model Object.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Node, SQL and ORM.</title>
      <link>https://saumya.github.io/ray/articles/87/</link>
      <pubDate>Mon, 16 Dec 2019 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/87/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Finished a project having database, &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt; and web UI. While connecting the database from &lt;code&gt;Node&lt;/code&gt; server is easy, there are as usual a lot of options here. First I used &lt;a href=&quot;https://github.com/mysqljs/mysql#install&quot;&gt;mysql&lt;/a&gt; but soon after realised there is an updated package to it called &lt;a href=&quot;https://github.com/sidorares/node-mysql2#installation&quot;&gt;mysql2&lt;/a&gt;. So I have shifted to &lt;a href=&quot;https://github.com/sidorares/node-mysql2#installation&quot;&gt;mysql2&lt;/a&gt;. Once its installed, it is straight forward to connect to any database. The docs are very helpful to get going.&lt;/p&gt;
&lt;p&gt;Once database connection is done and one get used to the workflow, the need for an &lt;code&gt;ORM&lt;/code&gt; arises. There are many options for this in &lt;code&gt;Node&lt;/code&gt; land. After looking into different options, I started using &lt;a href=&quot;https://sequelize.org/&quot;&gt;Sequelize&lt;/a&gt;. It is as nice as &lt;code&gt;Node&lt;/code&gt; itself and the docs of this library is very helpful and welcoming.&lt;/p&gt;
&lt;p&gt;These two things makes life a lot easier, while working with database from a &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt; server. Next comes the time to write APIs for the frontend. I used &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; to get things done for the APIs. There is one thing to keep in mind while working with JSON for the APIs in &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;. The thing is one has to initialise &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; application like below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    const express = require(&amp;#39;express&amp;#39;);
    const app = express();
    const port = 3000;
    app.use(express.json());
    app.use(express.urlencoded({ extended: false }));&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once this is done, we are ready to take/give JSON from/to UI. If you are trying to host it on Heroku, then the following line is important.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; app.listen( process.env.PORT || port , () =&amp;gt; console.log(`My App listening!`) );&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is required because, Heroku does not listen on port 3000 as we are trying to make it. But Heroku port is available for us at &lt;code&gt;process.env.PORT&lt;/code&gt;. So we are using it here.&lt;/p&gt;
&lt;p&gt;Next is making the APIs CORS enabled. Which is done as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    app.use(function (req, res, next) {
        res.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;http://localhost:1234&amp;#39;);
        res.setHeader(&amp;#39;Access-Control-Allow-Methods&amp;#39;, &amp;#39;GET, POST, OPTIONS, PUT, PATCH, DELETE&amp;#39;);
        res.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;X-Requested-With,content-type, Accept&amp;#39;);
        res.setHeader(&amp;#39;Access-Control-Allow-Credentials&amp;#39;, true);
        next();
    });&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we are ready to write the APIs. &lt;/p&gt;
&lt;h3 id=&quot;front-end&quot;&gt;Front End&lt;/h3&gt;
&lt;p&gt;The frontend I have done, is using &lt;a href=&quot;https://bulma.io/&quot;&gt;bulma&lt;/a&gt; for CSS and &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt; for DOM manipulation. Well yes, I hava avoided all the frameworks and new toys of today. And still could do the project and finish it. I have iterated it a lot and it is all fun to see how time could be saved even if one does not use a framework! &lt;/p&gt;
&lt;p&gt;Here are the code repositories to have a look for frontend and backend.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/saumya/attendance_ui&quot;&gt;Frontend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/saumya/NodeOrmApi_102&quot;&gt;Backend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is a very nice experience to see Javascript in all sides and almost no framework on frontend and still having a decent project running.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Fundraising</title>
      <link>https://saumya.github.io/ray/articles/86/</link>
      <pubDate>Wed, 16 Oct 2019 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/86/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;I have never thought I could do a fundraising campaign. I had a believe that even if I could start, it would be a failure. &lt;/p&gt;
&lt;h3 id=&quot;the-problem-is-mind&quot;&gt;The problem is &lt;strong&gt;&lt;code&gt;MIND&lt;/code&gt;&lt;/strong&gt;!&lt;/h3&gt;
&lt;h3 id=&quot;lol-i-am-serious-before-even-starting-a-thing-the-mind-projects-it-as-a-failure-to-the-level-that-one-must-not-even-try&quot;&gt;LOL. I am serious. Before even starting a thing, the mind projects it as a failure to the level that one must not even try.&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;However, to make myself clear about my assumptions I thought I will try it out. With all these in my mind, I started a campaign to raise funds for 1000 trees in 30 days, where each tree is 42 INR. While I was not sure where to go next, just logged into Facebook and thought would start from there. After all, no where to go and I can see if I have friends who can be of real help! Again the fear was there because I do not have a lot of friend counts in Facebook either, comparing to people having 1000s in numbers. However I pinged some and waited for a reply.&lt;/p&gt;
&lt;p&gt;Towards the end of the day one, I almost had no hope. No one responded and those who responded they said &lt;code&gt;will see it later&lt;/code&gt;. That answer is &lt;code&gt;no&lt;/code&gt; for sure, those who know the modern day vocabulary of so called educated. With that I went to bed thinking &lt;code&gt;well, I knew it&lt;/code&gt;, I can not do it.&lt;/p&gt;
&lt;p&gt;Second day I thought I will try it for sometime and then just leave it. After all, I am not capable and people are not ready to donate. And if at all, why they will donate to my campaign! I logged in to Facebook and to my surprise many of the friends, who said &lt;code&gt;will see it later&lt;/code&gt; had asked me about the details of the project and the &lt;code&gt;donation link&lt;/code&gt;! At that point I knew, there is no going back for me now. &lt;/p&gt;
&lt;h3 id=&quot;done-in-4-days-with-44-supporters&quot;&gt;Done in 4 days with 44 supporters.&lt;/h3&gt;
&lt;p&gt;Wow! I was suprised as how people are willing to help. Some friends do not even ask for the cause! As I ask them “Can you donate for me?”, straightaway they asked “How?! Give your account number?” Thanking all of you for being there. This does not mean there are no backfire from people. There were some &lt;code&gt;very very rude&lt;/code&gt; and &lt;code&gt;negative&lt;/code&gt; responses. But the thing is despite of all those, I made it. &lt;/p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fphoto.php%3Ffbid%3D10162802205600179%26set%3Da.112470705178%26type%3D3&amp;width=400&quot; width=&quot;400&quot; height=&quot;658&quot; style=&quot;border:none;overflow:hidden&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowTransparency=&quot;true&quot; allow=&quot;encrypted-media&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;

&lt;p&gt;I think the points below are the basics for a successful Fundraising Campaign.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Must be a real solution for a real problem.&lt;/li&gt;
&lt;li&gt;Leadership must have worked upon the questions supposed to be asked and ready with the answers.&lt;/li&gt;
&lt;li&gt;Put a time constraint and go all in. The one which I thought is a problem “the time” is actually a great tool to keep one focused.&lt;/li&gt;
&lt;li&gt;Never go into conclusion too early. People will respond. There are many reasons why they might not respond early. So persevere.&lt;/li&gt;
&lt;li&gt;Make some authentic friends rather than the number game in Facebook or WhatsApp or in general.     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I found is &lt;code&gt;three questions&lt;/code&gt; pattern. People will ask basically 3 questions, if they want to donate. If they are going to 3rd question, &lt;del&gt;it is not that they will not donate&lt;/del&gt; then they will not donate &lt;code&gt;now&lt;/code&gt;. May be later they will contribute. There is no point in spending more time with them &lt;code&gt;now&lt;/code&gt;, if you want to finish the campaign in time. &lt;/p&gt;
&lt;p&gt;The questions are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Where is the link to donate?&lt;/li&gt;
&lt;li&gt;What is the project about?&lt;/li&gt;
&lt;li&gt;How do you know it is not fake?!          &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The questions will come together but in that order. I mean those who will be asking the second question must have asked the first question. So people who will be asking question 3, have already asked question 1 and then question 2 and have heard answers to both.&lt;/p&gt;
&lt;h3 id=&quot;there-are-people-who-will-not-say-no-directly-they-come-and-abuse-you-personally-in-a-manner-as-if-they-are-caring-for-you&quot;&gt;There are people who will not say “no” directly. They come and abuse you personally in a manner as if they are caring for you!&lt;/h3&gt;
&lt;p&gt;Be very careful not to get engaged with them. Else you will be loosing the time in hand. So the time limit is very necessary to keep you focused.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Depending upon how you are friends, some will direclty ask for the &lt;code&gt;donation link&lt;/code&gt;. They just have to give because of you, no matter what! So it is your duty to provide them with information about the cause. These are the people who might start their own campaign! Some of the donors to my campaign have started their own. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Some friends will ask the second question. My suggestion is never ever answer from your own mind. The leadership should have answered this already. In my case it did. So I went ahead and provided them with the links to the videos where the questions are answered. I bow down to &lt;code&gt;the leadership&lt;/code&gt; for the answers. As soon as people saw the videos, thy are ready to donate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The answer to the third question is, provide them with some more videos from the leadership. They should be convinced. Show them the panel of people involved. Show them the support from the masses. Fortunately for me all of these are available in terms of Youtube videos. I do not have to do anything else except providing them with the right links to the videos. And after all these if they still are not sure then leave them there. Please do not force them at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Now if someone goes for the next question, please run. Yes, time is limited and you can not spend more time here. No matter what, run.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What an experience! I never thought I will cross even 50 tress. Like it is said, it seems impossible until it is done. &lt;/p&gt;
&lt;p&gt;In the course of all this I talked with friends, with whom I had not talked in years! I had almost talked with friends all across the planet. For some I used to think I just know them in Facebook! I never knew they have such a strong connection with me! This is another experience I have, that distance does not matter. If you have an authentic connection, it really works.&lt;/p&gt;
&lt;p&gt;It can be done with just an internet connection and Facebook. Here I am, 4 days and 44 supporters away, done with 1000 trees. &lt;a href=&quot;https://www.ishaoutreach.org/en/cauvery-calling/campaigns/cauvery-calling-action-now-12287&quot;&gt;This is the campaign&lt;/a&gt; that I am talking about here.&lt;/p&gt;
&lt;p&gt;Well, I had started another campaign just to make sure that I can make it, the first one might be an accident! That is another story.&lt;/p&gt;
&lt;p&gt;The campaigns are still going on for &lt;a href=&quot;https://www.ishaoutreach.org/en/cauvery-calling&quot;&gt;Cauvery Calling&lt;/a&gt; 🙏 and if you wish, you can start your own campaign or donate some tress 🙏. &lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
&lt;h5 id=&quot;here-is-the-second-campaign-experience&quot;&gt;Here is the &lt;a href=&quot;https://saumya.github.io/ray/articles/86/2.html&quot;&gt;Second Campaign&lt;/a&gt; Experience.&lt;/h5&gt;
&lt;h3 id=&quot;&quot;&gt;…&lt;/h3&gt;
&lt;h6 id=&quot;please-leave-a-comment-in-facebook-here&quot;&gt;Please leave a comment in &lt;a href=&quot;https://www.facebook.com/saumyaray/posts/10162952072090179&quot;&gt;Facebook here&lt;/a&gt;.&lt;/h6&gt;
&lt;!-- The long story is coming soon. --&gt;


</description>
    </item>
    <item>
      <title>Removed Commeting from here, Disqus!</title>
      <link>https://saumya.github.io/ray/articles/85/</link>
      <pubDate>Mon, 07 Oct 2019 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/85/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;I was ignoring this for a long time. As &lt;code&gt;Disqus&lt;/code&gt; was powering this blog comments, I thought it is alright to ignore. Then came a time, when I found it is true, as to why people are getting away from &lt;code&gt;Disqus&lt;/code&gt;. A simple search in the internet will fetch you a lot of information about what/why of this commenting system. So I am not putting out the pointed information about the story here.&lt;/p&gt;
&lt;p&gt;Finally I am here, removing that comment system from the blog here. Not sure what I am going to use yet. Till that time it is alright to ping me up on &lt;a href=&quot;https://twitter.com/saumya&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Building HTML Email Newsletter</title>
      <link>https://saumya.github.io/ray/articles/84/</link>
      <pubDate>Mon, 17 Jun 2019 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/84/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This came to me as a surprise that, in today’s world for web related work one has to work with &lt;code&gt;tables&lt;/code&gt; as if its 1999. Well, I am talking about designing and developing for email newsletters. Here is a &lt;a href=&quot;https://www.smashingmagazine.com/2010/01/design-and-build-an-email-newsletter-without-losing-your-mind/&quot;&gt;tutorial from 2010&lt;/a&gt; which still is relevant. So yes, if you have gone through the above tutorial you have already known, for the reference I will mention it again here. &lt;/p&gt;
&lt;span class=&quot;more&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2010/01/design-and-build-an-email-newsletter-without-losing-your-mind/&quot;&gt;Code like it’s 1999 (literally)&lt;/a&gt; and I agree to it. Below is a list of things to remember while making HTML email newsletters.&lt;/p&gt;
&lt;h3 id=&quot;the-to-do-list&quot;&gt;The to-do list&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTML and CSS, &lt;del&gt;(well, not HTML5 and CSS3)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Layouts are all &lt;code&gt;table&lt;/code&gt; nothing more &lt;del&gt;(no CSS layouts or box models)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;No Canvas, no Webgl, no javascript, no modern web&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;CSS should always be inline &lt;del&gt;(no extenal and no CSS declarations)&lt;/del&gt;   &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img&quot;&gt;Images&lt;/a&gt; should be named short and &lt;code&gt;Alt text&lt;/code&gt; should be present&lt;/li&gt;
&lt;li&gt;It is the best to use a single column layout&lt;/li&gt;
&lt;li&gt;Use images to layout and display groups of information instead of trying to recreate the same in HTML and CSS&lt;/li&gt;
&lt;li&gt;Maximum width of layout should be 600px&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a &lt;a href=&quot;https://webdesign.tutsplus.com/articles/build-an-html-email-template-from-scratch--webdesign-12770&quot;&gt;tutorial&lt;/a&gt; showing the steps to create an &lt;a href=&quot;https://webdesign.tutsplus.com/articles/build-an-html-email-template-from-scratch--webdesign-12770&quot;&gt;HTML template&lt;/a&gt; from scratch. &lt;/p&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webdesign.tutsplus.com/tutorials/what-you-should-know-about-html-email--webdesign-12908&quot;&gt;What you should know about HTML Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webdesign.tutsplus.com/articles/the-complete-guide-to-designing-for-email--webdesign-12941&quot;&gt;The complete guide to designing for Email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Slim Framework and Composer Autoload</title>
      <link>https://saumya.github.io/ray/articles/83/</link>
      <pubDate>Tue, 29 Jan 2019 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/83/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Like most of the PHP frameworks, &lt;a href=&quot;https://www.slimframework.com/&quot;&gt;Slim framework&lt;/a&gt; uses &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; for developer experience. &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; does a lot of things which manually one has to do before. This post is specifically with regard to &lt;a href=&quot;https://www.slimframework.com/&quot;&gt;Slim framework&lt;/a&gt;. However, this can also be refered to, for other frameworks which use &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;.&lt;/p&gt;
&lt;span class=&quot;more&quot;&gt;

&lt;p&gt;There is a specific configuration in &lt;code&gt;composer.json&lt;/code&gt; which deals with autoloading of the classes. Its not necessary to do autoloading, one can do it manually as always.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require &amp;#39;../src/controllers/AppController.php&amp;#39;;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This way, one has to do it all the time for each individual classes. The autoloading of classes does this automatically depending upon the settings and some conventions. Depending upon the folder structure and the namespaces, the setting could just be as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;slim/slim&amp;quot;: &amp;quot;^3.12&amp;quot;
    },
    &amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-4&amp;quot;: { &amp;quot;rain\\&amp;quot; : [&amp;quot;src/&amp;quot;] }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here we are talking about &lt;code&gt;psr-4&lt;/code&gt; standards. There are different standards in &lt;code&gt;psr&lt;/code&gt; and they may have somethings in common. However there are differences between them also. So just keep this in mind we are talking about &lt;code&gt;psr-4&lt;/code&gt; standards here.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-4&amp;quot;: { &amp;quot;rain\\&amp;quot; : [&amp;quot;src/&amp;quot;] }
    }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, now let’s look at the standards of &lt;code&gt;psr-4&lt;/code&gt; and how it finds the files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; will load the files relative to &lt;code&gt;composer.json&lt;/code&gt; file. In the setting above, it will load from the folder &lt;code&gt;src&lt;/code&gt; which is at the same level as &lt;code&gt;composer.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The first setting &lt;code&gt;rain&lt;/code&gt; in the &lt;code&gt;autoload&lt;/code&gt; configuration is the namespace of the PHP Classes&lt;/li&gt;
&lt;li&gt;PHP class &lt;code&gt;file name&lt;/code&gt; and the &lt;code&gt;class name&lt;/code&gt; should be exactly the same (except the &lt;code&gt;.php&lt;/code&gt; extension)&lt;/li&gt;
&lt;li&gt;PHP class file location and its namespace should exactly the same&lt;/li&gt;
&lt;li&gt;PHP class namespace should be exactly the same as specified in the &lt;code&gt;autoload&lt;/code&gt; configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A PHP class file for the above settings would look like below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//location: src/configs/AppConfig.php

namespace rain\configs;

class AppConfig
{
    function getConfig()
    {
        return &amp;#39;AppConfig&amp;#39;;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once one is careful enough to map the &lt;code&gt;folder structure&lt;/code&gt; and &lt;code&gt;namespace&lt;/code&gt; the composer autoload functionality will load the classes. Here is a &lt;a href=&quot;https://myshittycode.com/2018/03/14/slim-class-x-not-found/&quot;&gt;nice explanation&lt;/a&gt; of the concepts.&lt;/p&gt;
&lt;h3 id=&quot;after-adding-the-autoload-field-in-composerjson-one-has-to-re-run-dump-autoload-to-re-generate-the-vendorautoloadphp-file&quot;&gt;After adding the &lt;strong&gt;autoload field&lt;/strong&gt; in &lt;code&gt;composer.json&lt;/code&gt;, one &lt;strong&gt;has to&lt;/strong&gt; re-run &lt;code&gt;dump-autoload&lt;/code&gt; to re-generate the vendor/autoload.php file.&lt;/h3&gt;
&lt;p&gt;This should takecare of autoloading of the class files. The &lt;code&gt;dump-autoload&lt;/code&gt; is a critical step while updating the &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For windows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php composer.phar dump-autoload&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For Unix, Linux and macOS&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php composer dump-autoload&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cake &amp; Slim</title>
      <link>https://saumya.github.io/ray/articles/82/</link>
      <pubDate>Sun, 27 Jan 2019 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/82/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;PHP frameworks have really taken up some new concepts from other technology such as NodeJS and Ruby. On my search for an easy deployable framework to server, I found both &lt;a href=&quot;https://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt; and &lt;a href=&quot;https://www.slimframework.com/&quot;&gt;Slim&lt;/a&gt; are good enough.&lt;/p&gt;
&lt;p&gt;For getting started with development &lt;a href=&quot;https://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt; seems like old school as one just needs to download the package and put it on a server and get into coding. While &lt;a href=&quot;https://www.slimframework.com/&quot;&gt;Slim&lt;/a&gt; seems to be a little more learning as one needs to get used to &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;. &lt;a href=&quot;https://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt; also has an option to get started using &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt; is a full framework having everything to get an application running on server. &lt;a href=&quot;https://www.slimframework.com/&quot;&gt;Slim&lt;/a&gt; seems to be a better option to get upto speed with API development.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The 2018.</title>
      <link>https://saumya.github.io/ray/articles/81/</link>
      <pubDate>Fri, 11 Jan 2019 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/81/</guid>
      <author>Saumya</author>
      <description>&lt;h6 id=&quot;december-of-2017-ended-with-my-first-ever-visit-to-court-at-cuttack-odisha&quot;&gt;December of 2017 ended with my first ever visit to Court at Cuttack, Odisha.&lt;/h6&gt;
&lt;p&gt;The visits to the Court continue through out 2018. &lt;del&gt;That’s another story.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm5.staticflickr.com/4898/46646647672_793d52dc42_h.jpg&quot; alt=&quot;Nilgiri Mountain&quot;&gt;&lt;/p&gt;
&lt;span class=&quot;more&quot;&gt;

&lt;p&gt;Professionally the year 2018, was not much to offer but personally it was loaded with experiencces.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm5.staticflickr.com/4893/45784108985_3d28ec3c4a_h.jpg&quot; alt=&quot;Adiyogi&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Worked in Architecture and Visualisation&lt;/li&gt;
&lt;li&gt;Visited a lot of new places&lt;/li&gt;
&lt;li&gt;Travelled with almost no planning&lt;/li&gt;
&lt;li&gt;Met with a lot of friends after 20 years, some after 30 years!&lt;/li&gt;
&lt;li&gt;Dealt with Court and Lawyers &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://saumya.github.io/ray/articles/81/long_story.html&quot;&gt;long story is here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>SketchUp + Visualizer</title>
      <link>https://saumya.github.io/ray/articles/80/</link>
      <pubDate>Mon, 02 Jul 2018 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/80/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;While doing some architectural visualisations recently, I got amazed by the tools available now. From costlier to the free versions, they are all around the place. However there are very few which work with the workflow of an architect.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1768/28253995577_8c744d682f_z.jpg&quot; alt=&quot;saumya visualisation&quot;&gt;&lt;/p&gt;
&lt;p&gt;The really nice tool in this space is &lt;a href=&quot;https://www.sketchup.com/&quot;&gt;SketchUp&lt;/a&gt;. Current version is only available for the web. However there are older versions available to &lt;a href=&quot;https://www.sketchup.com/download/all&quot;&gt;download&lt;/a&gt; and they work offline.&lt;/p&gt;
&lt;p&gt;The thing here is, SketUp does not support rendering out of the box. And for rendering, there are a lot of options available there too. However, I found &lt;a href=&quot;http://getvisualizer.com/&quot;&gt;Visualizer&lt;/a&gt; is a must tool. It is simple but very productive. Bad news is, they have stopped developing it, good news is, they made it free. Its available for &lt;a href=&quot;http://getvisualizer.com/&quot;&gt;download for free&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm1.staticflickr.com/923/28253990407_73e5af20fc_b.jpg&quot; alt=&quot;Gate&quot;&gt;          &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://getvisualizer.com/&quot;&gt;Visualizer&lt;/a&gt; supports &lt;a href=&quot;https://www.sketchup.com/&quot;&gt;SketchUp&lt;/a&gt; till version 2016.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sketchup.com/&quot;&gt;SketchUp&lt;/a&gt; works offline till version 2018.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I found the combination version of &lt;a href=&quot;https://www.sketchup.com/&quot;&gt;SketchUp 2015&lt;/a&gt; and &lt;a href=&quot;http://getvisualizer.com/&quot;&gt;Visualizer&lt;/a&gt; works best for me.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm1.staticflickr.com/925/42219127815_65f2abf192_b.jpg&quot; alt=&quot;Gate View&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here is a link where there are descriptions and discussions to download &lt;a href=&quot;https://forums.sketchup.com/t/link-to-download-sketchup-2015-make/24281/2&quot;&gt;SketchUp 2015&lt;/a&gt; and &lt;a href=&quot;http://getvisualizer.com/&quot;&gt;Visualizer&lt;/a&gt; is already available for 2015.&lt;/p&gt;
&lt;p&gt;Happy rendering.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Firebase Cloud FireStore and checking existence of a Document</title>
      <link>https://saumya.github.io/ray/articles/79/</link>
      <pubDate>Thu, 28 Jun 2018 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/79/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;The thing is &lt;a href=&quot;https://firebase.google.com/products/firestore/&quot;&gt;Cloud FireStore&lt;/a&gt; is still in beta. However, I find it quite stable to run my applications. It has got all the things to run a serverless application.&lt;/p&gt;
&lt;p&gt;While this is a NoSQL database, there are &lt;code&gt;Documents&lt;/code&gt; and &lt;code&gt;Collections&lt;/code&gt;. I was suppose to check the existence of a &lt;code&gt;Document&lt;/code&gt; before adding some values into it. There is an API which gives us exactly the same thing, &lt;a href=&quot;https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentSnapshot#~exists&quot;&gt;exists&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docSnapshot.exists&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The trick here is, if there is no &lt;code&gt;Document&lt;/code&gt; creation involved before but still there are data inside that &lt;code&gt;Document&lt;/code&gt; path (its possible) then the &lt;code&gt;exists&lt;/code&gt; will always return &lt;code&gt;false&lt;/code&gt;. To know whether the &lt;code&gt;Document&lt;/code&gt; is actually created or not Firebase &lt;code&gt;Console&lt;/code&gt; is a good help. In the &lt;code&gt;Console&lt;/code&gt; the &lt;code&gt;Documents&lt;/code&gt; which are not created will be shown as &lt;em&gt;italics&lt;/em&gt;. Its a subtle but very informative visual separation.&lt;/p&gt;
&lt;p&gt;Just make sure, you created your &lt;code&gt;Document&lt;/code&gt; before checking it with &lt;code&gt;exists&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is &lt;a href=&quot;https://stackoverflow.com/questions/48068581/firebase-doc-exists-but-doc-exists-returns-false?answertab=active#tab-top&quot;&gt;stackoverflow answer&lt;/a&gt;, which helped me in this regard.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The options today</title>
      <link>https://saumya.github.io/ray/articles/78/</link>
      <pubDate>Wed, 11 Apr 2018 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/78/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Social networks -      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://friendi.ca/&quot;&gt;friendica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://diasporafoundation.org/&quot;&gt;diaspora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://project.hubzilla.org/page/hubzilla/hubzilla-project&quot;&gt;hubzilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://matrix.org/blog/home/&quot;&gt;matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://joinmastodon.org/&quot;&gt;mastodon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://movim.eu/&quot;&gt;movim&lt;/a&gt;          &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Emails - &lt;a href=&quot;https://www.prxbx.com/email/&quot;&gt;all the email services&lt;/a&gt;               &lt;/p&gt;
&lt;p&gt;Browsers -     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://beakerbrowser.com/&quot;&gt;beaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://brave.com/&quot;&gt;brave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy Living.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The year 2017</title>
      <link>https://saumya.github.io/ray/articles/77/</link>
      <pubDate>Thu, 04 Jan 2018 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/77/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;The year 2017, was an exciting year. A lot of things have started and could be seen as a year of life.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm5.staticflickr.com/4682/38781051814_1414f9066b_z.jpg&quot; alt=&quot;Dibyaamshu&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are countless events good and bad(no worse), but if I have to summerise, its this.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;I saw and spent time with my son&lt;/code&gt;
&lt;code&gt;since his birth (after 3 and half years).&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Despite of all the conspiracies we still made it. A week of togetherness. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm5.staticflickr.com/4642/25619857958_1e105aecc8_z.jpg&quot; alt=&quot;Dibyaamshu&quot;&gt;&lt;/p&gt;
&lt;p&gt;Happy Living.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Slim with Composer</title>
      <link>https://saumya.github.io/ray/articles/76/</link>
      <pubDate>Wed, 09  Aug 2017 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/76/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;One of the nice frameworks of &lt;a href=&quot;https://secure.php.net/&quot;&gt;PHP&lt;/a&gt; is &lt;a href=&quot;https://github.com/slimphp&quot;&gt;Slim&lt;/a&gt;. Now its on its version 3. I started using it since version 1. And must admit that there are a lot of changes since its version 1. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;At the same time, &lt;a href=&quot;https://secure.php.net/&quot;&gt;PHP&lt;/a&gt; also has seen a lot of changes. One of the interesting thing that happened is package manager. There are a few options here but &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; is probably oldest one here. It says “Dependency Manager for PHP” for itself. Well, whatever one calls it, the thing is it downloads the required packages (and its dependencies) for us. The installation also has two options, either install it locally in a folder (project folder) or could be installed globally in one machine. The difference is how you fire up the command &lt;code&gt;composer&lt;/code&gt;. If its globally installed, one has to say &lt;code&gt;composer&lt;/code&gt; but if its locally installed, then it would be called with &lt;code&gt;php composer&lt;/code&gt;. The &lt;code&gt;php&lt;/code&gt; executable must call the locally installed &lt;code&gt;composer&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now to install a package, one has to run the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;composer require slim/slim &amp;quot;^3.0&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Alternatively one can write all the dependencies in &lt;code&gt;composer.json&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;slim/slim&amp;quot;: &amp;quot;^3.0&amp;quot;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then run the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;composer install&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, everything that is listed in the &lt;code&gt;composer.json&lt;/code&gt; file will be downloaded inside a folder named &lt;code&gt;vendor&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;From there on, its all your code, the &lt;a href=&quot;https://github.com/saumya/Slim3Basics&quot;&gt;reference app&lt;/a&gt; is here.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Five OpenFL Extensions for Android</title>
      <link>https://saumya.github.io/ray/articles/75/</link>
      <pubDate>Tue, 09 May 2017 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/75/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Native Extensions for &lt;a href=&quot;http://www.openfl.org/&quot;&gt;OpenFL&lt;/a&gt; are the things which bind &lt;a href=&quot;http://www.openfl.org/&quot;&gt;OpenFL&lt;/a&gt; applications with the native platform it is running on. There are some extensions provided from &lt;a href=&quot;http://www.openfl.org/&quot;&gt;OpenFL&lt;/a&gt; itself. If you go to &lt;a href=&quot;http://www.openfl.org/&quot;&gt;OpenFL&lt;/a&gt; repository on github, you can find for yourself extensions, such as &lt;a href=&quot;https://github.com/openfl/extension-iap&quot;&gt;In-App Purchase&lt;/a&gt; and &lt;a href=&quot;https://github.com/openfl/extension-admob&quot;&gt;Google AdMob&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Previously it was a lot to do to make an extension for yourself. But as &lt;a href=&quot;http://www.openfl.org/&quot;&gt;OpenFL&lt;/a&gt; and Android platform matured, the getting started with extensions became easier.      &lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&quot;https://player03.com/2014/08/09/openfl-extensions/&quot;&gt;tutorial in detail about the making&lt;/a&gt; of Extensions.&lt;/p&gt;
&lt;p&gt;There are 2 steps to it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;create&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lime create extension MyExtension&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make it ready to use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lime rebuild MyExtension android&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or, if you are calling &lt;code&gt;rebuild&lt;/code&gt; from inside the extension folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lime rebuild . android&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thats all for an extension to be ready to use in an OpenFL Android Application. &lt;/p&gt;
&lt;p&gt;To use the extension in your &lt;a href=&quot;http://www.openfl.org/&quot;&gt;OpenFL&lt;/a&gt; project, add this to your &lt;code&gt;project.xml&lt;/code&gt; as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;include path=&amp;quot;../relative/path/to/MyExtension&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then, from inside your project, you can call the methods as &lt;code&gt;MyExtension.myMethod()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have written down some of my own extensions for Android.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/saumya/AnCam&quot;&gt;AnCam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/saumya/RayToast&quot;&gt;RayToast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/saumya/AnWebView&quot;&gt;AnWebView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/saumya/AnAppLaunch&quot;&gt;AnAppLaunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/saumya/AnCall&quot;&gt;AnCall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/saumya/OpenFL-AnExt&quot;&gt;example implementation&lt;/a&gt; for the extnsions are &lt;a href=&quot;https://github.com/saumya/OpenFL-AnExt&quot;&gt;present here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Maintaining a React Native application on iOS.</title>
      <link>https://saumya.github.io/ray/articles/74/</link>
      <pubDate>Thu, 23 Mar 2017 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/74/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt; That may sound just an easy job. Surprisingly its not! Its because &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt;is evolving at a very high speed. The community is vibrant and &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; itself is also moving at a very high speed. Though there are minimal API changes but there are changes and sometimes there are breaking changes. Well as for iOS, we know it also comes with API changes and sometimes breaking changes. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; The absolute minimum one has to do, to maintain a &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; project on iOS is to check for all the tool chain is upto date. Being said that, there are dependent libraries and there are chances that these things may not sync and your project may break.&lt;/p&gt;
&lt;p&gt; As of today &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; is 0.42 and to compile an iOS project, it seems the bare minimum is &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;Watchman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://brew.sh/&quot;&gt;Brew&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;react-native-cli&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code reference to update the &lt;code&gt;react-native-cli&lt;/code&gt; would be just to re-install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install -g react-native-cli&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To know the version of both, its as simple as this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native --version&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hopefully that opens up the idea as to maintaining a project is also a time consuming process. And with projects which evolve, if one has develop its own project, then the time and effort to maintain it will be exponential.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Reflecting on 2016.</title>
      <link>https://saumya.github.io/ray/articles/73/</link>
      <pubDate>Tue, 03 Jan 2017 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/73/</guid>
      <author>Saumya</author>
      <description>&lt;ul&gt;
&lt;li&gt;Moved to a new place&lt;/li&gt;
&lt;li&gt;Moved to a new company (rather new kind of employment) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chose what to do for that year and done that&lt;/li&gt;
&lt;li&gt;Started with some UX design and consulting for clients with a team&lt;/li&gt;
&lt;li&gt;Educated the team about the UX design and work flow and the tools&lt;/li&gt;
&lt;li&gt;I together with the team delivered the UX to the clients&lt;/li&gt;
&lt;li&gt;Done some plugins for Wordpress customisation&lt;/li&gt;
&lt;li&gt;Written some APIs to connect to Wordpress from a mobile App&lt;/li&gt;
&lt;li&gt;Swift was the call of the mid-year and done that for almost 4 months&lt;/li&gt;
&lt;li&gt;Well the end of the year was to React&lt;/li&gt;
&lt;li&gt;Done and delivered a project in ReactNative for Android          &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;contribution&quot;&gt;Contribution&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Github activities are increased.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/1/389/31206649944_27be46b4c5_z.jpg&quot; alt=&quot;Opensource contribution on Github&quot;&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Released my first ever library, &lt;a href=&quot;http://lib.haxe.org/p/raymp&quot;&gt;raymp on haxelib&lt;/a&gt; and &lt;a href=&quot;https://github.com/saumya/raymp&quot;&gt;its opensorce&lt;/a&gt; too.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A lot of learning in terms of client and business understandings &lt;/li&gt;
&lt;li&gt;Moved to Linux (Ubuntu) from macOS as primary dev-environment&lt;/li&gt;
&lt;li&gt;Redesigned &lt;a href=&quot;https://saumya.github.io&quot;&gt;my site&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Cold drinks consumption is below a litre in the whole year :)                    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still I feel, I could have done more, I am looking at you 2017.&lt;/p&gt;
&lt;p&gt;Happy New Year.
Cheers.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>React Native on Android, changing app name, package name and version code</title>
      <link>https://saumya.github.io/ray/articles/72/</link>
      <pubDate>Fri, 11 Nov 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/72/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;There are things one may need to change in the release build for Android. 
Things like &lt;code&gt;App Name&lt;/code&gt; are a case here. Suppose you start developing by initialising to a generic &lt;code&gt;App Name&lt;/code&gt; and at the time of release one need to change to the actual &lt;code&gt;App Name&lt;/code&gt;. Same goes for &lt;code&gt;package name&lt;/code&gt;, which is visible in &lt;code&gt;Google Play Store&lt;/code&gt; and as well in the &lt;code&gt;App details&lt;/code&gt; of the Android phone. 
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;generate-with-correct-names&quot;&gt;Generate with correct names&lt;/h1&gt;
&lt;p&gt;Before we move forward and change things in the final version of the app. There is a way to fix this from the beginning. Generate a &lt;code&gt;react native&lt;/code&gt; app with a proper package name with the command below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native init MyAwesome -package &amp;quot;com.saumya.app&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But however if at all you have initialised the app as  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native init RnApp&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then the option remains to hack things in the end.           &lt;/p&gt;
&lt;p&gt;So read on.&lt;/p&gt;
&lt;h3 id=&quot;app-name&quot;&gt;App Name&lt;/h3&gt;
&lt;p&gt;Lets start with &lt;code&gt;App Name&lt;/code&gt;. This is the name thats visible in users screen. To change this name, you have to change it in &lt;code&gt;strings.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Full path is &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android/app/src/main/res/values/strings.xml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and the entry is &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;string name=&amp;quot;app_name&amp;quot;&amp;gt;My Android App&amp;lt;/string&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;package-name&quot;&gt;Package name&lt;/h3&gt;
&lt;p&gt;This is shown in the &lt;code&gt;Play Store&lt;/code&gt; and the details in &lt;code&gt;About App&lt;/code&gt; of your Android device. This should say something like &lt;code&gt;com.myapp&lt;/code&gt; or &lt;code&gt;com.company.appname&lt;/code&gt; or something similar. &lt;/p&gt;
&lt;p&gt;To change this, you have to edit four files. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;android/app/src/main/java/com/reactNativeSampleApp/MainActivity.java&lt;/li&gt;
&lt;li&gt;android/app/src/main/java/com/reactNativeSampleApp/MainApplication.java&lt;/li&gt;
&lt;li&gt;android/app/src/main/AndroidManifest.xml ( optional as per my experience )&lt;/li&gt;
&lt;li&gt;android/app/build.gradle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first two Java files have the package name as something like below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package com.ReactNativeApp;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Change it to your desired package name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package com.myComp.MyApp;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point it should be required to make the physical changes to the Java files in the proper package. But somehow it does not work! Rather it breaks the build. Just keep in mind, that we have changed the &lt;code&gt;package&lt;/code&gt; names and that should reflect in the actual package. Incase the builds break, you know where to find.&lt;/p&gt;
&lt;h3 id=&quot;version-code&quot;&gt;Version Code&lt;/h3&gt;
&lt;p&gt;This is a number which Google Playstore recognises and does not allow to upload another APK having the same value. Just think of this as build number. The same build can not be uploaded twice. So the point is everytime, you make a build or release-apk, you must have a different number or more specifically incremental number. If your first version of the application has a version code of 5, then the second version must have a version code which is more than 5. &lt;/p&gt;
&lt;p&gt;Along with version code, you might need to update the &lt;code&gt;version name&lt;/code&gt; also. Which is the version number of your application and visible in Google Play Store. &lt;/p&gt;
&lt;p&gt;While &lt;code&gt;version code&lt;/code&gt; is used by &lt;code&gt;Play Store&lt;/code&gt; to manage your APK, &lt;code&gt;version name&lt;/code&gt; is used by &lt;code&gt;Play Store&lt;/code&gt; to notify user that an update to your app is available.&lt;/p&gt;
&lt;p&gt;To change these two values, you need to edit &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;android/app/build.gradle&lt;/li&gt;
&lt;li&gt;android/app/src/main/AndroidManifest.xml ( optional as per my experience )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These settings are taken from &lt;code&gt;build.gradle&lt;/code&gt; while making a build with &lt;code&gt;gradle&lt;/code&gt; but for the purpose of sanity, its better to change in both of the files above. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/saumya/aRnDot36One/commit/7c1855bc1e5eee29294278e5a849ef9693730902&quot;&gt;Here is a reference change&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;making-the-release-build&quot;&gt;Making the release build&lt;/h3&gt;
&lt;p&gt;Finally making a release build is done from inside the &lt;code&gt;android&lt;/code&gt; folder of the &lt;code&gt;React Native&lt;/code&gt; application. The commands are as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew clean
./gradlew assembleRelease&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cheers&lt;/p&gt;
</description>
    </item>
    <item>
      <title>React Native, Android and Loading embeded HTML pages in WebView</title>
      <link>https://saumya.github.io/ray/articles/71/</link>
      <pubDate>Wed, 09 Nov 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/71/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;The problem is in Android release builds, where the local HTML files do not load. This is not a problem in debug builds. I have not tested the final iOS builds. Loading of a local html file in a webview in &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; is as simple as this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;WebView source={{ uri: &amp;#39;../assets/generic.html&amp;#39; }} /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;First thing is, the code above might not work. Why I say &lt;code&gt;might&lt;/code&gt; is, it sometimes works ! Well, the fix to this situation is to use a &lt;code&gt;require&lt;/code&gt; as shown below. Which works everywhere, all the time.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;WebView source={ require(&amp;#39;../assets/generic.html&amp;#39;) } /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All is fine till you are building and testing from your machine with USB debugging. Once you move forward to a release build and test the app on a device, the HTML pages stop to load! Un/Fortunately its a known issue, look &lt;a href=&quot;https://github.com/facebook/react-native/issues/505&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/react-native/issues/6004&quot;&gt;here&lt;/a&gt;. If you have gone through the links, then probably got the solution. I will just keep a note here for easy reference.     &lt;/p&gt;
&lt;p&gt;The fix is a two step process.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Manully copy the HTML pages to &lt;code&gt;android/app/src/main/assets&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Change the reference in code to &lt;code&gt;file:///android_asset&lt;/code&gt; instead of &lt;code&gt;./ or ../&lt;/code&gt; for example &lt;code&gt;file:///android_asset/generic.html&lt;/code&gt;       &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are done. Build and release your Android app.           &lt;/p&gt;
&lt;p&gt;Just remember that, whatever is available inside &lt;code&gt;android/app/src/main/assets&lt;/code&gt; folder can be referenced with &lt;code&gt;file:///android_asset/&lt;/code&gt; URL and life is good. The WebView code looks as below.         &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;WebView source={{ uri: &amp;#39;file:///android_asset/generic.html&amp;#39; }} /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cheers&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Fixing NPM permissions</title>
      <link>https://saumya.github.io/ray/articles/70/</link>
      <pubDate>Wed, 05 Oct 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/70/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;The problem is to use &lt;code&gt;sudo&lt;/code&gt; everywhere and try to fix things that way. Especially while dealing with global &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; modules. Sometimes it may happen that &lt;code&gt;sudo&lt;/code&gt; also will fail to install.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;TL;DR:&lt;/code&gt; The fix I am using is to &lt;code&gt;change&lt;/code&gt; the &lt;code&gt;user permission&lt;/code&gt; to &lt;code&gt;current user&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here are some basic commads to get the things going.         &lt;/p&gt;
&lt;p&gt;Get the global npm modules path &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm config get prefix&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Details about all the files and their permission to owners&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls -la /usr/local/lib/node_modules&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Change the owner of the files recursively to the new user name&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chown -R user_name /usr/local/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Prints the current user&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;whoami&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you are using &lt;code&gt;sudo&lt;/code&gt; to install anything, it will create a folder named &lt;code&gt;.staging&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt; owner, inside the &lt;code&gt;node_modules&lt;/code&gt; folder and keep the installed module there but could not move the module to actual folder and so eventually fail. &lt;/p&gt;
&lt;p&gt;The fix is to change the permission of the &lt;code&gt;/usr/local/&lt;/code&gt; recursively to the current user. Then install the modules &lt;code&gt;without&lt;/code&gt; &lt;code&gt;sudo&lt;/code&gt;.  Well, the &lt;a href=&quot;https://docs.npmjs.com/getting-started/fixing-npm-permissions&quot;&gt;official video on the doc&lt;/a&gt; says you can actually just change the permission of below three directories inside &lt;code&gt;/usr/local/&lt;/code&gt; instead of all the directories inside &lt;code&gt;/usr/local/&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/user/local/lib/node_modules&lt;/li&gt;
&lt;li&gt;/usr/local/bin/&lt;/li&gt;
&lt;li&gt;/usr/local/share/&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bxvybxYFq2o&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Happy nodding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Realm in Swift</title>
      <link>https://saumya.github.io/ray/articles/69/</link>
      <pubDate>Fri, 08 Jul 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/69/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Working on a local storage for persistence in data has a lot of solutions. While we can definitely go ahead and just store &lt;code&gt;String&lt;/code&gt; values and play with it, Apple provides some solutions to play with local data as if its a database. The thing is, its not that intuitive. Other solutions are there, but the simplicity of &lt;a href=&quot;https://realm.io/&quot;&gt;Realm.io&lt;/a&gt; is nice and addictive.            &lt;/p&gt;
&lt;p&gt;Lets see how in &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;swift&lt;/a&gt; we could play with &lt;a href=&quot;https://realm.io/&quot;&gt;Realm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; {

    &lt;span class=&quot;comment&quot;&gt;// clear the whole DB if Realm throws Errors saying need to migrate&lt;/span&gt;
    &lt;span class=&quot;type&quot;&gt;Realm&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Configuration&lt;/span&gt;.defaultConfiguration.deleteRealmIfMigrationNeeded = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// initiate DB and keep a ref&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realm = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Realm&lt;/span&gt;()

    &lt;span class=&quot;comment&quot;&gt;// query to get all models of a Particular type&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pModel = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realm!.objects(&lt;span class=&quot;type&quot;&gt;MyModel&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)

    &lt;span class=&quot;comment&quot;&gt;// check for already saved data&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pModel.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;){
        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;=== No Saved Data Found === XXX &quot;&lt;/span&gt;)

        &lt;span class=&quot;comment&quot;&gt;// initiate a Model&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; appInfo:&lt;span class=&quot;type&quot;&gt;MyModel&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;MyModel&lt;/span&gt;()

        &lt;span class=&quot;comment&quot;&gt;//write a model to DB&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;! &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realm?.write({
            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realm!.add(appInfo)
        })

    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;=== Saved Data Found ===&quot;&lt;/span&gt;)
        &lt;span class=&quot;comment&quot;&gt;// get the first model &lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; appInfo:&lt;span class=&quot;type&quot;&gt;MyModel&lt;/span&gt; = pModel.first!
    }

} &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;init : Realm : ERROR :&quot;&lt;/span&gt;)
    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(error)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For writing into the database   &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saveUserId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId:String,AndPhone:String)&lt;/span&gt;&lt;/span&gt;{

    &lt;span class=&quot;comment&quot;&gt;// get the realm reference we saved above and start interacting with it&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;{

        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realm?.beginWrite()

        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.pivdModel!.registeredUserId = userId
        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.pivdModel!.registeredMobileNumber = &lt;span class=&quot;type&quot;&gt;AndPhone&lt;/span&gt;

        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realm?.commitWrite()

    }&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(error)
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>NSNotification in Swift</title>
      <link>https://saumya.github.io/ray/articles/68/</link>
      <pubDate>Thu, 30 Jun 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/68/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;While Apple has put a lot of design patterns to develop applications for iOS, the flexibility of an event driven application development surely has its merits. The very de-coupled application is so nice to play around with. Well, the downside is to find where is what. For a strictly coupled application, one can definitely find the root of the roots. But for a de-coupled application its very difficult to find what is happening where. Then comes good practices of code commeting and logger messages to rescue. That topic is a separate post I hope.            &lt;/p&gt;
&lt;p&gt;Lets see how in &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;swift&lt;/a&gt; we could write an event driven application.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here is a scenario. We have a ViewController1.swift and MyViewController.swift. First &lt;code&gt;ViewController1&lt;/code&gt; is loaded in the application and then it navigates to &lt;code&gt;MyViewController&lt;/code&gt;. Upon certain situation in &lt;code&gt;MyViewController&lt;/code&gt; we want to do something on &lt;code&gt;ViewController1&lt;/code&gt;. All we have to do is send an event from &lt;code&gt;MyViewController&lt;/code&gt; to &lt;code&gt;ViewController1&lt;/code&gt;. The events here in iOS is known as &lt;code&gt;NSNotification&lt;/code&gt;. So the setup is as shown here.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyViewController.swift&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// Dispatch Event from wherever necessary&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; notification = &lt;span class=&quot;type&quot;&gt;NSNotification&lt;/span&gt;(name: &lt;span class=&quot;string&quot;&gt;&quot;myNotification&quot;&lt;/span&gt; , object: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; )
&lt;span class=&quot;type&quot;&gt;NSNotificationCenter&lt;/span&gt;.defaultCenter().postNotification(notification)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in the other file just add the listeners to listen to the events and call the methods to handle them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ViewController1.swift&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()
    &lt;span class=&quot;comment&quot;&gt;// Listen for Event&lt;/span&gt;
    &lt;span class=&quot;type&quot;&gt;NSNotificationCenter&lt;/span&gt;.defaultCenter().addObserver( &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, selector: #selector(onGotNotification),name: &lt;span class=&quot;string&quot;&gt;&quot;myNotification&quot;&lt;/span&gt;, object: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; )
}
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onGotNotification&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(notification:NSNotification)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;name=&quot;&lt;/span&gt;,notification.name)
    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;object=&quot;&lt;/span&gt;,notification.object)
    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; myViewController:&lt;span class=&quot;type&quot;&gt;MyViewController&lt;/span&gt; = notification.object &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;MyViewController&lt;/span&gt;
    myViewController.someMethod()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cocoapods</title>
      <link>https://saumya.github.io/ray/articles/67/</link>
      <pubDate>Wed, 22 Jun 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/67/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Developing for iDevices has come a long way. With the new and emerging tools everyday, the pain is also fading away. In the beginning I used to avoid any third party tools to help me build for iOS in ObjectiveC. Back then, both the XCode environment and the tools were emerging, so it was obvious to run into the edge cases very soon. The time has changed and so as the tools have matured.&lt;br&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;br&gt;One such thing is dependency manager for XCode projects. While there are options here, but [Cocoapods] &lt;a href=&quot;https://cocoapods.org/&quot;&gt;1&lt;/a&gt; seems to be matured enough to go production without problem. There are plenty of packges available and I must say that its impressive in the way, the community is producing quality stuff. Its like &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; for XCode projects. The best part is whether the project is in Swift or ObjectiveC, one can get the dependecies for either from &lt;a href=&quot;https://cocoapods.org/&quot;&gt;Cocoapods&lt;/a&gt;.          &lt;/p&gt;
&lt;p&gt;If you have not yet, just give it a try and I am sure you will save a lot of time of your life shifting from manually managing dependencies.          &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>React and understanding Redux, Thunk, Router.</title>
      <link>https://saumya.github.io/ray/articles/66/</link>
      <pubDate>Thu, 12 May 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/66/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; is the view as they call it in a MVC (Model-View-Controller) world. Actually it is enough to build the whole frontend with &lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; and its components. One does not need anything else to make a &lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; application. Then comes a time, when one thinks of organising the code. Well, then and only then the things we talk now will make sense.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;
I asked and you may too, “so what are these fancy terms are for?” &lt;/p&gt;
&lt;h3 id=&quot;tltr-what-is-what-&quot;&gt;TL;TR What is what ?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; is Model or Data or State (Whatever you call it) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Thunk&lt;/a&gt; is helping &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; for communicating with Servers and getting data&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-router&quot;&gt;Router&lt;/a&gt; is making the application to display specific things on navigating to specific URL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now for those who need details about each.&lt;/p&gt;
&lt;h3 id=&quot;react-and-its-universe&quot;&gt;React and its universe&lt;/h3&gt;
&lt;p&gt;The best thing is, about pick and choose. Instead of a monolithic application framework, if the things are so nicely done that one can pick and choose between them to use in an application, it would be really nice. Most importantly at anypoint one should be able to swap between different implementations of the same thing. And &lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; universe is full of these kind of implementations.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; is just to make visual components. There is nothing else to it. The exciting thing is there exists a whole universe arround &lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; which does a lot of things to help build the application. There are different frameworks which use &lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; and guidelines from facebook known as &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Flux&lt;/a&gt;. The community is building a lot of things arround &lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; too. &lt;/p&gt;
&lt;p&gt;Once components are done and you are ready to work with data, instead of putting the data logic all arround the place, it feels right to put them at one place. &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; which follows the &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Flux&lt;/a&gt; guidlines makes it possible to do data management easier. If you know a little about &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Flux&lt;/a&gt; then the difference is &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Flux&lt;/a&gt; deals with a lot of &lt;code&gt;stores&lt;/code&gt; in the application, while &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; deals with a &lt;code&gt;single store&lt;/code&gt;. Do not be afraid to the term &lt;code&gt;store&lt;/code&gt;, as simply speaking a &lt;code&gt;store&lt;/code&gt; is the &lt;code&gt;model&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt;. So we can say &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Flux&lt;/a&gt; deals with a lot of models while &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; deals with a single model. In &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; you design your application in such a way that anywhere in the application, the data is coming from one single model / store.&lt;/p&gt;
&lt;p&gt;Now we know that we have view and model on frontend. We need a way to communicate with backend to get data and give back data. There comes in &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Thunk&lt;/a&gt;. It helps our &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; applications to sync with server. Talking about &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;Thunk&lt;/a&gt;, its actually a middleware to &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt;. Which means, &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; has a concept of &lt;code&gt;middleware&lt;/code&gt;. Simply put we can plugin different functionality to &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; with our own code.&lt;/p&gt;
&lt;p&gt;Well, we got data from server and created our application with components. Now a full application can be built using just these. However, we need a way to show different user interfaces when going to different URLs. As we can develop whole application without a Model layer, we can do the same here too. But the thing is &lt;a href=&quot;https://www.npmjs.com/package/react-router&quot;&gt;Router&lt;/a&gt; makes our life easier in these scenarios. If we want to navigate to different URLs depending upon our usecase and show different UI, then &lt;a href=&quot;https://www.npmjs.com/package/react-router&quot;&gt;Router&lt;/a&gt; makes it very easy for us.&lt;/p&gt;
&lt;p&gt;Combining all these together, we get a framework consisting of traditional model,view and controller or whatever you call it.&lt;/p&gt;
&lt;p&gt;The nice thing about &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/react-router&quot;&gt;Router&lt;/a&gt; is they play nicely with each other so that you play nicely with &lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy Reacting.          &lt;/p&gt;
</description>
    </item>
    <item>
      <title>React &amp; Material-UI, recently breaking changes.</title>
      <link>https://saumya.github.io/ray/articles/65/</link>
      <pubDate>Sun, 17 Apr 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/65/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Here we will talk about the recent changes in &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material-UI&lt;/a&gt; and how it affects our &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; code.&lt;/p&gt;
&lt;p&gt;Before moving further, if you have not yet started with &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material-UI&lt;/a&gt;, &lt;a href=&quot;http://saumya.github.io/ray/articles/63/&quot;&gt;here is my first post&lt;/a&gt; describing the details. &lt;/p&gt;
&lt;p&gt;Current version of &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is &lt;code&gt;15.0.1&lt;/code&gt;. To make &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material-UI&lt;/a&gt; compatible with this version of &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, a new version of &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material-UI&lt;/a&gt; which is &lt;code&gt;0.15.0-beta.1&lt;/code&gt; is released recently. However there are some breaking changes in this release of &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material-UI&lt;/a&gt; if you are coming from the last version which is &lt;code&gt;0.15.0-alpha.2&lt;/code&gt;. The complete &lt;a href=&quot;https://github.com/callemall/material-ui/releases&quot;&gt;release note is here&lt;/a&gt; along with the change logs.&lt;/p&gt;
&lt;p&gt;There are couple of things to change in our &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; application code.&lt;/p&gt;
&lt;h3 id=&quot;import--require&quot;&gt;import / require&lt;/h3&gt;
&lt;p&gt;The syntax for getting a component from &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material-UI&lt;/a&gt; is changed. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Use&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; AppBar = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'material-ui/AppBar'&lt;/span&gt;)[&lt;span class=&quot;string&quot;&gt;'default'&lt;/span&gt;] ;
&lt;span class=&quot;comment&quot;&gt;// Or&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; AppBar &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'material-ui/AppBar'&lt;/span&gt;;
&lt;span class=&quot;comment&quot;&gt;// instead of&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; AppBar = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'material-ui/lib/app-bar'&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// deprecated&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there is no &lt;code&gt;lib&lt;/code&gt; in between &lt;code&gt;material-ui&lt;/code&gt; and &lt;code&gt;AppBar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if using &lt;code&gt;require&lt;/code&gt; , there is a &lt;code&gt;[&amp;#39;default&amp;#39;]&lt;/code&gt; at the end&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;default-theme-handling&quot;&gt;default theme handling&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/callemall/material-ui/pull/3820&quot;&gt;default theme handling has changed&lt;/a&gt; for components and for that, some changes are required in application code.&lt;/p&gt;
&lt;p&gt;In the RootControllerView / MainControllerView, import the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; baseTheme &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'material-ui/styles/baseThemes/lightBaseTheme'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; getMuiTheme &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'material-ui/styles/getMuiTheme'&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the same RootControllerView / MainControllerView, inside component declaration add&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;childContextTypes:{
  &lt;span class=&quot;attr&quot;&gt;muiTheme&lt;/span&gt;: React.PropTypes.object.isRequired,
},
getChildContext() {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;attr&quot;&gt;muiTheme&lt;/span&gt;: getMuiTheme(baseTheme)};
},&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is &lt;a href=&quot;https://github.com/callemall/material-ui/issues/4021&quot;&gt;a little more&lt;/a&gt; in-depth view of the scenario.&lt;/p&gt;
&lt;p&gt;Happy Reacting.          &lt;/p&gt;
</description>
    </item>
    <item>
      <title>React Native</title>
      <link>https://saumya.github.io/ray/articles/64/</link>
      <pubDate>Mon, 04 Apr 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/64/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;The beauty of &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is it now has a lot to offer and &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; is just an amazing way to create native mobile applications with Javascript or more specifically with &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. Yes, we are talking about native applications. Unlike &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;, &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; applications do not run inside a webview. These applications use the native components from the environment it is running in. If its running in iOS the components like buttons, views etc are real iOS components. Same is true for Android.&lt;/p&gt;
&lt;p&gt;From the first few weeks of &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; I must say its worth a try. There might be a chance that even the same code is running in both iOS and Android. Though its almost always a little different code for both the platforms. But all in all, its all Javascript.&lt;/p&gt;
&lt;p&gt;I am not going in details of getting started here. May be in a next blog post we will explore that. If you are already developing in &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; you are already there. No extra effort for another toolset or language. &lt;/p&gt;
&lt;p&gt;Happy Reacting.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>React with Router and Material UI</title>
      <link>https://saumya.github.io/ray/articles/63/</link>
      <pubDate>Fri, 11 Mar 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/63/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is a little more than just the basics. If you do not have any idea about &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, here are two links to get started with.          &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://saumya.github.io/ray/articles/57/&quot;&gt;React Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://saumya.github.io/ray/articles/58/&quot;&gt;How to React&lt;/a&gt;          &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we know what is &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; and how to do the basics. Lets go a little further.&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;          &lt;/p&gt;
&lt;p&gt;The best part of &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is its all components and the whole application architecture is upon us. Being said that, once the application gets little complex, soon we need a structure. Either we do it ourselves or take a ready one. Same goes with the UI of the application. Fortunately there are several solutions available for both of these. We are going to focus on two today.           &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;react-router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material-UI&lt;/a&gt;           &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;react-router&quot;&gt;react-router&lt;/h3&gt;
&lt;p&gt;This takes care of the routing of the &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; application on frontend. It plays nice with other &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; components. Instead of manually keeping track of the addition and removal of components, its a nice solution to start with for only this purpose, though adding a router in frontend has its added advantages too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are couple of tips here to use latest version(2.0) of &lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;react-router&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Firstly there is no default &lt;code&gt;history&lt;/code&gt; created, so we have to pass it on while creating our router.&lt;/li&gt;
&lt;li&gt;Secondly provide the &lt;code&gt;contextTypes&lt;/code&gt; property to the components&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Router creation&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactDOM = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'react-dom'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hashHistory = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'react-router'&lt;/span&gt;).hashHistory;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes = (
            &amp;lt;Route path=&quot;/&quot; component={AppComponent}&amp;gt;
              &amp;lt;IndexRoute component={IndexComponent} /&amp;gt;
              &amp;lt;Route path=&quot;see&quot; component={ViewComponent} /&amp;gt;
              &amp;lt;Route path=&quot;add&quot; component={AddComponent} /&amp;gt;
            &amp;lt;/Route&amp;gt;
          );
var App = ReactDOM.render(&amp;lt;Router routes={routes} history={hashHistory} /&amp;gt;,
                            document.getElementById('react-app'));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In our component code, we have to provide the &lt;code&gt;contenxtTypes&lt;/code&gt; propert as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// contextTypes property setting in components&lt;/span&gt;
contextTypes: {
    &lt;span class=&quot;attr&quot;&gt;router&lt;/span&gt;: React.PropTypes.object.isRequired,
  },&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the programmatic routing is done through the &lt;code&gt;router&lt;/code&gt; property of the &lt;code&gt;context&lt;/code&gt; object. Once we put &lt;code&gt;contextTypes&lt;/code&gt; property, we can get the &lt;code&gt;router&lt;/code&gt; from it and through that, we can make our application to move to any other route. 
Here is an example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// programmatic routing&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.context.router.push(&lt;span class=&quot;string&quot;&gt;'/see'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;material-ui&quot;&gt;Material-UI&lt;/h3&gt;
&lt;p&gt;This is directly an implemention of &lt;a href=&quot;https://www.google.com/design/spec/material-design/introduction.html&quot;&gt;Material design&lt;/a&gt; guidelines from Google. Once we put this to use, application automatically abides to the design principles. This is a library of &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;react&lt;/a&gt; components. So all we have to do is install the library and start using it by using its components.&lt;/p&gt;
&lt;p&gt;Happy Reacting.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cordova today</title>
      <link>https://saumya.github.io/ray/articles/62/</link>
      <pubDate>Sat, 09 Jan 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/62/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;During these years &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; and the mobile phones have come a long way. Today it seems the mobiles are more powerful and can handle a web application quite nicely. On the other hand &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; tool chain also has matured. Comparing to older versions of the tool chain, currently its purely &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; based, as long as we talk about cross platform development. So anything one needs is just a &lt;code&gt;npm install&lt;/code&gt; away.   &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;There are two ways, as usual with &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;, to make a project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLI based&lt;/li&gt;
&lt;li&gt;Platform based&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference is in, what an application needs from, the platform its deployed into. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If one application does not depend upon things like Camera or Geolocation etc and can still serve itself, then its best to use CLI based approach. That way, it can be delivered to a lot of platforms with just few commands.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;On the otherhand, if an application requires a specific feature from the underlying platform, then its better to get started with the platform specific workflow. If its needed to write some custom hooks to only iOS devices, then its much easier to get started in platform specific development and customise the application for iOS platform.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;platform-projects&quot;&gt;Platform projects&lt;/h3&gt;
&lt;p&gt;For platform specific development, there are separate compressed files available and the projects start from there. Here is a list for iOS and Android.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS ( &lt;a href=&quot;https://github.com/apache/cordova-ios/releases&quot;&gt;https://github.com/apache/cordova-ios/releases&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Android ( &lt;a href=&quot;https://github.com/apache/cordova-android/releases&quot;&gt;https://github.com/apache/cordova-android/releases&lt;/a&gt; )&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cli-projects&quot;&gt;CLI projects&lt;/h3&gt;
&lt;p&gt;For CLI based applications, the basic need is &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt; and with that comes &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt;. First thing to do is, intall Cordova from &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt;, once &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt; is installed in the system. From that point onwards the commands to start working on a Cordova project are as below.          &lt;/p&gt;
&lt;p&gt;Make a cordova project&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova create hello com.example.hello HelloWorld&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now move to the project folder, which is just created by the above command. All the &lt;code&gt;following commands&lt;/code&gt; should &lt;code&gt;run&lt;/code&gt; from inside the &lt;code&gt;project folder&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd hello&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check the number of platforms&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova platforms ls&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add the required platforms&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova platform add ios
cordova platform add android
cordova platform add browser&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remove platforms&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova platform remove blackberry10&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Build&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova build ios ( this is equivalent as the below two commands combined together )

cordova prepare ios ( at this point, Xcode can be used to open the project )
cordova compile ios&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova emulate android ( run in emulator )
cordova run android ( run in device )&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Help&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova run --help&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;plugins-command-reference&quot;&gt;Plugins command reference&lt;/h3&gt;
&lt;p&gt;List all the plugins installed in the project&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova plugin ls&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add plugin&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova plugin add cordova-plugin-console&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remove plugin&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cordova plugin rm cordova-plugin-console&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I hope that helps you get started with &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;. For detailed documenation, its better to go to the official documentation. &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New year, time to look back and forth.</title>
      <link>https://saumya.github.io/ray/articles/61/</link>
      <pubDate>Fri, 01 Jan 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/61/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;First of all, I wish all the best of spirits, health and prosperity. &lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Last year(2015) had carried the pain for me from its last year (ie; 2014). It started tough and went on to be tougher and tougher. Both in proffessional and personal matters the year progressed into tougher situations day by day. It almost put me in a situation, where I questioned everything about myself. Self doubt and nagetivity had almost got me where they wanted me. The only things those kept me going is a healthy regular habit of meditation, exercise and persistence of both. Finally towards the end of the year, it paid of. When I look at me now in this new year, I am a completely transformed person. Much stronger and moving on the right direction again. &lt;/p&gt;
&lt;p&gt;I am looking at that year as a necessary evil. It was needed for me to see me as who I am. Proffessionaly I have been asked to be a double standard and deal with it. They call it smart, I call it lie. Personally, I was going through the same kind of thing. Glad that I could deal with all the situations with truthfulness and without any diplomacy. &lt;/p&gt;
&lt;p&gt;Towards the end of the last year, I could see that proffessionally I had done a fantastic job. Despite of all the politics and hipocracy, I could make some of the better friends in my office. They know me as who I am and not as just another guy in the office. Personally, I got in touch with some old friends whom I had not even contacted for almost 3 years or more. All in all, it was a year that gave me the platform to see the world as it is.&lt;/p&gt;
&lt;p&gt;Going forward I hope all this pain and suffering will only help me getting better and tougher, to face the realities of life.  &lt;/p&gt;
&lt;p&gt;Let me see, if I can draw a line between the things that had happened to me last year.&lt;/p&gt;
&lt;p&gt;Negatives&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Office politics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Expected to deliver, while no help was given&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Very bad experience of being in the client place&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have to travel to other town for work without travel allowances and prior notice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Official process for help seems like slow as snail and no co-operation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Relationship for money&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hidden agenda to keep a relation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being blackmailed and name calling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dealing with liars, disrespectful people and families &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Positives&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Delivered my work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learning new technology and still delivering the work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making the team aware of the technology and deliver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Knowing a new place, while on the place for work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Got in touch with old friends&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Knowing the relationships&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accepting the facts as it is&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A very good neighbour&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A nice landlord&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making new friends for life&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most important thing I got to know in the process is, anything can happen in this life. But if you want to sleep happy, be truthful to yourself. I survived a major fall, and most of the credit goes to my parents as the way they brought me up. Mom was fighting her death till her last breath but never compromised her dignity. I was thinking why all these pain! Now, I am realising that she was making me, all throughout her life till the end. Then there were friends, who stood by me and showed me the right way to live. I could have gone wrong and to places of no return. But there were friends who saved me and showed me the way to live. If you can not make a friend, its your fault, because there are good people out there. &lt;/p&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/144774526?color=ff9933&amp;title=0&amp;byline=0&amp;portrait=0&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I have found help from unimaginable sources and glad that they are there in my life. People will just make stories not to take resposibility of their own life and try to make you miserable. Then there are people who will believe and stand by you for who you really are. All you need to do is, open your eyes and heart to welcome good in your own life. &lt;/p&gt;
&lt;p&gt;All in all 2015 made be a stronger person to move forward in life. I can and I will, watch me.&lt;/p&gt;
&lt;p&gt;Happy new year.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>What is Socket.IO ?</title>
      <link>https://saumya.github.io/ray/articles/60/</link>
      <pubDate>Tue, 08 Dec 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/60/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Once one starts working on &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;, very soon will come across a term called &lt;a href=&quot;http://socket.io&quot;&gt;Socket.IO&lt;/a&gt;. It may feel as if just another &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; module available through &lt;a href=&quot;https://www.npmjs.com&quot;&gt;NPM&lt;/a&gt;. Then it may feel like just another way to write a Javascript application for the browser. Then it may seem something else.          &lt;/p&gt;
&lt;p&gt;So lets know what is it?          &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Its two things, a server framework and client framework.&lt;/li&gt;
&lt;li&gt;Its a &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; module ( install it from a &lt;a href=&quot;https://www.npmjs.com&quot;&gt;NPM&lt;/a&gt; ) &lt;/li&gt;
&lt;li&gt;Its a client library ( .js file )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, lets understand a little more in detail.          &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://socket.io&quot;&gt;Socket.IO&lt;/a&gt; is built to take advantage of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API&quot;&gt;WebSockets&lt;/a&gt; for a two way communication between server and client.&lt;/p&gt;
&lt;p&gt;Server Framework          &lt;/p&gt;
&lt;p&gt;When you work on &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; to implement a socket server, &lt;a href=&quot;http://socket.io&quot;&gt;Socket.IO&lt;/a&gt; makes your life easier by providing a &lt;a href=&quot;https://www.npmjs.com/package/socket.io&quot;&gt;NodeJS module&lt;/a&gt;. That means, without &lt;a href=&quot;http://socket.io&quot;&gt;Socket.IO&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/socket.io&quot;&gt;server module&lt;/a&gt; also, you can write a socket server with only &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. That also means, you have to write and test your own socket server using &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. This is possible with &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; provided built in modules but only take time and effort. In that sense we can say &lt;a href=&quot;http://socket.io&quot;&gt;Socket.IO&lt;/a&gt; is a &lt;code&gt;server framework&lt;/code&gt; for &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; to write socket servers.          &lt;/p&gt;
&lt;p&gt;Client Framework&lt;/p&gt;
&lt;p&gt;Now to write a client (basically a web application) we can incorporate &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API&quot;&gt;WebSockets&lt;/a&gt; API. Well, its possible in the same manner that we can write a Socket server by our own using &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; as explained above. But then &lt;a href=&quot;http://socket.io&quot;&gt;Socket.IO&lt;/a&gt; provides us a ‘.js’ file with exposed APIs to use, which is cross-platform. That means &lt;a href=&quot;http://socket.io&quot;&gt;Socket.IO&lt;/a&gt; gives a &lt;code&gt;frontend framework&lt;/code&gt; too, to write our frontend Javascript applications.          &lt;/p&gt;
&lt;p&gt;Happy Noding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>RequireJS is not require()</title>
      <link>https://saumya.github.io/ray/articles/59/</link>
      <pubDate>Sat, 05 Dec 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/59/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;It would have saved me time if I could have known this in the beginning. Like a lot of things in Javscript world, a same kind of name for two different functionalities makes a lot of confusion.          &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; is used to load &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#amd&quot;&gt;AMD&lt;/a&gt;&lt;br&gt;require() is used to load &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#commonjs&quot;&gt;CommonJS&lt;/a&gt;          &lt;/p&gt;
&lt;p&gt;Well, to add to confusion the &lt;code&gt;require()&lt;/code&gt; function is available to both the module definitions. But both the &lt;code&gt;require()&lt;/code&gt; do different things. For &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#commonjs&quot;&gt;CommonJS&lt;/a&gt; &lt;code&gt;require()&lt;/code&gt; loads modules in a &lt;code&gt;synchronous&lt;/code&gt; way, while the &lt;code&gt;require()&lt;/code&gt; in &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#amd&quot;&gt;AMD&lt;/a&gt; ie; in &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; the modules are loaded in &lt;code&gt;asynhronous&lt;/code&gt; way.             &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://requirejs.org/docs/whyamd.html#amd&quot;&gt;AMD&lt;/a&gt; style loading is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;'path/myModuleFileName.js'&lt;/span&gt;],&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;MyModule&lt;/span&gt;)&lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// Use MyModule&lt;/span&gt;
  MyModule.doSomething();
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#commonjs&quot;&gt;CommonJS&lt;/a&gt; its done as below&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MyModule = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'path/myModuleFileName.js'&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;// the line below is same as above, just removed the file extention .js&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//var MyModule = require('path/myModuleFileName');&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy requiring.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How to React now.</title>
      <link>https://saumya.github.io/ray/articles/58/</link>
      <pubDate>Sat, 28 Nov 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/58/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Here is the way to &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; now.        &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Make a new html file&lt;/li&gt;
&lt;li&gt;Include “react.js”, this gives us ‘React’ Object&lt;/li&gt;
&lt;li&gt;Include “react-dom.js”, this gives us ‘ReactDOM’ Object&lt;/li&gt;
&lt;li&gt;Write the a React component and use it. This is explained below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The HTML file should look something as shown here.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;React!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myReactApp&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- React Application --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- React library --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;js/lib/react/react.js&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;js/lib/react/react-dom.js&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Application Code --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt;
        &lt;span class=&quot;comment&quot;&gt;// TODO&lt;/span&gt;
    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This HTML file has only a &lt;code&gt;div&lt;/code&gt; with an id as &lt;code&gt;id=&amp;quot;myReactApp&amp;quot;&lt;/code&gt;. Now lets write a React Component. The component code is as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Component1 = React.createClass({
  &lt;span class=&quot;attr&quot;&gt;render&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reactComponent = React.DOM.span(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;I am a Custom Span.&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reactComponent;
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add this component to our DOM. We are going to add this component in the &lt;code&gt;div&lt;/code&gt; with id &lt;code&gt;myReactApp&lt;/code&gt;.           &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactDOM.render( React.createElement(Component1), &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;myReactApp&quot;&lt;/span&gt;) );&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the final HTML file with the added javascripts and our code will look as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;React!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myReactApp&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- React Application --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- React library --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;js/lib/react/react.js&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;js/lib/react/react-dom.js&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Application Code --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Component1 = React.createClass({
                                &lt;span class=&quot;attr&quot;&gt;render&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
                                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reactComponent = React.DOM.span(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;I am a REACT Component Span&quot;&lt;/span&gt;);
                                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reactComponent;
                                }
                            });
        ReactDOM.render( React.createElement(Component1), &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;myReactApp&quot;&lt;/span&gt;) );
    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if you run this from a server and view the page in the browser. You can see our compent is rendered in the &lt;code&gt;div&lt;/code&gt; and it displays the text as ‘I am a REACT Component Span’.          &lt;/p&gt;
&lt;p&gt;Thats all is there to &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. After this point all that &lt;code&gt;remains&lt;/code&gt; is the &lt;code&gt;APIs for Component&lt;/code&gt; development. But as you can see, &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is not telling or expecting anything else. It just makes reusable HTML components. The architecture of the application is upon the developers.&lt;/p&gt;
&lt;p&gt;Happy Reacting.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>React</title>
      <link>https://saumya.github.io/ray/articles/57/</link>
      <pubDate>Fri, 27 Nov 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/57/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is a library from the famous social networking &lt;a href=&quot;https://www.facebook.com/&quot;&gt;facebook&lt;/a&gt;.          &lt;/p&gt;
&lt;p&gt;Another Javascript Library ! Yes, lets face it. Now we can not escape the fact that every other day there is someone, somwhere making a new Javascript library.           &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is not a competition with the huge frameworks like &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; or &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;. It neither is competing with the DOM manipulation libraries like &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;. But for some reason for me, it seems like, &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is making a standard for itself. Like &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; did it for DOM manipulation, becoming a go to library, &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is making a place for itself.          &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is a library to &lt;code&gt;write components&lt;/code&gt; for DOM.         &lt;/p&gt;
&lt;p&gt;Well, so what does it do ?! It allows us to write reusable &lt;code&gt;component&lt;/code&gt; to be used in our HTML. With &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, its possible to combine one or more HTML tag/tags and add some javascript to add functionality. Then we can take that component as a whole and reuse it as many times as we want. Thats all that is to it.           &lt;/p&gt;
&lt;p&gt;There is &lt;code&gt;JSX&lt;/code&gt; in &lt;code&gt;React&lt;/code&gt;. &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt; in simple words, would be writing Javascript as if we are writing HTML. Well, that might not be the case if you already know what &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt; is, but for a first timer its easier to understand like that. The &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;official document&lt;/a&gt; is very good resource to understand &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt;. You are not bound to use it but then, it obviously is an option.          &lt;/p&gt;
&lt;p&gt;So, &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is &lt;code&gt;not a&lt;/code&gt; MVC or MVVM or MV* framework ? No, its not. But it just is a library to write reusable HTML visual compoents. Take this library wherever you want and use it. That means, we can use this library in other frameworks, if we want to. This is like taking &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; and adding it to the places we like to use it.          &lt;/p&gt;
&lt;p&gt;Happy React - ing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>AngularJS, BackboneJS, similarities and differences.</title>
      <link>https://saumya.github.io/ray/articles/56/</link>
      <pubDate>Thu, 26 Nov 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/56/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;When learning a new framework or library, its very difficult to look at the same problem from a different perspective. But when you hear a lot like ‘ohh, that library is similar to this’, then the tendency comes to compare it. And when you see similar terminology in both the frameworks, then you are absolutely sure that both are doing the same thing in the same way. I think, thats the main problem here with learning the frameworks like &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; and &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;. Both of these have their own share of &lt;code&gt;how to&lt;/code&gt; and &lt;code&gt;where to&lt;/code&gt;, overall they seem completely different, even though the terminolgies seem completely same.         &lt;/p&gt;
&lt;p&gt;One such thing is &lt;code&gt;Module&lt;/code&gt;. Both these frameworks define &lt;code&gt;Module&lt;/code&gt; and use it. Both of them tell to use &lt;code&gt;Module&lt;/code&gt; to separate concerns. But then both of them seem completely different while implementing the &lt;code&gt;Module&lt;/code&gt;. Umm, Why?!          &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;difference&lt;/code&gt; is in the &lt;code&gt;Module&lt;/code&gt; definition of both the frameworks. And that pushes back someone very new to the frameworks, thinking something wrong either in the frameworks or in the understanding of them. While the truth is something simpler than that.            &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; uses &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#commonjs&quot;&gt;CommonJS&lt;/a&gt; module declaration.&lt;br&gt;&lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; uses &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#amd&quot;&gt;AMD&lt;/a&gt; module declaration.          &lt;/p&gt;
&lt;p&gt;Once you know this difference, things get a lot easier to understand and will take lesser time than before to get upto speed in either of these. Have a look at the &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#definition&quot;&gt;Module Definition&lt;/a&gt; documentation, it explains the difference of the module definitions. The bottom line is Javascript eco-system gives us &lt;code&gt;two&lt;/code&gt; different kind of &lt;code&gt;Module&lt;/code&gt; systems. Frameworks use one over the other depending upon their opinion. For example &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt; uses &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#commonjs&quot;&gt;CommonJS&lt;/a&gt; approach, while &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;DOJO toolkit&lt;/a&gt; uses &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#amd&quot;&gt;AMD&lt;/a&gt; way.          &lt;/p&gt;
&lt;p&gt;Now lets understand why this difference matters us as a developer. In &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#commonjs&quot;&gt;CommonJS&lt;/a&gt; style declaration, each file is supposed to be a module which is same as &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#amd&quot;&gt;AMD&lt;/a&gt; way too. The &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#commonjs&quot;&gt;CommonJS&lt;/a&gt; module can expose as many Objects as one wants, to the application level. So that once one &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#commonjs&quot;&gt;CommonJS&lt;/a&gt; module is included, the application has access to all the exposed Objects in that module. For that matter you can understand, why just adding a &lt;code&gt;some-ng-file.js&lt;/code&gt; and including that &lt;code&gt;ModuleName&lt;/code&gt; in the dependency of an &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; application, gives a lot of &lt;code&gt;ngObject&lt;/code&gt; to play with. Where in &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#amd&quot;&gt;AMD&lt;/a&gt; each module is exposing just one Object. If you want to play with the internals of that Object, you have to call that Object’s properties and methods. This way makes you feel like as if you are working in a Classical (Class based) language rather than Prototypical language. &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is doing exactly the same thing. Once you have got a &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; module Object, you deal with it as if you are dealing with an Object from a Class. You invoke methods and properties of that Object.           &lt;/p&gt;
&lt;p&gt;So one &lt;code&gt;Module&lt;/code&gt; in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; is exposing a lot to play with and one &lt;code&gt;Module&lt;/code&gt; in &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; gives you just one Object to play with. The similarity goes to other frameworks and libraries as I mentioned earlier about &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;DOJO Toolkit&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding with modules.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>AngularJS 102</title>
      <link>https://saumya.github.io/ray/articles/55/</link>
      <pubDate>Wed, 25 Nov 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/55/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is the part two of the study of &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. The first part is &lt;a href=&quot;http://saumya.github.io/ray/articles/39/&quot;&gt;AngularJS 101&lt;/a&gt;.
This is focused on the vary basic concepts of &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; like how and where to write a &lt;code&gt;controller&lt;/code&gt; or &lt;code&gt;directive&lt;/code&gt; etc. The &lt;a href=&quot;https://github.com/saumya/ng-102&quot;&gt;sample project is here&lt;/a&gt;.          &lt;/p&gt;
&lt;p&gt;First thing first, as of any Javascript framework, the nature of &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; is not different in terms of, where you should write what. This is understood, as Javascript itself is dynamic in nature. There are a lot of guidelines through out the web as to, which file to contain what. In the end it boils down to personal preference. So just go ahead and do some working samples of yours.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first thing you need is &lt;code&gt;index.html&lt;/code&gt; or some &lt;code&gt;.html&lt;/code&gt; file, which will be your entry point to the project.&lt;/li&gt;
&lt;li&gt;Include all the Javascript files in this &lt;code&gt;index.html&lt;/code&gt; file as needed&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; does not need &lt;a href=&quot;https://jquery.com/&quot;&gt;JQuery&lt;/a&gt;, but if you are using &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, you will need &lt;a href=&quot;https://jquery.com/&quot;&gt;JQuery&lt;/a&gt; library as the later uses it. So include them in the &lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Include the CSS framework files in the &lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All in all, include all the files necessary in the project in &lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, there are ways to minify and combine all of them in a single file and all those tricks. We can focus on them later. For the timebeing lets focus on how to build &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; applications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the end include your &lt;code&gt;application.js&lt;/code&gt; file, which will be your application entry file. Name of the file is not relevant, you can name it anything.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the application could be written in a single Javascript file or the application could be divided to be written in different Javascript files, each having a particular scope of work. Whatever the case may be, just remember each Javascript file should be an &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; module.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;string&quot;&gt;'use strict'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; appModule = angular.module(&lt;span class=&quot;string&quot;&gt;'app.Main'&lt;/span&gt;,[&lt;span class=&quot;string&quot;&gt;&quot;ngRoute&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ngResource&quot;&lt;/span&gt;]);
})();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The general convention is to wrap each module inside an immediately invoking function, just not to pollute the global space of the Javascript. As in the example above, we are using &lt;code&gt;ngRoute&lt;/code&gt; and &lt;code&gt;ngResource&lt;/code&gt; in our module &lt;code&gt;app.Main&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each Javascript file should be an &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; Module&lt;/li&gt;
&lt;li&gt;Each module can use another module as a dependency and that can be passed in as a parameter in the array as shown above&lt;/li&gt;
&lt;li&gt;By now, you must have noticed, the name of the Javascript file and the name of the module might be different. As long as we provide proper name as dependecy and proper name for the script src, it is all good.          &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually in the example above, the dependent modules &lt;code&gt;ngRoute&lt;/code&gt; and &lt;code&gt;ngResource&lt;/code&gt; is not present in the &lt;code&gt;angular.js&lt;/code&gt; Javascript file . These modules are written in separate Javascript files as modules. So we need to include &lt;code&gt;angular-route.js&lt;/code&gt; and &lt;code&gt;angular-resource.js&lt;/code&gt; in our &lt;code&gt;.html&lt;/code&gt; file to use them, else it will through error.       &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;js/lib/angular-1.4.7/angular.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;js/lib/angular-1.4.7/angular-route.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;js/lib/angular-1.4.7/angular-resource.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Have a look at the &lt;a href=&quot;https://github.com/saumya/ng-102&quot;&gt;Sample Project&lt;/a&gt;.   
Lets define another module in a javascript file named &lt;code&gt;one.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;string&quot;&gt;'use strict'&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mOne = angular.module(&lt;span class=&quot;string&quot;&gt;'module.one'&lt;/span&gt;,[]);
})();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets expose a factory from this module.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;string&quot;&gt;'use strict'&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mOne = angular.module(&lt;span class=&quot;string&quot;&gt;'module.one'&lt;/span&gt;,[]);
  mOne.factory(&lt;span class=&quot;string&quot;&gt;'oneFactory'&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; service = {};
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; service;
  });
})();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use this factory in our project. We have to &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include the &lt;code&gt;one.js&lt;/code&gt; in our html file&lt;/li&gt;
&lt;li&gt;add the module name &lt;code&gt;module.one&lt;/code&gt; in our application entry file          &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the application entry file will look as below&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;string&quot;&gt;'use strict'&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; appModule = angular.module(&lt;span class=&quot;string&quot;&gt;'app.Main'&lt;/span&gt;,[&lt;span class=&quot;string&quot;&gt;&quot;ngRoute&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ngResource&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;module.one&quot;&lt;/span&gt;]);
  &lt;span class=&quot;comment&quot;&gt;// Now, we can use 'oneFactory' here, as its exposed by 'module.one'&lt;/span&gt;
})();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each Javascript file should be an &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; module.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each module could expose any number of anything. That means, any module could expose more than one Object. Those Objects could be any &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngluarJS&lt;/a&gt; Object types, such as Controller, Factory, Service, Directive etc.&lt;/li&gt;
&lt;li&gt;As long as we are providing a dependency of the module name in the Array and refering the proper name of the Objects, we can use them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Directives&lt;/code&gt; in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; are &lt;code&gt;visual elements&lt;/code&gt;. They define custom HTML tags/elements as per their definition.&lt;/p&gt;
&lt;p&gt;Take a look at the &lt;a href=&quot;https://github.com/saumya/ng-102&quot;&gt;Sample Project&lt;/a&gt; and that should clear a lot of things, which might seem unclear here. &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; is modular in the sense, there are carefully separated modules for different purposes. When in need, we include those Javascript files and add the dependecies in the Array. The same goes for our own modules. Try to separate out functionalities into their own modules and use it when needed.   &lt;/p&gt;
&lt;p&gt;Hopefully that will get you started with the framework.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A year with DOJO Toolkit.</title>
      <link>https://saumya.github.io/ray/articles/54/</link>
      <pubDate>Wed, 18 Nov 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/54/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;There are a number of reasons to use a specific framework in a work environment. But sometimes it boils down to just the hype. For example in recent past almost all the companies are trying to implement &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; and before that time it was the time for &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; and the story goes on like that. It is always a good experience to work in very different kind of framework or for that matter its even better to work in different kind of languages altogether.          &lt;/p&gt;
&lt;p&gt;The last year was &lt;a href=&quot;https://dojotoolkit.org/&quot;&gt;DOJO Toolkit&lt;/a&gt; year for me. I must say I am impressed to see features it provides and now that its moving in the right direction. For a long time now, this toolkit was just stagnant but last year only they have started moving again. Well, if you come from a &lt;code&gt;pure Javascript&lt;/code&gt; background might not like it by the way it is designed and behaves. The UI layer of the &lt;a href=&quot;https://dojotoolkit.org/&quot;&gt;DOJO Toolkit&lt;/a&gt; named as Dijit will seem like Flex components (If you know what Flash and Flex is, you will get what I am saying). The framework itself is designed to make people comfortable, who are used to Classical programming languages like JAVA. The whole toolkit will show itself, as a class based toolkit. The average user will just think and use it as a Classical programming language, which is the root of all evil things in a project. Thats part of the team and how it works with this toolkit.          &lt;/p&gt;
&lt;p&gt;In general if we talk about the features this toolkit gives us, I would say its nice and efficient if we use it the way it is meant to. The next version is already on progress and they are moving to &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, that a nice move. All in all its a nice experience working with this framework.     &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Vi/Vim comands</title>
      <link>https://saumya.github.io/ray/articles/53/</link>
      <pubDate>Thu, 06  Aug 2015 00:00:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/53/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;First of all there are 2 modes. &lt;code&gt;Insert&lt;/code&gt; and &lt;code&gt;Command&lt;/code&gt; . By default one is in the command mode.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i : to move to insert mode
esc : to move out from insert mode&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following is a set of commands I use in a regular basis.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a : append : start after cursor
i : insert : start before cursor

w : move forward word by word
b : move backwars word by word

ctrl+F : scroll forward 1 screen
ctrl+B : scroll backward 1 screen
ctrl+D : scroll forward 1/2 screen
ctrl+U : scroll backward 1/2 screen

ctrl+E : scroll forward 1 line
ctrl+Y : scroll backward 1 line

ctrl+H : move to top line
ctrl+M : move to middle line
ctrl+L : move to last line

/ : search for pattern : forward from cursor
? : search for pattern : backwards from cursor

f,F : search inline forward,backward
t,T : move cursor to occurance of the character forwar,backward
; , , : repear last find command forward and backward

ctrl+G : print line info
G : move the cursor by line number&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ctrl+L&lt;/code&gt; : Redraw the screen : &lt;code&gt;Remember the screen in just a buffer of texts&lt;/code&gt;&lt;br&gt;Configuring vi :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set nu : show line numbers
set nowrapscan : search does not wrap TOP or BOTTOM&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Happy editing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Git, Forking and Syncing</title>
      <link>https://saumya.github.io/ray/articles/52/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/52/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;There are couple of things to understand before going to the commandline, just remember that we have assumed the name &lt;code&gt;UPSTREAM&lt;/code&gt; as the repository, from where we have forked the project and &lt;code&gt;master&lt;/code&gt; is our own remote repository where we save our changes.
Well, another important thing is to &lt;a href=&quot;https://help.github.com/articles/configuring-a-remote-for-a-fork/&quot;&gt;configure&lt;/a&gt; the &lt;code&gt;UPSTREAM&lt;/code&gt; or simply configure a repository from where we want to sync.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git remote -v
git remote add UPSTREAM https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For syncing forked repository, the commands are as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git remote -v
git fetch UPSTREAM
git checkout master
git merge UPSTREAM/master
git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a direct &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork/&quot;&gt;tutorial from github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy syncing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Making crossplatform CLI application with HAXE</title>
      <link>https://saumya.github.io/ray/articles/51/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/51/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;When I first heard about CLI applications, I thought it might be shipping with the OS itself. Then I found that we can write our own CLI applications. At that point I assume that well, just a CLI application, means it runs everywhere. But actually CLI applications by default are not crossplatform! Yes, I realised it much later. In order to have a crossplatform CLI app, one needs all the required environment to compile to and compile for a particular OS.         &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; comes in handy in this case. One can make a crossplatfom CLI app with just one code base. Ofcourse you need the required environment to compile to that particular environment. There is even a shorter way to this, compile for &lt;a href=&quot;http://nekovm.org&quot;&gt;NEKO&lt;/a&gt; virtual machine. This &lt;a href=&quot;http://nekovm.org&quot;&gt;NEKO&lt;/a&gt; VM ships with &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;. Once you compile to &lt;a href=&quot;http://nekovm.org&quot;&gt;NEKO&lt;/a&gt;, all you do is package all the &lt;a href=&quot;http://nekovm.org&quot;&gt;NEKO&lt;/a&gt; dependencies and there you have a crossplatform CLI for every OS. Here we will compile to &lt;a href=&quot;http://nekovm.org&quot;&gt;NEKO&lt;/a&gt; and run through &lt;a href=&quot;http://nekovm.org&quot;&gt;NEKO&lt;/a&gt;, but just keep in mind that the same code can be compiled to CPP(C++) to produce true native CLI.&lt;br&gt;Lets begin with the compiler settings or the build file. The &lt;code&gt;.hxml&lt;/code&gt; file has the following content.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haxe&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# HAXE build&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;# Defining the application entry&lt;/span&gt;
-main MyCliApp
&lt;span class=&quot;meta&quot;&gt;# NEKO : compilation&lt;/span&gt;
-neko bin/myCliApp.n
&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;# CPP : compilation&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#-cpp bin/cpp/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are setting up for compiling to &lt;a href=&quot;http://nekovm.org&quot;&gt;NEKO&lt;/a&gt; but then we have the options commented out for compiling to CPP. If we want to compile for the C++ target, then comment out the &lt;a href=&quot;http://nekovm.org&quot;&gt;NEKO&lt;/a&gt; target and enable the CPP(C++) target. Well, this compilation will create a file named &lt;code&gt;myCliApp.n&lt;/code&gt; inside the ‘bin’ folder. To run the file, we have to navigate to the ‘bin’ folder and run with &lt;a href=&quot;http://nekovm.org&quot;&gt;NEKO&lt;/a&gt; as below.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haxe&quot;&gt;neko ./myCliApp.n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats about compilation and running. Lets get back to coding. There is no surprise here as all we have to do is, get the right package and class from &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; and use it. Here is the &lt;a href=&quot;https://github.com/saumya/HAXE-CLI-101&quot;&gt;Git repo&lt;/a&gt; for this example. The application entry initialises ‘PrintInfo’ Class. That class prints the information that we want to show to the user and finally asks the name of the use. As user inputs the name, it greets the user and moves to our defined command prompt. We have setup some commands to display. Depending upon user input the necessary commands are executed. All these are happening in &lt;code&gt;MyCli.hx&lt;/code&gt;  Class. The &lt;a href=&quot;https://github.com/saumya/HAXE-CLI-101/blob/master/com/saumya/cli/MyCli.hx&quot;&gt;code is commented&lt;/a&gt; for easy reference in &lt;a href=&quot;https://github.com/saumya/HAXE-CLI-101&quot;&gt;this repo&lt;/a&gt;. Here is the &lt;a href=&quot;https://github.com/saumya/HAXE-CLI-101/blob/master/com/saumya/cli/MyCli.hx&quot;&gt;direct link&lt;/a&gt; to the class. &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HAXE and NodeJS</title>
      <link>https://saumya.github.io/ray/articles/50/</link>
      <pubDate>Sun, 18 Jan 2015 00:00:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/50/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Continuing the sudy of javascript target of &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; we will focus on &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; this time. Before we move on, lets remind ourselves the things to expect from the &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; toolchain by going through the previous two introductions, here is the &lt;a href=&quot;http://saumya.github.io/ray/articles/47/&quot;&gt;first&lt;/a&gt; and the &lt;a href=&quot;http://saumya.github.io/ray/articles/48/&quot;&gt;second&lt;/a&gt; post.&lt;br&gt;Thats about &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;, now a little about &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. In &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; the concept of modules is very common to make some re-usable code. In general, modules hide everything by default. In class based languages we can call them as &lt;code&gt;private&lt;/code&gt; elements. To make something &lt;code&gt;public&lt;/code&gt; , we have to use &lt;code&gt;exports&lt;/code&gt; keyword in &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;.           &lt;/p&gt;
&lt;p&gt;For example, if we have a file names &lt;code&gt;one.js&lt;/code&gt; as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;exports.publicFunction = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Hello World'&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, in &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;, we can write something as          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; oneObj = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./one'&lt;/span&gt;);
oneObj.publicFunction();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats first kind of modules we have. There is another kind of modules in &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;, where instead of exposing each individual elements from the modules, it exposes a &lt;code&gt;Constructor&lt;/code&gt; function. This is done with &lt;code&gt;module.exports&lt;/code&gt; in stead of only &lt;code&gt;exports&lt;/code&gt;.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports.MyObjConstructor = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'New Object'&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This second one is looked at as classical concepts of programming, where each JS file is kind of a Class file.&lt;br&gt;The dynamic and fun nature of javascript allows us to use the first way of exposing individual elements to actually expose a constructor function too. Is not it ?! Why we think about that! Because &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; generated javascript is actually doing that. Smart.&lt;br&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;br&gt;Now, lets focus back in &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; and here is the companion &lt;a href=&quot;https://github.com/saumya/HAXENode&quot;&gt;Github project&lt;/a&gt;. We have three classes in &lt;code&gt;.hx&lt;/code&gt; as Animal, Jungle and Tree. But only Animal class is exposed by using &lt;code&gt;@:expose&lt;/code&gt; just before the class declaration as           &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haxe&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@:expose(&quot;Animal&quot;)&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Animal&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The application entry class &lt;code&gt;ApplicationEntry.hx&lt;/code&gt; is actually using all these classes. Finally, we have the &lt;code&gt;.hxml&lt;/code&gt; file, we name it &lt;code&gt;compile.hxml&lt;/code&gt;, but could be given any name, to compile our application. Here is the code for quick reference.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haxe&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# Generates one single application JS&lt;/span&gt;
-main ApplicationEntry
-js bin/hxApp.js
&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;
--next
&lt;span class=&quot;meta&quot;&gt;# Generates JS file for individual hx files&lt;/span&gt;
-js bin/Tree.js 
-cp src 
com.jungle.Tree
--next
-js bin/Animal.js 
-cp src 
com.jungle.Animal
--next
-js bin/Jungle.js 
-cp src 
com.jungle.Jungle
&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we run the &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; compiler with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haxe&quot;&gt;haxe compile.hxml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It generates a file with the name &lt;code&gt;hxApp.js&lt;/code&gt;, which is enough for the &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; experiements. But we have the other generted JS files just to see, what actually &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; is outputting. If you look at the &lt;code&gt;Animal.js&lt;/code&gt; its actually getting exported as &lt;code&gt;exports.Animal&lt;/code&gt; and thats exactly what we need to use as a &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; module.&lt;br&gt;Lets write a simple &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application. Get into our &lt;code&gt;bin&lt;/code&gt; folder, where all the &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; compiled JS files are. There we create a node application as &lt;code&gt;nodeApp.js&lt;/code&gt; and the content of the file is &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./hxApp.js'&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(app);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to run the &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application, do this in commandline&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;node nodeApp.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see now all the logs in the commadline, which is actually being run from the application we generated from &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;. This is &lt;code&gt;the way&lt;/code&gt; &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; can be &lt;code&gt;used best&lt;/code&gt;. Do all the code in &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; and finally output to a single application javascript file. Then use the application file to launch the application.&lt;br&gt;Now, lets see what else we can do with the generated code. If you remember we have exposed the ‘Animal’ class with &lt;code&gt;@:expose&lt;/code&gt;. Lets modify our ‘nodeApp.js’ as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./hxApp.js'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; animal_1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; app.Animal(&lt;span class=&quot;string&quot;&gt;'CAT'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(animal_1);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application with the same command as &lt;code&gt;node nodeApp.js&lt;/code&gt;, this time if you look at the application log on the command promt, its actually created a new ‘Animal’. The fun has just begun, I hope. Well, we can go on modifying our code to look it more beautiful. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./hxApp.js'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; animal_1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; app.Animal(&lt;span class=&quot;string&quot;&gt;'CAT'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(animal_1);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Animal = app.Animal; &lt;span class=&quot;comment&quot;&gt;// Store the Constructor&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; animal_2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Animal(&lt;span class=&quot;string&quot;&gt;'Tiger'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// And use it&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(animal_2);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a goodlooking constructor for ‘Animal’ in the name of ‘Animal’ now.&lt;/p&gt;
&lt;p&gt;Thats all is happening from the only one generated Javascript file that is the final application javascript file. Lets see, what else we can do! If you remember we have actually generated all the resepective javascript files for individual &lt;code&gt;.hx&lt;/code&gt; files. This time, lets forget our final or application javascript file. Lets modify our &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application file by removing everything else from it and adding the following code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./Animal'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; o.Animal(&lt;span class=&quot;string&quot;&gt;'Cat'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// Directly using constructor&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Animal = o.Animal;&lt;span class=&quot;comment&quot;&gt;//storing the constructor&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Animal(&lt;span class=&quot;string&quot;&gt;'Tiger'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//using constructor&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(c);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a2);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application from command line as before. Sweat! That works too!         &lt;/p&gt;
&lt;p&gt;Well, we now are ready for primetime &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application using &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; toolchain. The reference application and haxe code is at &lt;a href=&quot;https://github.com/saumya/HAXENode&quot;&gt;this repo on Github&lt;/a&gt;.       &lt;/p&gt;
&lt;p&gt;To summerise all this, we can create a final javascript output and use it to launch our &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application. We can also just compile each &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; file to respective javascript file and use that as a module for our application.         &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Dojo Toolkit, require and events.</title>
      <link>https://saumya.github.io/ray/articles/49/</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/49/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Well, lets say this, if you are working on &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt;, you are working on a legacy application. Since &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; is releasing its newer versions, you need to change your application to newer codebase. Currently &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; is leveraging &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#amd&quot;&gt;AMD&lt;/a&gt; for modules and Javascript files. Which is very new for this toolkit and veteran developers in this toolkit may find its very different.          &lt;/p&gt;
&lt;p&gt;Previously, when we needed some JS code, its simply done by making a ‘require’ call.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;dojo.require(&lt;span class=&quot;string&quot;&gt;&quot;dojo.string&quot;&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;//then use it&lt;/span&gt;
dojo.string.trim(&lt;span class=&quot;string&quot;&gt;&quot;  I Like Trim Strings &quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it looks as          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;dojo/string&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dojo/domReady!&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;{
  string.trim(&lt;span class=&quot;string&quot;&gt;&quot;  I Like Trim Strings &quot;&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that may seems fine now, but then what happens when we need something inside that &lt;code&gt;require&lt;/code&gt; itself? Actually, its simpler than it seems, we can have &lt;code&gt;require&lt;/code&gt; inside another require too.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;dojo/domReady!&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;//DOM is ready, load another module&lt;/span&gt;
    &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;dojo/string&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;{
      string.trim(&lt;span class=&quot;string&quot;&gt;&quot;  I Like Trim Strings &quot;&lt;/span&gt;);
    });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats nice. Here &lt;a href=&quot;http://dojotoolkit.org/reference-guide/1.7/dojo/require.html&quot;&gt;is the official documentation&lt;/a&gt;. The introduction to &lt;a href=&quot;http://dojotoolkit.org/documentation/tutorials/1.10/modern_dojo/&quot;&gt;modern dojo&lt;/a&gt; is here.&lt;br&gt;Another nice utility is &lt;a href=&quot;http://dojotoolkit.org/reference-guide/1.10/dojo/topic.html&quot;&gt;topic&lt;/a&gt;. This is kind of central event dispatching and listening station. All one has to do is, dispatch events through &lt;a href=&quot;http://dojotoolkit.org/reference-guide/1.10/dojo/topic.html&quot;&gt;topic&lt;/a&gt; and listen through it too. These are called &lt;code&gt;publish&lt;/code&gt; and &lt;code&gt;subscribe&lt;/code&gt; of events.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;dojo/topic&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;topic&lt;/span&gt;)&lt;/span&gt;{
    topic.subscribe(&lt;span class=&quot;string&quot;&gt;&quot;some/topic&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arguments&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;received:&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);
    });
    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;
    topic.publish(&lt;span class=&quot;string&quot;&gt;&quot;some/topic&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other kind of events are DOM events and &lt;a href=&quot;http://dojotoolkit.org/reference-guide/1.10/dojo/on.html#dojo-on&quot;&gt;they are handled with the ‘on’&lt;/a&gt; module.          &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HAXE JS 102</title>
      <link>https://saumya.github.io/ray/articles/48/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/48/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;We are going good with &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;, take a moment to go through the official &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; documentation.&lt;br&gt;This is a follow-up post to the &lt;a href=&quot;http://saumya.github.io/ray/articles/47/&quot;&gt;Haxe JS 101&lt;/a&gt;. Its all about setting up the expectations from the language and the tool chain. Lets make some more things clear about the tooling and how the language works.          &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; will produce one single JS file&lt;/li&gt;
&lt;li&gt;We can force it to create one JS file for one .hx file&lt;/li&gt;
&lt;li&gt;The created JS file, is by no means is a module JS file as in CommonJS or AMD          &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The contents of &lt;code&gt;.hxml&lt;/code&gt; or the build file generally looks as        &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haxe&quot;&gt;-main ApplicationEntry
-js app.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While forcing each &lt;code&gt;.hx&lt;/code&gt; file for an individual &lt;code&gt;.js&lt;/code&gt; file, the build file would contain something as         &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haxe&quot;&gt;-js com/jungle/Tree.js 
-cp src 
com.jungle.Tree
--next
-js com/jungle/Animal.js 
-cp src 
com.jungle.Animal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a sample project and the options, have a look at &lt;a href=&quot;https://github.com/saumya/HAXE-JS101&quot;&gt;this repo&lt;/a&gt; and the &lt;a href=&quot;https://github.com/saumya/HAXE-JS101/blob/master/compile.hxml&quot;&gt;sample .hxml&lt;/a&gt; file is here with all the possible options for &lt;code&gt;.js&lt;/code&gt; output.          &lt;/p&gt;
&lt;p&gt;The important thing is to remember that finally every JS project is compiled to a single JS file and &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; does it in one go. It does not provide module export or any fancy things that other JS frameworks do to support JS look like a classical programming language. &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; works with its own tool chain and provides well made JS output. Do not fight it to mock JS libraries, &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; is more powerful than that. Even for NodeJS output, &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; produces the final JS output, just a single &lt;code&gt;.js&lt;/code&gt; file. Work with &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; packages and classes and then compile it to make the final output, no nothing in between.&lt;/p&gt;
&lt;p&gt;Happy Haxing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HAXE JS 101</title>
      <link>https://saumya.github.io/ray/articles/47/</link>
      <pubDate>Mon, 05 Jan 2015 00:00:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/47/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Hope you know what is &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;, take a moment to go through the official &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; documentation. We will discuss how and what to consider while working with JS in &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;.          
Generally other languages, which compile to JS, actually compile each specific file to a respective JS file. &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; actually compiles to one single JS file for our application. We can further take the generated JS file and minify it using popular JS minifiers.        &lt;/p&gt;
&lt;p&gt;The work flow for &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; to JS is as simple as         &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing the normal &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; application&lt;/li&gt;
&lt;li&gt;Use the package structure and class as usual&lt;/li&gt;
&lt;li&gt;Make a .hxml file difining what would be the final JS file&lt;/li&gt;
&lt;li&gt;Compile with &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; compiler to produce the JS file         &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-haxe&quot;&gt;haxe compile.hxml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.hxml&lt;/code&gt; file looks something like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haxe&quot;&gt;-main ApplicationEntry
-js app.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats all to it. &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; will take care of the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;package&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; of the application. Finally the generted JS file is having everything our application needs. Include the JS file in the required HTML file and we are done.      &lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&quot;https://github.com/saumya/HAXE-JS101&quot;&gt;sample basic application&lt;/a&gt; showing all there is to it.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CoffeeScript basics</title>
      <link>https://saumya.github.io/ray/articles/45/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/45/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Just to set the expectations right, we need to know something before we begin here.         &lt;/p&gt;
&lt;p&gt;When I first heard about &lt;code&gt;Class&lt;/code&gt; in &lt;code&gt;Javascript&lt;/code&gt; it created curiosity on me and the expectation increased as to work like a &lt;code&gt;Classical&lt;/code&gt; language(Where Classes are the root of everything) instead of &lt;code&gt;Prototypical&lt;/code&gt; language(like Javascript). But then slowly I understood that its not &lt;code&gt;Javascript&lt;/code&gt; but other languages on top of Javascript which create somekind of &lt;code&gt;Class&lt;/code&gt; concept to mimic &lt;code&gt;Classical&lt;/code&gt; languages. The point is everything boils down to &lt;code&gt;Javascript&lt;/code&gt; if a language is written to compile or transpile to &lt;code&gt;Javascript&lt;/code&gt; . Well, that may seem like a spoiler right now, but its actually not as we will see. Just keep these things in mind all the time, even if we are doing &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt;.        &lt;/p&gt;
&lt;p&gt;Here is the direct link to the &lt;a href=&quot;https://github.com/saumya/CoffeeScript101&quot;&gt;Github&lt;/a&gt; repository for the code reference to this post.       &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CoffeeScript is generally written in a &lt;code&gt;.coffee&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;.coffee&lt;/code&gt; file is compiled to a &lt;code&gt;.js&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Each space (a blank space) in code has a meaning in the &lt;code&gt;.coffee&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Semicolons are optional and generally avoided&lt;/li&gt;
&lt;li&gt;In the beginning you may write more than one classes in a single &lt;code&gt;.coffee&lt;/code&gt; file, and thats perfectly alright here&lt;/li&gt;
&lt;li&gt;By default the &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; Classes you write are private            &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When compiled to JS, the contents of each file, are put inside a self invoking function. This is intentional to not pollute the Global variables. So if the content has some classes inside them, then those classes will also be inside the self-invoking function, restricting the access from outside.&lt;br&gt;The classes in &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; are compiled to as usual JS functions and the inheritence is done through the prototypical inheritence concepts of Javascript. Since all this happens behind the scenes and as a &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; developer if you do not know, how its working, it would be a pain later to expect anything else from this language.          &lt;/p&gt;
&lt;p&gt;Thats all to start with the new year. Happy new year.         &lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cake and Coffee</title>
      <link>https://saumya.github.io/ray/articles/46/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/46/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;While working with &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt;, we generally tend to do the following,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write something in a .coffee file&lt;/li&gt;
&lt;li&gt;compile that file with coffee compiler to .js file         &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, if we are a little smarter, then use the following command to compile all the .coffee files in a particular folder to respective .js file in another folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;coffee --compile --output outputFolder/ inputFolder/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That may seem enough now, but actually there are a lot of things we could automate. The native way to do this in &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; is called &lt;code&gt;Cake&lt;/code&gt;. We can look at it as a build system. Nice thing about this is, we can write every instruction in &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; itself.         &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cake is an utility comes with &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;its a task runner or build system&lt;/li&gt;
&lt;li&gt;all the instructions are saved in a file with name &lt;code&gt;Cakefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cakefile&lt;/code&gt; is the file name and there is no extension to it&lt;/li&gt;
&lt;li&gt;Everything inside the &lt;code&gt;Cakefile&lt;/code&gt; is a &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; expression         &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To run the &lt;code&gt;Cake&lt;/code&gt; task runner, navigate to the folder, where our &lt;code&gt;Cakefile&lt;/code&gt; is residing and fire up the command as below.        &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;cake&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will display all the tasks available in that file to be run. To run a specific task, run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;cake taskName&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While defining tasks, we can make a relation between tasks. That means we can say taskOne is dependent on taskTwo. The &lt;a href=&quot;https://github.com/saumya/CoffeeScript101&quot;&gt;basics of CoffeeScript project&lt;/a&gt; has a Cakefile for reference.        &lt;/p&gt;
&lt;p&gt;The direct link to the sample &lt;code&gt;Cakefile&lt;/code&gt; &lt;a href=&quot;https://github.com/saumya/CoffeeScript101/blob/master/Cakefile&quot;&gt;is here&lt;/a&gt;. All the code are commented for easy reference.       &lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>RequireJS, Load timeout for modules!</title>
      <link>https://saumya.github.io/ray/articles/44/</link>
      <pubDate>Mon, 17 Nov 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/44/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Working with &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;, will make you work with &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;. And if you are working with &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; for a little time, then you probably know what I am talking about. Sometimes, the modules we are loading through &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; throw errors saying&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;: Load timeout &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; modules&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will suggest to have a look at &lt;a href=&quot;http://requirejs.org/docs/errors.html&quot;&gt;RequireJS&lt;/a&gt; documentation for detailed explanation.&lt;br&gt;The most common and which may hit you in the begining is the &lt;code&gt;timeout&lt;/code&gt; for timeout itself. There are ways to fix this. The options are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;increase the timeout limit&lt;/li&gt;
&lt;li&gt;reload the page or the module on timeout error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; configuration has an option called &lt;code&gt;waitSeconds&lt;/code&gt;, which defaults to &lt;code&gt;7&lt;/code&gt;. Now if the module does not load in 7 seconds, it will giveup and throw the error. If &lt;code&gt;waitSeconds&lt;/code&gt; is set to &lt;code&gt;0&lt;/code&gt;, it will wait for &lt;code&gt;infinite&lt;/code&gt;. Well, along with that setting, set the &lt;code&gt;enforceDefine&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for reliability in all browsers and scenarios. This setting will look as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;requirejs.config({
    &lt;span class=&quot;attr&quot;&gt;enforceDefine&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;waitSeconds&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats a quickfix. But again, it may hit the performace of the application.&lt;br&gt;The otherway is &lt;a href=&quot;http://requirejs.org/docs/api.html#errbacks&quot;&gt;Errbacks&lt;/a&gt; as per &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;. so what are they. They are simply callbacks but since it happens in errors, its called &lt;code&gt;Errbacks&lt;/code&gt;. We can do stuff like reloading the whole application or the specified module or other error handling on these.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;'modules/one'&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;'modules/two'&lt;/span&gt;],
           &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;One,Two&lt;/span&gt;)&lt;/span&gt;{
            &lt;span class=&quot;comment&quot;&gt;//Application logic&lt;/span&gt;
        },
        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;{
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Custom ERROR handler'&lt;/span&gt;,error);
            &lt;span class=&quot;comment&quot;&gt;//error.requireModules : is Array of all failed modules&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failedId = error.requireModules &amp;amp;&amp;amp; error.requireModules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(failedId);
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(error.message);
        });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Upgrading to Cordova 3.4 and above</title>
      <link>https://saumya.github.io/ray/articles/43/</link>
      <pubDate>Thu, 23 Oct 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/43/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;While trying to upgrade, one of my previous Cordova Android application, to latest &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; , noticed that &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; now makes it very difficult to switch to a native development workflow. Its not the flow itself, which is difficult, but the information about the flow and to get started with a project which is the problem. If you have ever worked with the native development flow of &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; , which I guess you must have, as that was the actual flow in the beginning. Then its exactly the same work flow, but the thing is, its not mentioned anywhere. And in between these, they had introduced a web development workflow and tried forcing to use it. Which itself is not clear and then combined the native workflow with it. Good that, that period is over. But its not clear at all from the docs.
Well, first of all, &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; is saying its released the version 4 of the toolkit. When you go to &lt;a href=&quot;http://cordova.apache.org/#download&quot;&gt;download&lt;/a&gt; section for native development workflow, you will &lt;a href=&quot;https://www.apache.org/dist/cordova/&quot;&gt;not find a version 4&lt;/a&gt; ! So, you have to go inside &lt;a href=&quot;https://www.apache.org/dist/cordova/platforms/&quot;&gt;platforms&lt;/a&gt;, there also you will not find version 4. So, I ended up downloading 3.6.4 for android and will suggest everyone to do that for the time being. After downloading the zipped file, extract it to a folder. Navigate to the folder and fireup the cordova create command to create a project.
Next is adding the plugins, because now &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; does not include plugins by default. For that, one has to go back to Cordova CLI and that can be done with Node and NPM. But instead of running Cordova to add plugins, one has to run Plugman to install plugins.&lt;/p&gt;
&lt;p&gt;The flow is &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;download Cordova Native development package&lt;/li&gt;
&lt;li&gt;download Node and NPM&lt;/li&gt;
&lt;li&gt;install Cordova and Plugman through NPM&lt;/li&gt;
&lt;li&gt;create project from inside the dowloaded Cordova folder&lt;/li&gt;
&lt;li&gt;navigate to the project folder&lt;/li&gt;
&lt;li&gt;run the Plugman command to add plugins to the project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Dojo Toolkit, Widget.</title>
      <link>https://saumya.github.io/ray/articles/42/</link>
      <pubDate>Tue, 30 Sep 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/42/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;&lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; has a component library named as &lt;code&gt;Dijit&lt;/code&gt;. Each component in this library is known as a &lt;code&gt;Widget&lt;/code&gt;. It is better to know the &lt;code&gt;dijit&lt;/code&gt; framework vocabulary before going further inside it. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Normally each &lt;code&gt;.js&lt;/code&gt; file represents a &lt;code&gt;Class&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each file, whose name starts with &lt;code&gt;_&lt;/code&gt; (underscore) is &lt;code&gt;not a concrete&lt;/code&gt; class. That means, this class is supposed to be extended to be used, &lt;code&gt;never directly used&lt;/code&gt; as is.&lt;/li&gt;
&lt;li&gt;Members inside a class, properties and methods, whose name starts with &lt;code&gt;_&lt;/code&gt; (underscore) are &lt;code&gt;private&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A class is defined by &lt;code&gt;declare()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; now supports AMD modules. So the module definition is pretty straight forward as in standard module definition. If you have ever used any other framework such as &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;, you already know, how to declare, extend, load and use a module and a class. &lt;/p&gt;
&lt;p&gt;Now, lets see what &lt;code&gt;Widget&lt;/code&gt; brings to the rules table. Each Widget has a life-cycle of its own. The lifecycle methods are as below in sequence.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor()&lt;/li&gt;
&lt;li&gt;postMixInProperties()&lt;/li&gt;
&lt;li&gt;buildRendering()&lt;/li&gt;
&lt;li&gt;setters and getters, example is set(“myProperty”,value)&lt;/li&gt;
&lt;li&gt;postCreate()&lt;/li&gt;
&lt;li&gt;startup()&lt;/li&gt;
&lt;li&gt;destroy()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are few methods which also be called in some widgets, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resize()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each &lt;code&gt;Widget&lt;/code&gt; is supposed to &lt;code&gt;Extend&lt;/code&gt; the &lt;code&gt;_WidgetBase&lt;/code&gt; class defined in &lt;code&gt;dijit/_WidgetBase&lt;/code&gt; package. Sometimes, it is necessary to use template strings or templates inside a  Widget. In that case, the &lt;code&gt;Widget&lt;/code&gt; extends &lt;code&gt;_WidgetBase&lt;/code&gt; and &lt;code&gt;_TemplatedMixin&lt;/code&gt;, defined in &lt;code&gt;dijit/_WidgetBase&lt;/code&gt; and &lt;code&gt;dijit/_TemplatedMixin&lt;/code&gt; package respectively.&lt;/p&gt;
&lt;p&gt;After creation of each child &lt;code&gt;Widget&lt;/code&gt; inside the parent Widget, its necessary to call the &lt;code&gt;startup()&lt;/code&gt; method of the child Widget. Since &lt;code&gt;startup()&lt;/code&gt; call goes through all the child widgets of a container Widget, its better to add all the child Widgets to the parent Widget and call parent’s &lt;code&gt;startup()&lt;/code&gt;, which will call &lt;code&gt;startup()&lt;/code&gt; of each child Widget.
While writing a custom Widget, its necessary to override parent’s lifecycle methods. At the sametime, it is necessary to continue the lifecycle of the Widget. So a call to parent’s method is necessary. In most of all programming languages it is done with a &lt;code&gt;super()&lt;/code&gt; call. In &lt;code&gt;dijit&lt;/code&gt; framework its called as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this.inherited(arguments);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So inside each of the above life-cycle methods, a call to &lt;code&gt;this.inherited(arguments);&lt;/code&gt; is necessary, either in the beginning or as the last line of the method.&lt;/p&gt;
&lt;p&gt;A custom &lt;code&gt;Widget&lt;/code&gt; has either of the 2 properties below or sometimes both, to add child widgets to  itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this.domNode&lt;/li&gt;
&lt;li&gt;this.containerNode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now to add child widgets to the parent widget there are methods like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addChild()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, this post may seem a lot but the idea is to make you aware of the vocabulary and some background to &lt;code&gt;dijit&lt;/code&gt; infrastructure. For a basic and complete &lt;code&gt;example&lt;/code&gt; &lt;a href=&quot;https://github.com/saumya/dojo101/blob/master/dojo-release-1.10.0-src/myWidgets/rayWidget3.js&quot;&gt;have a look at this widget&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Getting started with, Dojo Toolkit</title>
      <link>https://saumya.github.io/ray/articles/41/</link>
      <pubDate>Mon, 29 Sep 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/41/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;To begin with, &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; or simply referred to as &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; is one of many libraries in javascript. First thing to do is, like any other javascript libraries, make sure which version of library you are studying and using. &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; has gone through major upgrades and if you are trying to do things the new way of &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; then better get to know the &lt;a href=&quot;http://dojotoolkit.org/documentation/tutorials/1.10/modern_dojo/&quot;&gt;new version&lt;/a&gt;. We will be focusing on the new version only(currently &lt;code&gt;1.10&lt;/code&gt;) and referring to old one, wherever necessary.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; has got a combination following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A bare bone of functionality ( &lt;code&gt;dojo&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;A widget library ( &lt;code&gt;dijit&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;An experimental library ( &lt;code&gt;dojox&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;An Unit testing framework&lt;/li&gt;
&lt;li&gt;A compiler to do the minification and optimisation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of javascript libraries try to implement the classical programming concepts and &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; is another one of them. So, if you are a purist in Javascript, &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; will dissapoint you. The functional nature of Javascript is also eliminated here. &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; clearly disagrees to say that &lt;code&gt;function&lt;/code&gt; is &lt;code&gt;a first class citizen&lt;/code&gt;, which is again denying another nice feature of javascript. Well, but if you are coming from a classical programming background, that means from a programming language which is class based like Java, then &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; will seem natural. So, we will refer them in classical terms rather than Javascript terms.&lt;/p&gt;
&lt;p&gt;The core functionality of the toolkit is wrapped in a package called &lt;code&gt;dojo&lt;/code&gt;. Everythig that runs in the toolkit depends on this basic package. Next is &lt;code&gt;dijit&lt;/code&gt;, which can be called as a component library or in dojo’s terms these are widgets. Now &lt;code&gt;dojox&lt;/code&gt; is a package containing experimental widgets, which will eventually go into &lt;code&gt;dijit&lt;/code&gt; , once they are stable enough. Since widgets have to live a life of their own, there is a flow of lifecycle events. It is now obvious that any application using these widgets have to abide to these lifecycle events and some rules as a whole. In Dojo’s terms these are framework rules.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Checklist to join a corporate</title>
      <link>https://saumya.github.io/ray/articles/40/</link>
      <pubDate>Sat, 23  Aug 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/40/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;It is a surprise for me, to see the processes these companines follow to get a person on board. I am not talking about interview. The technical interview is kind of rounds after rounds of never ending interviews. But at least, these are ok-ish situation for a tech person.&lt;br&gt;The real pain starts, once you get through the interview. Now you are selected and need to serve the notice period at old organisation and move on to join the new one. The problem is, once you are through the interview, this new companies will call you at least 5 times a day. This is plain and simple irritating. They will force you (no one can force you, but at least they will talk like that) to join before the scheduled time. 
If at all, you have joined them by keeping their words, there would be no respect at all for that. Once you come to join them, they will show how much process they follow! Really?!! If you follow all these, why you kept on calling a person who has not joined you? Where were your processes! Or is that a process of yours to trouble someone, who is not from your organisation! Simple stupid. So you make your own process, follow your own process and change that at will.&lt;br&gt;Well, just keep in mind that once you have come to join a new corporate, keep below things with you. These companies will not tell you, when they should have, that please bring all these with you.     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your own laptop (only windows with Internet Explorer)&lt;/li&gt;
&lt;li&gt;Your own datacard for internet&lt;/li&gt;
&lt;li&gt;Your phone with roaming activated   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once these are done, keep below things with you.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your cheque book&lt;/li&gt;
&lt;li&gt;Your father’s identity proof&lt;/li&gt;
&lt;li&gt;All your previous residing locations proof&lt;/li&gt;
&lt;li&gt;Two friends’ addresses and contact from each of all previous location and company&lt;/li&gt;
&lt;li&gt;Two local friends’ contacts and addresses (if they are not, create them !)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well last but most importantly keep “your common sense and simplicity” at home. Just rember that these are just mindless machines working for a factory which does not have and can not respect to have a brain.&lt;/p&gt;
&lt;p&gt;Never giveup.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>AngularJS 101</title>
      <link>https://saumya.github.io/ray/articles/39/</link>
      <pubDate>Tue, 24 Jun 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/39/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;It took me sometime to make me comfortable in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. There are a lot of tutorials, discussions and videos out there about &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. I would suggest, go through them and go through as many as you can, before jumping into code with this framework. We will be looking at the very basics of the framework here and for &lt;code&gt;version 1.3&lt;/code&gt; and above, of the framework.&lt;br&gt;You must heard about MVC or Model-View-Controller architecture and &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. While thats true, lets keep that for a little late.&lt;br&gt;First of all, just remember that &lt;code&gt;$scope&lt;/code&gt; is model object and sometimes referred to as &lt;code&gt;ViewModel&lt;/code&gt;. Then there are &lt;code&gt;Views&lt;/code&gt;, which are either HTML tags or full html files. And then &lt;code&gt;Controllers&lt;/code&gt;, which are javascript files. At this point always remember that &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; revolves arround these &lt;code&gt;View&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt;. The data this &lt;code&gt;View&lt;/code&gt; displays is the same as the data the &lt;code&gt;Controller&lt;/code&gt; modifies and is available through &lt;code&gt;$scope&lt;/code&gt;. No matter what, &lt;code&gt;$scope&lt;/code&gt; remains in the middle as this&lt;br&gt;&lt;code&gt;View &amp;lt;---$scope---&amp;gt; Controller&lt;/code&gt;&lt;br&gt;Now, since &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; already uses &lt;code&gt;2-way data binding&lt;/code&gt; any changes to data or &lt;code&gt;$scope&lt;/code&gt; in &lt;code&gt;View&lt;/code&gt; or &lt;code&gt;Controller&lt;/code&gt; is reflected by each other.&lt;br&gt;An &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; application begins with a module named &lt;code&gt;ng-app&lt;/code&gt; and this &lt;code&gt;ng-app&lt;/code&gt; is generally only one. So what is a module ? Module is kind of self contained small applications inside a big application. The special module &lt;code&gt;ng-app&lt;/code&gt; is the only exception as its the big application and everything else in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; world happens inside it. All other modules generally go inside &lt;code&gt;ng-view&lt;/code&gt;, have a look at &lt;a href=&quot;https://github.com/saumya/ng-101/blob/master/index.html&quot;&gt;this html page&lt;/a&gt; for the reference.In terms of &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;, a module is a combination of a &lt;code&gt;View-$scope-Controller&lt;/code&gt;. Everytime you need to load this module, the View gets loaded in the &lt;code&gt;ng-view&lt;/code&gt; and its Controller gets initialised along with the &lt;code&gt;$scope&lt;/code&gt;. All these mapping are written in a &lt;code&gt;Route&lt;/code&gt;, which maps &lt;code&gt;View with Controller&lt;/code&gt;, &lt;a href=&quot;https://github.com/saumya/ng-101/blob/master/js/saumyaApp.js&quot;&gt;take a look at this&lt;/a&gt;. Route is a separate module as of &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; version 1.3. So, one need to include the JS file and the dependency. A quick reference of an &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; application looks as below        &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML page&lt;/li&gt;
&lt;li&gt;ng-app (root module)&lt;/li&gt;
&lt;li&gt;ng-view (sub modules load here)&lt;/li&gt;
&lt;li&gt;first JS file for Route and other things&lt;/li&gt;
&lt;li&gt;Route maps URL paths with sub-views and their controllers&lt;/li&gt;
&lt;li&gt;sub-views(HTML partials or pages) are loaded inside the ng-view and initialied with their controllers        &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far we are good. The next thing is, we can still make it more modularised. &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; allows, something called as &lt;code&gt;Directives&lt;/code&gt;, you may think of it as components. Inside a &lt;code&gt;Module&lt;/code&gt;, we can write our custom directives, which are &lt;code&gt;custom HTML tags&lt;/code&gt; along with its &lt;code&gt;controller&lt;/code&gt;. But always remember, &lt;code&gt;Directives&lt;/code&gt; are part of &lt;code&gt;View&lt;/code&gt;. So the &lt;code&gt;$scope&lt;/code&gt; is also available to them. Now, there are different pre-built modules with &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; for different job in hand, like &lt;code&gt;$http&lt;/code&gt; is for interacting with &lt;code&gt;web services&lt;/code&gt;.         
&lt;a href=&quot;https://github.com/saumya/ng-101&quot;&gt;Refer to the project here&lt;/a&gt;, which I have created to better understand the basic of an &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; application. Always remember, anything in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; that we write falls upon either &lt;code&gt;View&lt;/code&gt; or &lt;code&gt;Controller&lt;/code&gt; and there is always &lt;code&gt;$scope&lt;/code&gt; available to both of these.        &lt;/p&gt;
&lt;p&gt;I would love to listen your inputs on this, please leave a comment for discussion.         &lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Looking at AngularJS</title>
      <link>https://saumya.github.io/ray/articles/38/</link>
      <pubDate>Sat, 07 Jun 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/38/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;I had seen &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; before, almost one year back. When I came back to have a look at it again now, I got surprised to see “How long it has really come!”. Well here, I am just introducing some of the libraries, frameworks and projects that have eveloved arround &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;.          &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.polymer-project.org/&quot;&gt;Polymer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://angulardart.org/&quot;&gt;Angular Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ngcordova.com/&quot;&gt;ngCordova&lt;/a&gt;, Cordova powered by AngularJS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt;, framework for Hybrid Mobile Apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Upgrading to Ruby 2.x from 1.x with rvm, on an upgrade from old OSX to Mavericks.</title>
      <link>https://saumya.github.io/ray/articles/37/</link>
      <pubDate>Mon, 26 May 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/37/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is a situation when you have updated the OS from a previous version of Mac OSX to the latest version of the OSX Mavericks. Generally OSX ships with a version of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;, which is latest by the time the OS is released. But when it comes to OSX upgrade and in this case particularly to OSX Mavericks, the operating system upgrade does not bring in the &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; upgrade. Rather, the old &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; lives on the new OSX. Well, if you have a decent understanding of managing &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; versions, you may be using one of the version management systems of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;. I used to have &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;. Now I have an upgraded OSX but need to have the latest version of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;. The steps are as below     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upgrade &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upgrade &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, there are issues with these two steps as I found throughout the net. A simple search in the internet will make you aware of this fact. So the refined steps are as below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install XCode Commandline tools&lt;/li&gt;
&lt;li&gt;Reinstall &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upgrade &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my case, I do not have to install the XCode commandline tools, probably because I am an iOS developer and always updates to the latest version of XCode along with the commandline tools. The thing to note here is with the OSX upgrade, the commandline tools of XCode is removed by the system. Even if, one installs the new &lt;code&gt;XCode&lt;/code&gt;, the &lt;code&gt;commandline tools&lt;/code&gt; are not included by default. All one has to do is &lt;code&gt;install&lt;/code&gt; it (&lt;code&gt;again&lt;/code&gt;).&lt;br&gt;Moving on, the next step is to upgrade the &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;. With the OSX upgrade, the normal &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt; update does not work.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rvm get stable&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, the fix is to &lt;code&gt;install rvm&lt;/code&gt; (you can call it &lt;code&gt;again&lt;/code&gt;) as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\curl -sSL https://get.rvm.io | bash -s stable&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once this step is done everything else is just normal &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; update thing. Update &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; with the commad as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rvm install ruby-2.1.1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets install a gem such as json, which can be done with the command as follows. I was suggesting &lt;del&gt;sudo gem install json&lt;/del&gt;, but never do that. Instead use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem install json&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It seems using &lt;code&gt;sudo&lt;/code&gt; &lt;code&gt;is not advisable&lt;/code&gt; to be used while using &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;. I got a reply in twitter for this blog post, from &lt;a href=&quot;https://twitter.com/rvm_io&quot;&gt;@rvm_io&lt;/a&gt; as &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;looks good, the only hint - never use sudo with RVM, sudo “disables” RVM controlled ruby, the gem most likely is installed in system    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thats all to it. The important thing is, if we try to install the 2.x version of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; with old &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;, it will not work. Actually, it does not show even in the known list of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy upgrading.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Making a RESTful API with NodeJS and Express</title>
      <link>https://saumya.github.io/ray/articles/36/</link>
      <pubDate>Wed, 21 May 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/36/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Here we will be making a basic REST API using the &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; framework for &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. I am not going in detail of how &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; works, but straight to the code, which is as below. While this may look as a regular &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; application, the important thing is the API can be called from any web server.      &lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/saumya/402d2f035b23d7d08877.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;While developing APIs, the first thing came to me is, how to call this from another server?! For thats the only reason we are exposing the API. And the answer is enable &lt;a href=&quot;http://enable-cors.org/&quot;&gt;CORS&lt;/a&gt;, cross-origin resource sharing. It simply means, make the API available or expose to these servers. we can specify the domain names individually or in this partcular case, we have exposed the API to any sever by specifying * .       &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.all(&lt;span class=&quot;string&quot;&gt;'*'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, next&lt;/span&gt;) &lt;/span&gt;{
  res.header(&lt;span class=&quot;string&quot;&gt;&quot;Access-Control-Allow-Origin&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;);
  res.header(&lt;span class=&quot;string&quot;&gt;&quot;Access-Control-Allow-Headers&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;X-Requested-With&quot;&lt;/span&gt;);
  next();
 });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means, upon any API call, add these headers first. And the header says, its allowed from any &lt;code&gt;*&lt;/code&gt; domain. So the result is, before the API call hits any route, it first comes into this &lt;code&gt;all&lt;/code&gt; binding and sets the values and then goes to the respective route.&lt;/p&gt;
&lt;p&gt;Happy Noding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>NodeJS, HTML5, JQuery and what you may come across in an interview</title>
      <link>https://saumya.github.io/ray/articles/35/</link>
      <pubDate>Tue, 20 May 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/35/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is not a surprise for me, but if you are new to the modern web development and working on Javascript stack, chances are that you come acrcoss these in everyday life. It may come from anywhere, your collegue, your senior, may be from an interviewer. But the cool thing is, you are right in those cases. All you have to do is ignore them and move on. I had seen this while working on Flash platform, when people were saying things about Flash and Flex. Now the platforms are changed but situation are same.          &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeJS is a different language.&lt;/li&gt;
&lt;li&gt;NodeJS is not javascript.&lt;/li&gt;
&lt;li&gt;NodeJS is bad for not having X, which Y language has&lt;/li&gt;
&lt;li&gt;Jquery is a different language.&lt;/li&gt;
&lt;li&gt;JQuery is not javascript.&lt;/li&gt;
&lt;li&gt;JQuery is better than javascript.&lt;/li&gt;
&lt;li&gt;HTML5 is a programming language.&lt;/li&gt;
&lt;li&gt;HTML5 is different from HTML.&lt;/li&gt;
&lt;li&gt;Have you worked on HTML5? If yes, have you worked on DOM?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I could answer to all these in single lines but then the interpretation would be wrong.&lt;br&gt;The point is people coming from traditional languages like, Java and C# and still working on those, think they know all. I would suggest, please come out from that and even if you want to target JVM, use a modern language like SCALA instead. Well, if these guys try to code in a modern platform like NodeJS, they suddenly make the simple solution, to a complex process, as per the old knowledge they were having. Even the elegance of these new modern platforms like Ruby, NodeJS etc seem to be bad in their eyes. Well, the problem is these guys are sitting on top positions in traditional service based companies. So, if you join one of these companies, or even appear for interview in those companies, chances are you will come across these scenarios. The best part is, you are right and they are wrong. So no need to feel bad if they talk like that. Just ignore and move on but never leave learning.&lt;br&gt;Another big problem for working in frontend is, these conventional people think, they can do a better architecture in frontend too, just because they can use an ORM in backend. So all those frontend elegant solutions provided by modern stacks will be bent according to these guys to a point where the elegance becomes a pain for you as a frontend developer. They will talk that “we had done these before this way”. Common, that way is over, that time is gone. Now learn something from the modern stack developers and make an elegant backend. I have even seen, these backend guys mentoring ObjectiveC guys, how to do an iPhone Application architecture, without knowing the iOS environment. This is not specific to iOS, but any mobile platform in general. Web is not mobile and there are different considerations and architecture depending upon the platform. While the modern web stack has changed and you simply do not understand it, how you can mentor a mobile application developer! Talking of backends, these guys even think traditional databases are the best, no need to try any other. They even hesitate to try a NoSQL! Common! Thats backend, at least update yourelf there before coming to frontend. Ask any new modern stack web developer, they will blow your mind with the stuff like NoSQL to responsive web applications. Even the enterprise is shifting to modern stack, but these are people who hold on to the past.The end result is, everyone suffers. But again, if you are new to the scenario, then do not worry, they will learn from their mistakes and all these time you have to live with it. All these, for someone on top does not know how to deal with new technology.&lt;br&gt;My honest suggestion to all you people starting your career in web development is, learn from the web, there are plenty of brilliant tutorials and examples available online and move on. Better, if you can, shift to a company where they know, what they are doing, rather than what they used to do.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Understanding BackboneJS View Event, jQuery Event and trigger()</title>
      <link>https://saumya.github.io/ray/articles/34/</link>
      <pubDate>Fri, 18 Apr 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/34/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;The fun in working with &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is freedom. The library is so decoupled that, one can really do any kind of architecture for an application. This freedom will come in your way if you do not know what is happening behind. We will be focusing on ‘Event’ here.&lt;br&gt;Working with &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; often involves working with &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; too as a DOM manupilation library. When we work on HTML and DOM, in terms of &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; we are working on View. At this point we must understand, that this BackboneView can dispatch event and the DOM we are dealing with also is capable of dispatching event. The point to note here is event dispatched through &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; framework, does not bubble. Where as the default DOM events bubble. Well, since we generally work with &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; for DOM manupilation, events fired through &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; also has the same effect as DOM events, they bubble. Working with a &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; ViewObject, we deal with &lt;code&gt;el&lt;/code&gt; of the ViewObject. &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; also provides a &lt;code&gt;$el&lt;/code&gt; on each view. Take a note of this &lt;code&gt;$el&lt;/code&gt;, which is a &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; object.&lt;br&gt;Dispatching an Event in &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is done as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//somewhere inside the View&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;,{&lt;span class=&quot;string&quot;&gt;'data'&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;'myValue'&lt;/span&gt;});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The basic syntax for &lt;a href=&quot;http://backbonejs.org/#Events-trigger&quot;&gt;dispatching an event in BackboneJS&lt;/a&gt; is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;object.trigger(event, [*args]) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember that the &lt;code&gt;second parameter&lt;/code&gt; in the &lt;code&gt;trigger&lt;/code&gt; is &lt;code&gt;data&lt;/code&gt; to be passed to the event-handler. Registering the listener for the event will be as &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.listenTo(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.viewObject, &lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onMyEvent);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now writing a handler for this event will look as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//handler&lt;/span&gt;
onMyEvent: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;eventdata&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(eventdata);&lt;span class=&quot;comment&quot;&gt;//example: getting data from the event&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, we get the whole &lt;code&gt;data&lt;/code&gt; ( passed to the &lt;code&gt;trigger()&lt;/code&gt; method as second parameter ) , as the arguement to the handler. &lt;/p&gt;
&lt;p&gt;Now lets focus on the DOM event for the same scenario.
The dispatcher code will look as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$el.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;,{&lt;span class=&quot;string&quot;&gt;'data'&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;'myValue'&lt;/span&gt;});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, actually it seems that we are using &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; Event, but since we are dealing with &lt;code&gt;$el&lt;/code&gt;, we are actually &lt;a href=&quot;http://api.jquery.com/trigger/&quot;&gt;triggering a DOM event through jQuery&lt;/a&gt;. Since this is a DOM event, it has all the three phases in its life cycle; capture, target and bubble. So, we can really catch this event on a parent view of &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; and the code would be like &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;events: {
    &lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'onMyEvent'&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//this is actually listening to DOM event&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The handler code will look as &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;onMyEvent : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event,data&lt;/span&gt;)&lt;/span&gt;{
    event.preventDefault();
    &lt;span class=&quot;comment&quot;&gt;//code as required by application&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//But, see the second arguement is actually 'data', passed to 'trigger()'&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the difference in event handler here. We have now two arguements and the second arguement is the &lt;code&gt;data&lt;/code&gt; that is passed in to &lt;code&gt;trigger()&lt;/code&gt; call above.
All that is to it is, how you &lt;code&gt;trigger&lt;/code&gt; the event, from the two ways below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From the [BackboneJS] View&lt;/li&gt;
&lt;li&gt;From the DOM element     &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And then, writing a proper event-handler for the respective Event.     &lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;, sometimes you need to deal with situations, where you just want to listen for events without knowing the other Views. That way de-coupling the application. There is Mediator design pattern to do a central event dispatching system for the whole &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; application. Then there is this little but powerful thing, called bubbling, already available to native DOM.      &lt;/p&gt;
&lt;p&gt;Here are the links to the two trigger methods;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://api.jquery.com/trigger/&quot;&gt;jQuery trigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://backbonejs.org/#Events-trigger&quot;&gt;BackboneJS trigger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy Bubbling.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>jQuery and fixing AJAX cache for GET calls</title>
      <link>https://saumya.github.io/ray/articles/33/</link>
      <pubDate>Thu, 03 Apr 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/33/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;It will come to you very soon, if you are trying to develop any decent webapp or phonegap mobile app using &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;.     
The problem is, if we have the same &lt;code&gt;GET&lt;/code&gt; request multiple times, by default jQuery will cache the request. The end result is the response same as the first response!! Well, there is a setting in jQuery AJAX setup, where in we write &lt;code&gt;cache:false&lt;/code&gt; and that should work. Well, depending upon how the API is written on the server side, this call might not work! There are many reasons as to why it may not work, one simple reason is, to understand, how &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; behaves, when we set &lt;code&gt;cache:false&lt;/code&gt; as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; apiURL = &lt;span class=&quot;string&quot;&gt;&quot;my/api/server/URI&quot;&lt;/span&gt;;
$.ajax({
    &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;:apiURL,
    &lt;span class=&quot;attr&quot;&gt;cache&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;success&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
    },
    &lt;span class=&quot;attr&quot;&gt;error&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;{           
        &lt;span class=&quot;comment&quot;&gt;//            &lt;/span&gt;
    }   
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; will append &lt;code&gt;_={timestamp}&lt;/code&gt; to the GET parameters. Here is the &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;official documentation&lt;/a&gt; of the same. The service call will fail, if this extra parameter is not handled properly. A little workarround, fixed this for me, which is appending the timestamp mannually by hand instead of setting &lt;code&gt;cache: false&lt;/code&gt; in AJAX setup of &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;. The modified code looks as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeStamp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getTime();
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; apiURL = &lt;span class=&quot;string&quot;&gt;&quot;my/api/server/URI/&quot;&lt;/span&gt;+timeStamp;
$.ajax({
    &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;:apiURL,
    &lt;span class=&quot;comment&quot;&gt;//cache: false,//not needed now&lt;/span&gt;
    success:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
    },
    &lt;span class=&quot;attr&quot;&gt;error&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;{           
        &lt;span class=&quot;comment&quot;&gt;//            &lt;/span&gt;
    }   
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, that worked for me as my API end point was not handling ‘_’(underscore) properly, but could handle the extra parameters.&lt;br&gt;Depending upon the situations, find a right place and &lt;code&gt;add timestamp mannually&lt;/code&gt;, to fix the AJAX cache instead of setting it in the setup.     &lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Back to Lime (OpenFL)</title>
      <link>https://saumya.github.io/ray/articles/32/</link>
      <pubDate>Sat, 15 Mar 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/32/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Its almost 2 months, I did a project on &lt;a href=&quot;https://github.com/openfl/lime&quot;&gt;Lime&lt;/a&gt;(&lt;a href=&quot;http://www.openfl.org/&quot;&gt;OpneFL&lt;/a&gt;). Fortunately this weekend is the time and I started it. Well, first thing to mention is, there is a huge update to the whole tooling and many libraries of the &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;, Lime and OpenFL land. Allmost all the libs are updated.&lt;br&gt;Upon the develoment land on &lt;code&gt;mac&lt;/code&gt;, the first thing I noticed is, there is no need to type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;haxelib run openfl test neko
haxelib run lime test neko&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is just as simple as calling directly as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lime test neko&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yeah. Thats good start. I thought to document it here, as I have used to the commands on &lt;code&gt;mac&lt;/code&gt; and suddenly its changed (though changed for good), a note would be a point of reference in the future to refer to.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Migration checklist for Cordova(Phonegap) application from version 2.x to 3.x</title>
      <link>https://saumya.github.io/ray/articles/31/</link>
      <pubDate>Thu, 27 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/31/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;There might be chances that you are re-writing a project or simply maintainig an old codebase of a &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;(phonegap) application. In both the cases, its ideal to go for the lastest version of the library. Being said that, its not that straight forward to migrate a phonegap 2.x application to Phonegap 3.x. And if, the project uses a 1.x version of &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; with &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuerymobile&lt;/a&gt;, you might want to update that to 2.x too, which adds up to more confusion and work, than solution. I will be focusing on &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; rather than &lt;a href=&quot;http://phonegap.com/&quot;&gt;Phonegap&lt;/a&gt; here. Yes, they are different! They are supposed to be the same but there are differences.      &lt;/p&gt;
&lt;h3 id=&quot;here-is-a-checklist-to-keep-things-in-perspective&quot;&gt;Here is a checklist to keep things in perspective.&lt;/h3&gt;
&lt;h3 id=&quot;cordova&quot;&gt;Cordova&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get used to &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. Yes, thats now mandatory to use.&lt;/li&gt;
&lt;li&gt;Get used to &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; and &lt;a href=&quot;http://phonegap.com/&quot;&gt;Phonegap&lt;/a&gt;, they are different.&lt;/li&gt;
&lt;li&gt;Know the difference between &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; and &lt;a href=&quot;http://phonegap.com/&quot;&gt;Phonegap&lt;/a&gt;, at-least what they do internally.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_overview_index.md.html#Overview&quot;&gt;Read completely the getting started&lt;/a&gt; with &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Do not confuse with &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_overview_index.md.html#Overview_development_paths&quot;&gt;Web Project Dev&lt;/a&gt; work flow, if possible avoid it altogether.&lt;/li&gt;
&lt;li&gt;Start with &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_overview_index.md.html#Overview_development_paths&quot;&gt;Native Platform Dev&lt;/a&gt; workflow. This is the one, which is closer to the older version workflow.&lt;/li&gt;
&lt;li&gt;Do not use &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_cli_index.md.html#The%20Command-Line%20Interface&quot;&gt;CLI&lt;/a&gt; for creating project. You can download the &lt;a href=&quot;http://archive.apache.org/dist/cordova/&quot;&gt;whole archive for a version&lt;/a&gt; as you used to in the previous versions and still can create project with it.&lt;/li&gt;
&lt;li&gt;Get used to &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/plugin_ref_plugman.md.html#Using%20Plugman%20to%20Manage%20Plugins&quot;&gt;Plugman&lt;/a&gt; to manage plugins. Everything is now a plugin. That means, a default project created, is nothing more than a website. If you need to interact with a device, you have to add plugin. In &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_overview_index.md.html#Overview_development_paths&quot;&gt;Native Platform Dev&lt;/a&gt;, these are managed by &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/plugin_ref_plugman.md.html#Using%20Plugman%20to%20Manage%20Plugins&quot;&gt;Plugman&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For the first couple of trials, &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/plugin_ref_plugman.md.html#Using%20Plugman%20to%20Manage%20Plugins_installing_core_plugins&quot;&gt;add all the plugins&lt;/a&gt;. That will make the project, behave as the older version projects, where everything is set by default. The document to install plugin is misleading.     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Instead&lt;/code&gt; of&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plugman --platform --project --plugin org.apache.cordova.battery-status&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Use&lt;/code&gt;, the commands as below. The document is missing &lt;code&gt;--install&lt;/code&gt; from the command!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plugman --install --platform --project --plugin org.apache.cordova.battery-status&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The actual code will look as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plugman --install --ios --path/to/project/folder --plugin org.apache.cordova.battery-status&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Get used to &lt;code&gt;config.xml&lt;/code&gt;, &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/config_ref_index.md.html#The%2520config.xml%2520File&quot;&gt;for configuring the whole project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jquery-and-jquerymobile&quot;&gt;jQuery and jQueryMobile&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Update the &lt;a href=&quot;http://api.jquerymobile.com/jQuery.mobile.changePage/&quot;&gt;page change code&lt;/a&gt; to remove the deprecated one and use the new one.&lt;/li&gt;
&lt;li&gt;Update the event listener code from deprecated &lt;a href=&quot;http://api.jquery.com/live/&quot;&gt;live()&lt;/a&gt; to &lt;a href=&quot;http://api.jquery.com/on/&quot;&gt;on()&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Keep an eye on all the &lt;a href=&quot;http://api.jquery.com/category/deprecated/&quot;&gt;deprecated&lt;/a&gt; APIs of jQuery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That should make you compile your old project in the new code.&lt;/p&gt;
&lt;p&gt;Happy transitioning.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Book Review, jQuery UI 1.10-The User Interface Library for jQuery.</title>
      <link>https://saumya.github.io/ray/articles/30/</link>
      <pubDate>Sat, 22 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/30/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;There is no doubt that &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; is being in use for almost all the projects. But when it comes to making the UI, there are a lot many options in the name of frameworks or libraries. By any chance, if you happen to choose &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; to create your UI, then &lt;a href=&quot;http://www.packtpub.com/jquery-ui-1-10-user-interface-library/book&quot;&gt;this book&lt;/a&gt; is helpful.&lt;br&gt;&lt;a href=&quot;http://www.packtpub.com/jquery-ui-1-10-user-interface-library/book&quot;&gt;This book&lt;/a&gt; takes each of the components of &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; and describes about its customisation options in detail. Each chapter is dedicated to one of the components of the &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; library. So the book is lengthy but if you are getting started with the libray, then this is an advantage. The experienced ones also, will find its handy to get some tips.&lt;br&gt;All in all its a nice read and helpful, if you stick to &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; for the UI development. &lt;/p&gt;
&lt;p&gt;Happy reading.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Amazon S3, file system.</title>
      <link>https://saumya.github.io/ray/articles/29/</link>
      <pubDate>Wed, 19 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/29/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;I had my hands dirty for the first time, in last couple of days, with Amazon Simple Storage Service (S3). I was playing with the javascript SDK and getting to know the environment in general. The first impression is, it just stores the files and folders. But, digging deep inside and playing with its APIs, made me realise that its different than the traditional storage.&lt;br&gt;&lt;code&gt;Everything is just a pointer&lt;/code&gt;, well thats how I see it.&lt;br&gt;Amazon says, everything is a file. So that means a folder is a file with a different naming convention. Thats it, if you get that, then the API is straight forward. And I must say from the beginning of the computer era, one thing has been consistent and that is file system. Now, the way, new storage solutions are emerging, it’s not actually different from others’ offers, but definitely different from traditional file systems. The new era of the file systems or more generally we can say data storage systems are emerging and Amazon is no different in that regard. So, all in all, a new storage system with a very simple SDK is exciting.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>jQuery Mobile, making change page work.</title>
      <link>https://saumya.github.io/ray/articles/28/</link>
      <pubDate>Sat, 15 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/28/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;The &lt;a href=&quot;http://saumya.github.io/ray/articles/24/&quot;&gt;last post&lt;/a&gt; about the &lt;a href=&quot;http://saumya.github.io/ray/articles/24/&quot;&gt;change page&lt;/a&gt; API change of &lt;a href=&quot;http://jquerymobile.com&quot;&gt;jQuery Mobile&lt;/a&gt; tells you as to, how to change a page, in the &lt;a href=&quot;http://api.jquerymobile.com/jQuery.mobile.changePage/&quot;&gt;new API&lt;/a&gt;. I was hoping thats the only change, but there seems, some kind of fix necessary to make a page, change properly. I mean, there is this bug, where the page change actually does this. It goes to the page mentioned by the change page and then it comes back to the page again, from where it was moved. So the effect is, the page is not chaged at all and the user looks at a screen, where the application simply moves to another screen and comesback to the original screen.&lt;br&gt;For me the fix that worked is send &lt;code&gt;changeHash:true&lt;/code&gt; in the options object of the API.     &lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/saumya/9015917.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Amazon S3 Sync with NodeJS</title>
      <link>https://saumya.github.io/ray/articles/27/</link>
      <pubDate>Fri, 14 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/27/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is my first practical cross-platform desktop application written in &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. The application is a simple desktop client to upload the changed files in a folder automatically to a bucket in &lt;a href=&quot;http://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt;. The main components, which make this application, are     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;node-webkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/browser-intro.html&quot;&gt;Amazon S3 SDK for browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, there is a &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; module as well for the SDK, but I prefer to take it only browser way at the moment.     &lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/saumya/AmazonS3Sync&quot;&gt;source code&lt;/a&gt; is available here and to run it, get a copy of the &lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;node-webkit&lt;/a&gt; for your environment. And that makes a cross-platform application on &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;.     &lt;/p&gt;
&lt;p&gt;Currently the application keeps an eye on a folder, you specify. Once a file is changed in that folder, is automatically uploaded to the ‘bucket’ you specify in the beginning of the application. Note, currently it just uploads the files, which are changed. It does not upload a new file in the folder or any existing file.&lt;/p&gt;
&lt;p&gt;Happy synching.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>iOS, customising top and bottom bar inside UINavigationController</title>
      <link>https://saumya.github.io/ray/articles/26/</link>
      <pubDate>Thu, 13 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/26/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This may seem a difficult or simple task, depending upon what and how you want to do it.&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UINavigationController_Class/Reference/Reference.html&quot;&gt;UINavigationController&lt;/a&gt; is simply a controller to manage all the UIViewControllers inside it. Now, customising each and every &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt; could be done by code or InterfaceBuilder, depending upon what you want to achieve. We will be seeing here, as to how, to customise the Navigation bar (top bar) and the Tab bar (bottom bar) of the respective &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt;.     
These are the references to look for while customising &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt; through InterfaceBuilder.&lt;br&gt;Hide the Tab bar (bottom bar)     &lt;/p&gt;
&lt;iframe src=&quot;http://www.flickr.com/photos/saumyaray/12479138795/player/&quot; width=&quot;408&quot; height=&quot;477&quot; frameborder=&quot;0&quot; allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen&gt;&lt;/iframe&gt;     
The above setting is on the same [UIViewController][2].         
To display custom text on the back button in a UIViewController, look for the setting as below     
&lt;iframe src=&quot;http://www.flickr.com/photos/saumyaray/12476698994/player/&quot; width=&quot;500&quot; height=&quot;408&quot; frameborder=&quot;0&quot; allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen&gt;&lt;/iframe&gt;     
Just remember that the above setting is done on the `previous` [UIViewController][2] for the next [UIViewController][2], `its tricky` that way.     
Now the code reference for [UIViewController][2] is as below.          
&lt;script src=&quot;https://gist.github.com/saumya/8969920.js&quot;&gt;&lt;/script&gt;     



&lt;p&gt;Happy customising.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>iOS fragmentation and UI development</title>
      <link>https://saumya.github.io/ray/articles/25/</link>
      <pubDate>Wed, 12 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/25/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;It was not there 4 years back, when the iOS was just beginning its life. Whether you like it or not the truth is its fragmented now. There are all different versions of iOS, then different versions of the devices. These two itself bring a lot of different considerations, while developing for the platform now.&lt;br&gt;Its agreed that its less fragmented but then thats enough to bring in the pain to a frontend developer.&lt;br&gt;Now, to add to it, there are different device form factors. Starting with regular iPads, retina, air, mini, iphone, ipod touch and all have different specifications. So the point is, the XCode workflow allows one to &lt;code&gt;design&lt;/code&gt; for all different devices, that does mean &lt;code&gt;design is multiplied&lt;/code&gt; not &lt;code&gt;reduced&lt;/code&gt;. While its good and freedom to the UI designer, as a frontend developer one must keep an eye on all these form fragmentations.
Now the same code will produce, a different looking back button in an older iOS and a different looking one in the newer ones. The UI may hide some UI elements on a smaller heighted device and look perfect in a newer bigger iPhone/iPodTouch.&lt;br&gt;Thats doable but definitely increases time to implement UI, if its not designed, and well thought of, by people, who know what they are doing.&lt;br&gt;Happy designing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>jQuerymobile, changePage is deprecated as of 1.4.0, will be removed in 1.5.0.</title>
      <link>https://saumya.github.io/ray/articles/24/</link>
      <pubDate>Tue, 11 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/24/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is really going to break things, if someone is updating the library to latest version. This is a very frequently used function and chances are, that, in a mobile web application its being used everywhere. Lets remind ourselves again that &lt;code&gt;jQuery.mobile.changePage&lt;/code&gt; is &lt;code&gt;deprecated as of 1.4.0&lt;/code&gt; and &lt;code&gt;will be removed in 1.5.0&lt;/code&gt;.      
Now there are vaious ways to change page in a &lt;a href=&quot;http://jquerymobile.com&quot;&gt;jQuerymobile&lt;/a&gt; application. Here are the 3 options to do the page change in the new API.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;:mobile-pagecontainer&quot;&lt;/span&gt;).pagecontainer(&lt;span class=&quot;string&quot;&gt;&quot;change&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;, { options });
&lt;span class=&quot;comment&quot;&gt;//or&lt;/span&gt;
$.mobile.pageContainer.pagecontainer(&lt;span class=&quot;string&quot;&gt;&quot;change&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;, { options });
&lt;span class=&quot;comment&quot;&gt;//or&lt;/span&gt;
$(&lt;span class=&quot;string&quot;&gt;&quot;body&quot;&lt;/span&gt;).pagecontainer(&lt;span class=&quot;string&quot;&gt;&quot;change&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;, { options });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://api.jquerymobile.com/jQuery.mobile.changePage/&quot;&gt;Here is the official document for reference&lt;/a&gt;     &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Making desktop applications, using NodeJS.</title>
      <link>https://saumya.github.io/ray/articles/23/</link>
      <pubDate>Mon, 10 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/23/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;I am suprised to see, how big the javascript community has become! And specifically &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; has some serious people in its community. I was trying to do a desktop application in javascript and without searching in the internet, I started out to do it all over again! After a couple of days, out of curiosity, did a search in internet to find, that &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; has plenty of options to do the stuff.&lt;br&gt;Evaluating some options, I settled with &lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;Node-Webkit&lt;/a&gt;. For now the best 3 in my opinion are;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;Node-Webkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://appjs.com/&quot;&gt;AppJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hex.youdao.com/&quot;&gt;hex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I must say, &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; has already revolutionised the internet. If at all, you think of doing something, search for a &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; solution and its possible that the solution is already there.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>BackboneJS, making an event-dispatching Object.</title>
      <link>https://saumya.github.io/ray/articles/22/</link>
      <pubDate>Sat, 01 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/22/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Making Views, Collections and Models in &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is as simple as extending the raw &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MyView = Backbone.View.extend({});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Making a generic object and make it dispatch events is also kind of same, but then the syntax is a little different.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myUtilLib = _.extend({},Backbone.Events);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything else remains the same, but then, this little syntax change for an event dispatching object may come in your way, if you are new to &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;.     
Here is a detailed example of an utility class for &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/saumya/8755642.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Typography.</title>
      <link>https://saumya.github.io/ray/articles/21/</link>
      <pubDate>Fri, 31 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/21/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Like many other things, there are a lot of nice typography available, which are free to use. There is no hidden spying on you or hidden charges or anything hidden, in the name of free.&lt;br&gt;I would like to mention, the two types, which are used in the theme &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/elegant&quot;&gt;Elegant&lt;/a&gt; for &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt;.     &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.fontsquirrel.com/fonts/kaushan-script&quot;&gt;Kaushan Script&lt;/a&gt; and &lt;a href=&quot;http://www.fontsquirrel.com/fonts/TeX-Gyre-Adventor&quot;&gt;TeX Gyre Adventor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I found these fonts at &lt;a href=&quot;http://www.fontsquirrel.com/&quot;&gt;fontsquirrel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/elegant&quot;&gt;Elegant&lt;/a&gt; is a free as in air, theme, and encourage you to take it, hack it and use it, for whatever reason you may want it to use.     &lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Theme, Elegant.</title>
      <link>https://saumya.github.io/ray/articles/20/</link>
      <pubDate>Thu, 30 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/20/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Continuing to create themes, which are free of the dependencies, here is my next theme, &lt;code&gt;Elegant&lt;/code&gt;. I am definitenly in love with &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintesmith&lt;/a&gt;. My frequency of blogging has increased exponentially. I am releasing this &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/elegant&quot;&gt;theme&lt;/a&gt; at github in my &lt;a href=&quot;https://github.com/saumya/wintersmithThemes&quot;&gt;Wintersmith Themes&lt;/a&gt; repository. It adds some typography to the plain theme &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/simple&quot;&gt;Simple&lt;/a&gt;.      &lt;/p&gt;
&lt;p&gt;Its a free as in air, theme, and encourage you to take it, hack it and use it, for whatever reason you may want it to use.     &lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Theme, Simple.</title>
      <link>https://saumya.github.io/ray/articles/19/</link>
      <pubDate>Tue, 28 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/19/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;In order to get rid of the dependencies and make the site pure static, I re-wrote some of the CSS and font dependencies in the &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintesmith&lt;/a&gt;. I am releasing this &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/simple&quot;&gt;theme&lt;/a&gt; at github in my &lt;a href=&quot;https://github.com/saumya/wintersmithThemes&quot;&gt;Wintersmith Themes&lt;/a&gt; repository. The name of the theme is &lt;code&gt;Simple&lt;/code&gt;.      
Its a free as in air theme, and encourage you to take it, hack it and use it, for whatever reason you may want it to use.&lt;br&gt;This blog today is using &lt;code&gt;Simple&lt;/code&gt; theme as an example of, what it looks like to use this theme.&lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Git commit throws fatal error for line endings.</title>
      <link>https://saumya.github.io/ray/articles/18/</link>
      <pubDate>Mon, 27 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/18/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This comes to me in a regular basis, thought it would be nice, to keep a note to me and anyone else dealing with same.     &lt;/p&gt;
&lt;p&gt;The short answer to fix this is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config core.safecrlf warn&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are more descriptive answers available and &lt;a href=&quot;http://stackoverflow.com/questions/15467507/trying-to-commit-git-files-but-getting-fatal-lf-would-be-replaced-by-crlf-in&quot;&gt;here is a link to one of many solutions out there&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A theme for Indian republic day</title>
      <link>https://saumya.github.io/ray/articles/17/</link>
      <pubDate>Sun, 26 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/17/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Since I have the know how to theme my blog, here is the &lt;code&gt;Indian Republic Day&lt;/code&gt; theme. Its &lt;code&gt;Open source&lt;/code&gt; and available &lt;code&gt;at my github repository&lt;/code&gt; &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/indianRepublicDay&quot;&gt;here&lt;/a&gt;. I will be &lt;code&gt;sharing my themes&lt;/code&gt; for &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; at &lt;a href=&quot;https://github.com/saumya/wintersmithThemes&quot;&gt;this&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Happy republic day.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Getting started with Wintersmith themes</title>
      <link>https://saumya.github.io/ray/articles/16/</link>
      <pubDate>Sat, 25 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/16/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;I am getting more and more conversant with the &lt;a href=&quot;http://jade-lang.com&quot;&gt;Jade&lt;/a&gt; templating engine and &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt;. Which I hope, is, what was one of the intentions, of moving from &lt;a href=&quot;http://wordpress.org&quot;&gt;Wordpress&lt;/a&gt; to &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt;. Well, trying my hands on to customise the theme, I found its extemely easy to just add another CSS to the &lt;code&gt;layout&lt;/code&gt; template ie; &lt;code&gt;layout.jade&lt;/code&gt; and start putting in the styles there. It can not be simpler than this. The base style is taken from the style definition at &lt;code&gt;main.css&lt;/code&gt;. If you look at the &lt;code&gt;layout.jade&lt;/code&gt;, it will look something as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=&lt;span class=&quot;string&quot;&gt;'/css/main.css'&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are following this blog, I have mentioned previously how to configure &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; so as to make it working from any domain or subdomain. So the &lt;code&gt;layout.jade&lt;/code&gt; in my case, looks as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=locals.url+&lt;span class=&quot;string&quot;&gt;'/css/main.css'&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whatever the condition may be, whether you are using default settings or my settings, the point is, just add another CSS file(&lt;code&gt;theme.css&lt;/code&gt;) below the default CSS.
So the default setting will be as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=&lt;span class=&quot;string&quot;&gt;'/css/main.css'&lt;/span&gt;)
link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=&lt;span class=&quot;string&quot;&gt;'/css/theme.css'&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case, I am using a theme CSS file as &lt;code&gt;saumya.css&lt;/code&gt; and with my configuration change, it looks as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=locals.url+&lt;span class=&quot;string&quot;&gt;'/css/main.css'&lt;/span&gt;)
link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=locals.url+&lt;span class=&quot;string&quot;&gt;'/css/saumya.css'&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now do the customisation in the &lt;code&gt;theme.css&lt;/code&gt;.     &lt;/p&gt;
&lt;p&gt;Hope you understand &lt;code&gt;the best practice of overriding styles&lt;/code&gt; than manipulating directly the original CSS file.&lt;/p&gt;
&lt;p&gt;Happy theming.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Want excitement, work with Freshers or even younger.</title>
      <link>https://saumya.github.io/ray/articles/15/</link>
      <pubDate>Fri, 24 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/15/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;It is exciting to work with juniours and if you have never had an experience, try this. Which is highly recommended.&lt;br&gt;They can bring one or all of below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bring fresh ideas to the table.&lt;/li&gt;
&lt;li&gt;Bring in energy&lt;/li&gt;
&lt;li&gt;New ways of doing things&lt;/li&gt;
&lt;li&gt;Challenge the established&lt;/li&gt;
&lt;li&gt;Go the extra mile to prove it&lt;/li&gt;
&lt;li&gt;Can surprise you by solving something which you never have thought&lt;/li&gt;
&lt;li&gt;Bring in humanity&lt;/li&gt;
&lt;li&gt;Less logical and more intuitional&lt;/li&gt;
&lt;li&gt;Eager to learn     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, I can go on and on. But the thing is, you have to be careful. Like all seniors are not helpful, not all young ones have the qualities.&lt;br&gt;If you are a good mentor, then &lt;code&gt;make them conversant with the tools&lt;/code&gt; and &lt;code&gt;do not&lt;/code&gt; tell them, &lt;code&gt;how to do&lt;/code&gt;, at first. Ask them &lt;code&gt;what to do ?&lt;/code&gt;, you will be surprised by the results, they produce.     &lt;/p&gt;
&lt;p&gt;Happy Pair-Programming.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Phonegap, jQuery, jQueryMobile and AJAX caching</title>
      <link>https://saumya.github.io/ray/articles/14/</link>
      <pubDate>Thu, 23 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/14/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Developing for a fragmented landscape is not easy. Its even difficult, if you choose to use, a library or framework, which says &lt;code&gt;develop once and run everywhere&lt;/code&gt; or something like &lt;code&gt;it makes your application look like native&lt;/code&gt;.    
First thing first. With every new release, we have another step addition to test. Contrary to the belief that, the new Operating System is obviously capable of running the old running application, it adds one more fragment to the already fragmented landscape. So if you are a mobile developer, keep this in mind that &lt;code&gt;new OS, is a new test step&lt;/code&gt;. Well, lets add one more device to this equation. Lets just focus on &lt;code&gt;Apple&lt;/code&gt; devices, considering there &lt;code&gt;so called, minimum number of device types&lt;/code&gt;. An iDevice is suppose to run the latest vesion of the iOS. But in the development environment, you might not able to keep up with new device types or OS updates. And only this can break your application. So make sure, you have &lt;code&gt;latest device and latest OS&lt;/code&gt;. Ok, then test your application in this device, chances are your application &lt;code&gt;may run&lt;/code&gt; but chances are &lt;code&gt;it might not&lt;/code&gt; too. So the point is &lt;code&gt;search arround&lt;/code&gt; the internet from the beginning itself, if there are known problems with the exact &lt;code&gt;device and OS&lt;/code&gt; combination.&lt;span class=&quot;more&quot;&gt;           &lt;/p&gt;
&lt;p&gt;Now, just think to add up to more OS, and more devices to the equation. Think of Android and the Windows mobile, you can imagine the complexity.
Ok. Lets add a library to the equation. Now it becomes &lt;code&gt;device + OS + library&lt;/code&gt; and then different vesions of the library. The new versions of the library should run the old running code, but thats an expectation, not reality. So make sure, you have gone through the combined equation search too.&lt;br&gt;&lt;code&gt;And thats the start&lt;/code&gt;&lt;br&gt;Here is &lt;code&gt;just one of many&lt;/code&gt; examples. &lt;a href=&quot;http://cordova.com/&quot;&gt;Phonegap(Cordova)&lt;/a&gt; and &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; together caches the AJAX calls. Now, thats happening in iOS6 for me. But there are evidences that it happens on other  environments too.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12506897/is-safari-on-ios-6-caching-ajax-results&quot;&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sencha.com/forum/showthread.php?244076-PhoneGap-and-iOS-6-Ajax-calls-weirdness&quot;&gt;sencha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.einternals.com/blog/web-development/ios6-0-caching-ajax-post-requests&quot;&gt;ios6-0-caching-ajax-post-requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.grobmeier.de/android-does-not-fire-ajax-reqests-because-they-are-caches-ajax-requests-at-least-on-jquery-mobile-10072011.html#.UuE5CBC6bcs&quot;&gt;android issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://community.phonegap.com/nitobi/topics/avoid_android_application_caching_on_ajax_calls_option_cache_false&quot;&gt;phonegap forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It took me sometime to understand, what the problem is?! It was working fine with iOS 4 and 5! Well, here is the tip which solved it. Make the configuraton option of AJAX call in &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, so that the AJAX call is not cached (else default is cache).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;headers : { &lt;span class=&quot;string&quot;&gt;&quot;cache-control&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt; },&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete AJAX call will look somthing like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$.ajax({
&lt;span class=&quot;attr&quot;&gt;headers&lt;/span&gt; : { &lt;span class=&quot;string&quot;&gt;&quot;cache-control&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt; },
&lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;,
&lt;span class=&quot;attr&quot;&gt;success&lt;/span&gt; : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{}
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a &lt;a href=&quot;http://www.einternals.com/blog/web-development/ios6-0-caching-ajax-post-requests&quot;&gt;nice write up about how&lt;/a&gt; you configure &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; AJAX call, so that they are not cached.     &lt;/p&gt;
&lt;p&gt;Keep an eye and check serously for at leat these     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating system update&lt;/li&gt;
&lt;li&gt;Have not tested on this device before &lt;/li&gt;
&lt;li&gt;use of particualr library and frameworks (and the problem they bring)&lt;/li&gt;
&lt;li&gt;used library does not update to the new OS&lt;/li&gt;
&lt;li&gt;used library does not support this device
It goes on and on. The matter of fact is, you can not ignore testing it in all the devices and OSs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy fixing.      &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Author details on Wintersmith</title>
      <link>https://saumya.github.io/ray/articles/13/</link>
      <pubDate>Wed, 22 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/13/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is probably exciting and why I moved, to &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt;. Part of the blogging itself, is learning the engine and the &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade template engine&lt;/a&gt;.      &lt;/p&gt;
&lt;p&gt;Here is a tip to configure the author name.      &lt;/p&gt;
&lt;p&gt;With every blog post, there is an author name, below the title, which reads as “written by author”. This comes from the blog itself as you probably know already. Thats fine and thats the default behaviour. If one needs to change it and which could be changed, here is the thing.      &lt;/p&gt;
&lt;p&gt;The details are populated from the &lt;code&gt;authors&lt;/code&gt; folder. The &lt;code&gt;author&lt;/code&gt; name specified in the blog meta data,ie; the top section, when writing the blog, is mapped to a file with the &lt;code&gt;same name as author&lt;/code&gt;. So the file name is &lt;code&gt;author.json&lt;/code&gt; in the &lt;code&gt;authors&lt;/code&gt; folder, where &lt;code&gt;author&lt;/code&gt; is specified in the blog meta-data. If it finds the file, then the &lt;code&gt;author name&lt;/code&gt; below the &lt;code&gt;title&lt;/code&gt; of the post is updated with the new data from the file and an email link is attached with it which is also taken from the &lt;code&gt;.json&lt;/code&gt; file. This is interesting, if it does not find the file, simply the autor name from the blog meta data, is put out in the blog, without the email link.      &lt;/p&gt;
&lt;p&gt;Happy hacking.      &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Experience with Parse</title>
      <link>https://saumya.github.io/ray/articles/12/</link>
      <pubDate>Tue, 21 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/12/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;This is the &lt;code&gt;first time&lt;/code&gt;, I worked with &lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt; and must say its a nice to have tool for any web developer. &lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt; minimises the task a lot in terms of backend and hosting.&lt;br&gt;&lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt; has a lot of options to choose from and one can choose to use the only required ones.&lt;br&gt;Well, I started of with hosting only, for one of my &lt;a href=&quot;http://facebook.com/&quot;&gt;Facebook&lt;/a&gt; applications. They even have a SDK to integrate the &lt;a href=&quot;http://facebook.com/&quot;&gt;Facebook&lt;/a&gt; SDK with them. I have not yet implemented their SDK yet, but docs show its simplicity of use.&lt;br&gt;I have started working on a &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; application integrating &lt;a href=&quot;http://facebook.com/&quot;&gt;Facebook&lt;/a&gt; and hosting in &lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt;. That went quite smooth. Actually &lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt; &lt;code&gt;has extended&lt;/code&gt; &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; to provide another SDK of their own to create frontend applications.&lt;br&gt;Happy coding.      &lt;/p&gt;
</description>
    </item>
    <item>
      <title>BackboneJS, view and its events</title>
      <link>https://saumya.github.io/ray/articles/11/</link>
      <pubDate>Mon, 20 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/11/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Working in &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is fun and easy to begin with. Slowly but steadily it gets complicated as we move on and add more to the project. Being said that, &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is not at all opinionated. So there is no rightway of doing something. If your solution works for your project, then its good to go. Well, then there are certain things, which may help you, better organise your code. One of such things is &lt;code&gt;View Events&lt;/code&gt;.     
In a Backbone view, to listen to events and handle them, the general syntax is as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;events:{
        &lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;onClick&quot;&lt;/span&gt;
        },
&lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;//Do something with the event&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//or&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//specifically do it for a target&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; btnID = event.target.id;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(btnID===&lt;span class=&quot;string&quot;&gt;'btn_one'&lt;/span&gt;){
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'TODO:'&lt;/span&gt;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, it may be easier at first, but we are listening for events for the whole view and then in the handler checking it. There is a way in &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; that directly and listens for events for that particular target. The code looks as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;events:{
        &lt;span class=&quot;string&quot;&gt;&quot;click #btn_one&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;onClick&quot;&lt;/span&gt;
        },
&lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;//btn_one is clicked&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//Do something with the event&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy coding.      &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Distribute iOS app on your web site</title>
      <link>https://saumya.github.io/ray/articles/10/</link>
      <pubDate>Wed, 15 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/10/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Its not that difficult as it sounds.&lt;br&gt;First of all, there are distribution services out there. I am not going to name them here, but they are available. A simple web search will show you that. 
Now, the question is, how do they do it, or the more significant question is, can we do it ourselves. The answer is yes.
There are 3 basic things required for distribution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.ipa file ( iOS app )&lt;/li&gt;
&lt;li&gt;.plist file ( manifest file for the app )&lt;/li&gt;
&lt;li&gt;.html file ( html file for showing the link to the user )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The iOS app must be compiled with the Ad-HOC distribution certificate with the device(where the app will be installed) UDIDs included. Thats the same procedure, as one would follow, while distributing through other stores. Once its compiled, you say &lt;code&gt;Archive for distribution&lt;/code&gt; in XCode, which will create the &lt;code&gt;.ipa&lt;/code&gt; file. The manifest file defines the application meta data, if you go through the manifest file below, there is a place to point to the &lt;code&gt;.ipa&lt;/code&gt; file, make sure, you provide &lt;code&gt;full URL to .ipa&lt;/code&gt; file. The download link on HTML file will point to this manifest file. Here is the boilerplate for a typical manifest file (which is a .plist file). The HTML file, is simply  having a link pointing to the &lt;code&gt;.plist&lt;/code&gt; file.     &lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/saumya/8440357.js&quot;&gt;&lt;/script&gt;     
&lt;p&gt;Now simply link to the plist file in the HTML file as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;a href=&amp;quot;itms-services://?action=download-manifest&amp;amp;url=https://myServer/iOS-dist/iOSAppDist.plist&amp;quot; class=&amp;quot;button&amp;quot;&amp;gt;Install My App&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now visit the URL through iPhone, where your HTML file is stored. Once you click the link, it will download and install the iOS app.&lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HTML5, requestAnimationFrame</title>
      <link>https://saumya.github.io/ray/articles/9/</link>
      <pubDate>Tue, 14 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/9/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Making a javascript application, at somepoint, involves use of &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; functions. Well, the possibility increases even more, when one needs to animate elements. So we know what it means to use these two functions.&lt;br&gt;Fortunately we have a new method, called &lt;code&gt;requestAnimationFrame()&lt;/code&gt;, which is elegant and effective. Now animations will not eat up mobile battery life, but still be smooth. This is optimised to takecare of the host environment, such as mobile browser, desktop browser etc. It even minimises the repeat call, if the application using it, is not visible or scrolled out of view, sweet.&lt;br&gt;&lt;a href=&quot;http://caniuse.com/requestanimationframe&quot;&gt;Check, which browsers and versions support this function,&lt;/a&gt; just to make yourself clear.&lt;br&gt;Here are few links which explain &lt;code&gt;requestAnimationFrame&lt;/code&gt; function in more detail.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/window.requestAnimationFrame&quot;&gt;mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/&quot;&gt;Paul Irish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://creativejs.com/resources/requestanimationframe/&quot;&gt;Creative JS&lt;/a&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Its kind of &lt;code&gt;saying bye bye&lt;/code&gt; to &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt;.    
Happy Animating.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Native Android development and getting Key Hash for Facebook</title>
      <link>https://saumya.github.io/ray/articles/8/</link>
      <pubDate>Mon, 13 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/8/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;If you are developing for native Android, and creating a Facebook login, then the fist thing which will come to you, is a setting on Facebook console called “Key Hashes”.&lt;/p&gt;
&lt;span class=&quot;more&quot;&gt;

&lt;p&gt;While trying to do the Facebook suggested way, I lost some time and could not really get it working perfectly. Searching the internet told me that people had been in that path and that the solution is not working. Well, then I got a script to get the hash key. Finally this worked for me, all the time. So quickly I wrapped it in a function and put it here for anyone trying to fight the “key hash”.    &lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/saumya/8399013.js&quot;&gt;&lt;/script&gt;    

&lt;p&gt;Now, all that remains is, put this function on the first activity of your Android project and call the function with your package name as a string arguement on the onCreation method. That will print out the hash key on logCat window. Just copy-paste that code in Facebook console. Then you can remove that call to the function.    &lt;/p&gt;
&lt;p&gt;Happy Hacking ! &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wintersmith configuration</title>
      <link>https://saumya.github.io/ray/articles/7/</link>
      <pubDate>Sun, 12 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/7/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;&lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; is perfect on creating a static site, but the problem arises when one needs to configure it to meet a particular need. I think, thats true for any framework.&lt;br&gt;The problem I encountered is, putting the static blog in any domain or sub-domain. &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; generates urls which are default to root &lt;code&gt;/&lt;/code&gt; and to change it to any domain means one has to change it to the domain one wishes to put the site on. Thats as simple as that. Well, for most parts. Then, there are places where it creates a relative URL.    &lt;/p&gt;
&lt;p&gt;To solve this, I looked inside the templates and configuration. &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; reads from the &lt;code&gt;config.json&lt;/code&gt; file to get the base URL and make the other URLs. So I changed the &lt;code&gt;url&lt;/code&gt; to my desired URL and added another parameter to the &lt;code&gt;locals&lt;/code&gt; object of the &lt;code&gt;config.json&lt;/code&gt; named &lt;code&gt;folder&lt;/code&gt;, Then changed the URL in templates, from &lt;code&gt;/&lt;/code&gt; to &lt;code&gt;locals.url&lt;/code&gt; and at some places to &lt;code&gt;locals.url+&amp;#39;/&amp;#39;+locals.folder&lt;/code&gt; and thats it. Its now perfectly alright to take my site to wherever I want. All I need to do is change these variables and build the site again with &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; build command.&lt;br&gt;Is this the rightway? Well, seriously I do not know, but it works.   &lt;/p&gt;
&lt;p&gt;Happy Hacking ! &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Finally added Disqus</title>
      <link>https://saumya.github.io/ray/articles/5/</link>
      <pubDate>Sat, 11 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/5/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;The final technical integration to &lt;code&gt;make the blog a conversation&lt;/code&gt; engine, is done. Can not imagine how far the blogging has come and how easy now it is to setup things. Yes can feel the new internet now. Remembering the back days, when I created a static HTML page and served through internet. Its a full circle now. Though the generation of the static pages are automated, but the thing is we are back to decentralised internet.&lt;/p&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The technology choice of the blog.</title>
      <link>https://saumya.github.io/ray/articles/6/</link>
      <pubDate>Sat, 11 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/6/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;First question to answer is &lt;code&gt;why I moved to a static page solution?&lt;/code&gt;, there are a lot of answers to this.
Here is a nice writeup by David Tucker. &lt;a href=&quot;http://davidtucker.net/articles/move-to-static-site-generator/&quot;&gt;The Need for a Static Site Generator.&lt;/a&gt;&lt;br&gt;Now, since we know a static page site is the need of the time, the technology choice is important too. Obviously the first thing, that comes to mind is &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, yeah, its simple and just works. Being in MAC, its even tempting to use &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, as &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; comes installed with the OS. Further more &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; support is in-built with &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages&quot;&gt;GitHub Pages&lt;/a&gt;. It could have been as simple as that.&lt;br&gt;I choose Javascript as the language of choice, since its exciting now, what we could do with it, so this blog would be one of my playgrounds for the work I do. I have already getting more and more familiar with &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt; templating engine and &lt;a href=&quot;http://nodejs.org/&quot;&gt;nodeJS&lt;/a&gt; workflows, &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;wintersmith&lt;/a&gt; is such a nice engine which works on &lt;a href=&quot;http://nodejs.org/&quot;&gt;nodeJS&lt;/a&gt;. Just the matter of time, as how far Javascript has come!   &lt;/p&gt;
&lt;p&gt;Happy Coding&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The wait is over.</title>
      <link>https://saumya.github.io/ray/articles/3/</link>
      <pubDate>Fri, 10 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/3/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;After a week of searching, studying and re-searching things, finally landed up with this.
Well, there is not much to &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;wintersmith&lt;/a&gt;, it 10 mins job at max if someone has a little experience in NodeJS.The main delay for me was to trying to produce a static site out of my old blog, which was running in &lt;a href=&quot;http://wordpress.org/&quot;&gt;WordPress&lt;/a&gt; eninge.&lt;/p&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Its moved to github now.</title>
      <link>https://saumya.github.io/ray/articles/4/</link>
      <pubDate>Fri, 10 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/4/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;Do you notice ?! Now this blog is served from Github itself. The publishing was never excicting as this.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;How it works?&lt;/code&gt; Git commit and the post is out there.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Finally, a static site !</title>
      <link>https://saumya.github.io/ray/articles/1/</link>
      <pubDate>Tue, 07 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/1/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;&lt;code&gt;Why?&lt;/code&gt; Thats for learning.&lt;/p&gt;
&lt;span class=&quot;more&quot;&gt;

&lt;p&gt;&lt;code&gt;What?&lt;/code&gt; Life. Javascript, NodeJS, Express, Jade, Sass, Grunt and the list goes on.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It&amp;#39;s learning till the end.&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;so-why-wait-&quot;&gt;So why wait ?!&lt;/h2&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube-nocookie.com/embed/nql49wrkURY?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;code&gt;Thank you&lt;/code&gt; so much for stopping by.&lt;/p&gt;
&lt;p&gt;Lets get started.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Thanking wordpress.</title>
      <link>https://saumya.github.io/ray/articles/2/</link>
      <pubDate>Tue, 07 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">https://saumya.github.io/ray/articles/2/</guid>
      <author>Saumya</author>
      <description>&lt;p&gt;&lt;code&gt;Why?&lt;/code&gt; Thats for being there as a very solid option for blogging.&lt;/p&gt;
&lt;span class=&quot;more&quot;&gt;

&lt;p&gt;Its a pleasure to use &lt;a href=&quot;http://wordpress.org&quot;&gt;Wordpress&lt;/a&gt; for such along time. In fact its the reason I started into blogging. I have a &lt;a href=&quot;http://saumyaray.wordpress.com/&quot;&gt;Wordpress&lt;/a&gt; hosted blog till now too. 
This blog was using Wordpress as its blogging engine from 2010 and thats a beautiful engine, I must say.&lt;/p&gt;
&lt;p&gt;The reason I moved this to &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; is, I want to focus on javascript environment now, the same reason was there, with Wordpress. 
I was focusing on PHP and MySql, those days. So its not that Wordpress is bad but seriously speaking Wordpress is now far beyound a blogging platform.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>