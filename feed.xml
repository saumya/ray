<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Saumya</title>
    <atom:link href="http://saumya.github.io/ray/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://saumya.github.io/ray</link>
    <description>Where there is a will, there is a way.</description>
    <pubDate>Sun, 18 Jan 2015 05:30:00 +0630</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>HAXE and NodeJS</title>
      <link>http://saumya.github.io/ray/articles/50/</link>
      <pubDate>Sun, 18 Jan 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/50/</guid>
      <author></author>
      <description>&lt;p&gt;Continuing the sudy of javascript target of &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; we will focus on &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; this time. Before we move on, lets remind ourselves the things to expect from the &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; toolchain by going through the previous two introductions, here is the &lt;a href=&quot;http://saumya.github.io/ray/articles/47/&quot;&gt;first&lt;/a&gt; and the &lt;a href=&quot;http://saumya.github.io/ray/articles/48/&quot;&gt;second&lt;/a&gt; post.&lt;br&gt;Thats about &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;, now a little about &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. In &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; the concept of modules is very common to make some re-usable code. In general, modules hide everything by default. In class based languages we can call them as &lt;code&gt;private&lt;/code&gt; elements. To make something &lt;code&gt;public&lt;/code&gt; , we have to use &lt;code&gt;exports&lt;/code&gt; keyword in &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;.           &lt;/p&gt;
&lt;p&gt;For example, if we have a file names &lt;code&gt;one.js&lt;/code&gt; as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;exports.publicFunction = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  console.log(&lt;span class=&quot;string&quot;&gt;'Hello World'&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, in &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;, we can write something as          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; oneObj = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./one'&lt;/span&gt;);
oneObj.publicFunction();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats first kind of modules we have. There is another kind of modules in &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;, where instead of exposing each individual elements from the modules, it exposes a &lt;code&gt;Constructor&lt;/code&gt; function. This is done with &lt;code&gt;module.exports&lt;/code&gt; in stead of only &lt;code&gt;exports&lt;/code&gt;.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;module.exports.MyObjConstructor = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  console.log(&lt;span class=&quot;string&quot;&gt;'New Object'&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This second one is looked at as classical concepts of programming ,where each JS file is kind of a Class file.&lt;br&gt;The dynamic and fun nature of javascript allows us to use the first way of exposing individual elements to actually expose a constructor function too. Is not it ?! Why we think about that! Because &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; generated javascript is actually doing that. Smart.&lt;br&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;br&gt;Now, lets focus back in &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; and here is the companion &lt;a href=&quot;https://github.com/saumya/HAXENode&quot;&gt;Github project&lt;/a&gt;. We have three classes in &lt;code&gt;.hx&lt;/code&gt; as Animal, Jungle and Tree. But only Animal class is exposed by using &lt;code&gt;@:expose&lt;/code&gt; just before the class declaration as           &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haxe&quot;&gt;@:expose(&amp;quot;Animal&amp;quot;)
class Animal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The application entry class &lt;code&gt;ApplicationEntry.hx&lt;/code&gt; is actually using all these classes. Finally, we have the &lt;code&gt;.hxml&lt;/code&gt; file, we name it &lt;code&gt;compile.hxml&lt;/code&gt;, but could be given any name, to compile our application. Here is the code for quick reference.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haxe&quot;&gt;# Generates one single application JS
-main ApplicationEntry
-js bin/hxApp.js
#
--next
# Generates JS file for individual hx files
-js bin/Tree.js 
-cp src 
com.jungle.Tree
--next
-js bin/Animal.js 
-cp src 
com.jungle.Animal
--next
-js bin/Jungle.js 
-cp src 
com.jungle.Jungle
#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we run the &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; compiler with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haxe&quot;&gt;haxe compile.hxml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It generates a file with the name &lt;code&gt;hxApp.js&lt;/code&gt;, which is enough for the &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; experiements. But we have the other generted JS files just to see, what actually &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; is outputting. If you look at the &lt;code&gt;Animal.js&lt;/code&gt; its actually getting exported as &lt;code&gt;exports.Animal&lt;/code&gt; and thats exactly what we need to use as a &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; module.&lt;br&gt;Lets write a simple &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application. Get into our &lt;code&gt;bin&lt;/code&gt; folder, where all the &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; compiled JS files are. There we create a node application as &lt;code&gt;nodeApp.js&lt;/code&gt; and the content of the file is &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./hxApp.js'&lt;/span&gt;);
console.log(app);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to run the &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application, do this in commandline&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;node nodeApp.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see now all the logs in the commadline, which is actually being run from the application we generated from &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;. This is &lt;code&gt;the way&lt;/code&gt; &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; can be &lt;code&gt;used best&lt;/code&gt;. Do all the code in &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; and finally output to a single application javascript file. Then use the application file to launch the application.&lt;br&gt;Now, lets see what else we can do with the generated code. If you remember we have exposed the ‘Animal’ class with &lt;code&gt;@:expose&lt;/code&gt;. Lets modify our ‘nodeApp.js’ as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./hxApp.js'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; animal_1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; app.Animal(&lt;span class=&quot;string&quot;&gt;'CAT'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);
console.log(animal_1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application with the same command as &lt;code&gt;node nodeApp.js&lt;/code&gt;, this time if you look at the application log on the command promt, its actually created a new ‘Animal’. The fun has just begun, I hope. Well, we can go on modifying our code to look it more beautiful. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./hxApp.js'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; animal_1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; app.Animal(&lt;span class=&quot;string&quot;&gt;'CAT'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);
console.log(animal_1);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Animal = app.Animal; &lt;span class=&quot;comment&quot;&gt;// Store the Constructor&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; animal_2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Animal(&lt;span class=&quot;string&quot;&gt;'Tiger'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// And use it&lt;/span&gt;
console.log(animal_2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a goodlooking constructor for ‘Animal’ in the name of ‘Animal’ now.&lt;/p&gt;
&lt;p&gt;Thats all is happening from the only one generated Javascript file that is the final application javascript file. Lets see, what else we can do! If you remember we have actually generated all the resepective javascript files for individual &lt;code&gt;.hx&lt;/code&gt; files. This time, lets forget our final or application javascript file. Lets modify our &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application file by removing everything else from it and adding the following code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./Animal'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; o.Animal(&lt;span class=&quot;string&quot;&gt;'Cat'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// Directly using constructor&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Animal = o.Animal;&lt;span class=&quot;comment&quot;&gt;//storing the constructor&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Animal(&lt;span class=&quot;string&quot;&gt;'Tiger'&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//using constructor&lt;/span&gt;
console.log(c);
console.log(a2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application from command line as before. Sweat! That works too!         &lt;/p&gt;
&lt;p&gt;Well, we now are ready for primetime &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application using &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; toolchain. The reference application and haxe code is at &lt;a href=&quot;https://github.com/saumya/HAXENode&quot;&gt;this repo on Github&lt;/a&gt;.       &lt;/p&gt;
&lt;p&gt;To summerise all this, we can create a final javascript output and use it to launch our &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; application. We can also just compile each &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; file to respective javascript file and use that as a module for our application.         &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Dojo Toolkit, require and events.</title>
      <link>http://saumya.github.io/ray/articles/49/</link>
      <pubDate>Wed, 14 Jan 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/49/</guid>
      <author></author>
      <description>&lt;p&gt;Well, lets say this, if you are working on &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt;, you are working on a legacy application. Since &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; is releasing its newer versions, you need to change your application to newer codebase. Currently &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; is leveraging &lt;a href=&quot;http://requirejs.org/docs/whyamd.html#amd&quot;&gt;AMD&lt;/a&gt; for modules and Javascript files. Which is very new for this toolkit and veteran developers in this toolkit may find its very different.          &lt;/p&gt;
&lt;p&gt;Previously, when we needed some JS code, its simply done by making a ‘require’ call.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;dojo.require(&lt;span class=&quot;string&quot;&gt;&quot;dojo.string&quot;&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;//then use it&lt;/span&gt;
dojo.string.trim(&lt;span class=&quot;string&quot;&gt;&quot;  I Like Trim Strings &quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it looks as          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;dojo/string&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dojo/domReady!&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;{&lt;/span&gt;
  string.trim(&lt;span class=&quot;string&quot;&gt;&quot;  I Like Trim Strings &quot;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that may seems fine now, but then what happens when we need something inside that &lt;code&gt;require&lt;/code&gt; itself? Actually, its simpler than it seems, we can have &lt;code&gt;require&lt;/code&gt; inside another require too.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;dojo/domReady!&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//DOM is ready, load another module&lt;/span&gt;
    &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;dojo/string&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;{&lt;/span&gt;
      string.trim(&lt;span class=&quot;string&quot;&gt;&quot;  I Like Trim Strings &quot;&lt;/span&gt;);
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats nice. Here &lt;a href=&quot;http://dojotoolkit.org/reference-guide/1.7/dojo/require.html&quot;&gt;is the official documentation&lt;/a&gt;. The introduction to &lt;a href=&quot;http://dojotoolkit.org/documentation/tutorials/1.10/modern_dojo/&quot;&gt;modern dojo&lt;/a&gt; is here.&lt;br&gt;Another nice utility is &lt;a href=&quot;http://dojotoolkit.org/reference-guide/1.10/dojo/topic.html&quot;&gt;topic&lt;/a&gt;. This is kind of central event dispatching and listening station. All one has to do is, dispatch events through &lt;a href=&quot;http://dojotoolkit.org/reference-guide/1.10/dojo/topic.html&quot;&gt;topic&lt;/a&gt; and listen through it too. These are called &lt;code&gt;publish&lt;/code&gt; and &lt;code&gt;subscribe&lt;/code&gt; of events.          &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;dojo/topic&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(topic)&lt;/span&gt;{&lt;/span&gt;
    topic.subscribe(&lt;span class=&quot;string&quot;&gt;&quot;some/topic&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arguments)&lt;/span&gt;{&lt;/span&gt;
        console.log(&lt;span class=&quot;string&quot;&gt;&quot;received:&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);
    });
    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;
    topic.publish(&lt;span class=&quot;string&quot;&gt;&quot;some/topic&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other kind of events are DOM events and &lt;a href=&quot;http://dojotoolkit.org/reference-guide/1.10/dojo/on.html#dojo-on&quot;&gt;they are handled with the ‘on’&lt;/a&gt; module.          &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HAXE JS 102</title>
      <link>http://saumya.github.io/ray/articles/48/</link>
      <pubDate>Mon, 12 Jan 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/48/</guid>
      <author></author>
      <description>&lt;p&gt;We are going good with &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;, take a moment to go through the official &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; documentation.&lt;br&gt;This is a follow-up post to the &lt;a href=&quot;http://saumya.github.io/ray/articles/47/&quot;&gt;Haxe JS 101&lt;/a&gt;. Its all about setting up the expectations from the language and the tool chain. Lets make some more things clear about the tooling and how the language works.          &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; will produce one single JS file&lt;/li&gt;
&lt;li&gt;We can force it to create one JS file for one .hx file&lt;/li&gt;
&lt;li&gt;The created JS file, is by no means is a module JS file as in CommonJS or AMD          &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The contents of &lt;code&gt;.hxml&lt;/code&gt; or the build file generally looks as        &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haxe&quot;&gt;-main ApplicationEntry
-js app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While forcing each &lt;code&gt;.hx&lt;/code&gt; file for an individual &lt;code&gt;.js&lt;/code&gt; file, the build file would contain something as         &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haxe&quot;&gt;-js com/jungle/Tree.js 
-cp src 
com.jungle.Tree
--next
-js com/jungle/Animal.js 
-cp src 
com.jungle.Animal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a sample project and the options, have a look at &lt;a href=&quot;https://github.com/saumya/HAXE-JS101&quot;&gt;this repo&lt;/a&gt; and the &lt;a href=&quot;https://github.com/saumya/HAXE-JS101/blob/master/compile.hxml&quot;&gt;sample .hxml&lt;/a&gt; file is here with all the possible options for &lt;code&gt;.js&lt;/code&gt; output.          &lt;/p&gt;
&lt;p&gt;The important thing is to remember that finally every JS project is compiled to a single JS file and &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; does it in one go. It does not provide module export or any fancy things that other JS frameworks do to support JS look like a classical programming language. &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; works with its own tool chain and provides well made JS output. Do not fight it to mock JS libraries, &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; is more powerful than that. Even for NodeJS output, &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; produces the final JS output, just a single &lt;code&gt;.js&lt;/code&gt; file. Work with &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; packages and classes and then compile it to make the final output, no nothing in between.&lt;/p&gt;
&lt;p&gt;Happy Haxing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HAXE JS 101</title>
      <link>http://saumya.github.io/ray/articles/47/</link>
      <pubDate>Mon, 05 Jan 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/47/</guid>
      <author></author>
      <description>&lt;p&gt;Hope you know what is &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;, take a moment to go through the official &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; documentation. We will discuss how and what to consider while working with JS in &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;.&lt;br&gt;Generally other languages, which compile to JS, actually compile each specific file to a respective JS file. &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; actually compiles to one single JS file for our application. We can further take the generated JS file and minify it using popular JS minifiers.        &lt;/p&gt;
&lt;p&gt;The work flow for &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; to JS is as simple as         &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing the normal &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; application&lt;/li&gt;
&lt;li&gt;Use the package structure and class as usual&lt;/li&gt;
&lt;li&gt;Make a .hxml file difining what would be the final JS file&lt;/li&gt;
&lt;li&gt;Compile with &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; compiler to produce the JS file         &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haxe&quot;&gt;haxe compile.hxml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.hxml&lt;/code&gt; file looks something like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-haxe&quot;&gt;-main ApplicationEntry
-js app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats all to it. &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt; will take care of the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;package&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; of the application. Finally the generted JS file is having everything our application needs. Include the JS file in the required HTML file and we are done.      &lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&quot;https://github.com/saumya/HAXE-JS101&quot;&gt;sample basic application&lt;/a&gt; showing all there is to it.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cake and Coffee</title>
      <link>http://saumya.github.io/ray/articles/46/</link>
      <pubDate>Thu, 01 Jan 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/46/</guid>
      <author></author>
      <description>&lt;p&gt;While working with &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt;, we generally tend to do the following,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write something in a .coffee file&lt;/li&gt;
&lt;li&gt;compile that file with coffee compiler to .js file         &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, if we are a little smarter, then use the following command to compile all the .coffee files in a particular folder to respective .js file in another folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-coffeescript&quot;&gt;coffee --compile --output outputFolder/ inputFolder/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That may seem enough now, but actually there are a lot of things we could automate. The native way to do this in &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; is called &lt;code&gt;Cake&lt;/code&gt;. We can look at it as a build system. Nice thing about this is, we can write every instruction in &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; itself.         &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cake is an utility comes with &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;its a task runner or build system&lt;/li&gt;
&lt;li&gt;all the instructions are saved in a file with name &lt;code&gt;Cakefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cakefile&lt;/code&gt; is the file name and there is no extension to it&lt;/li&gt;
&lt;li&gt;Everything inside the &lt;code&gt;Cakefile&lt;/code&gt; is a &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; expression         &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To run the &lt;code&gt;Cake&lt;/code&gt; task runner, navigate to the folder, where our &lt;code&gt;Cakefile&lt;/code&gt; is residing and fire up the command as below.        &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-coffeescript&quot;&gt;cake
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will display all the tasks available in that file to be run. To run a specific task, run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-coffeescript&quot;&gt;cake taskName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While defining tasks, we can make a relation between tasks. That means we can say taskOne is dependent on taskTwo. The &lt;a href=&quot;https://github.com/saumya/CoffeeScript101&quot;&gt;basics of CoffeeScript project&lt;/a&gt; has a Cakefile for reference.        &lt;/p&gt;
&lt;p&gt;The direct link to the sample &lt;code&gt;Cakefile&lt;/code&gt; &lt;a href=&quot;https://github.com/saumya/CoffeeScript101/blob/master/Cakefile&quot;&gt;is here&lt;/a&gt;. All the code are commented for easy reference.       &lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CoffeeScript basics</title>
      <link>http://saumya.github.io/ray/articles/45/</link>
      <pubDate>Thu, 01 Jan 2015 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/45/</guid>
      <author></author>
      <description>&lt;p&gt;Just to set the expectations right, we need to know something before we begin here.         &lt;/p&gt;
&lt;p&gt;When I first heard about &lt;code&gt;Class&lt;/code&gt; in &lt;code&gt;Javascript&lt;/code&gt; it created curiosity on me and the expectation increased as to work like a &lt;code&gt;Classical&lt;/code&gt; language(Where Classes are the root of everything) instead of &lt;code&gt;Prototypical&lt;/code&gt; language(like Javascript). But then slowly I understood that its not &lt;code&gt;Javascript&lt;/code&gt; but other languages on top of Javascript which create somekind of &lt;code&gt;Class&lt;/code&gt; concept to mimic &lt;code&gt;Classical&lt;/code&gt; languages. The point is everything boils down to &lt;code&gt;Javascript&lt;/code&gt; if a language is written to compile or transpile to &lt;code&gt;Javascript&lt;/code&gt; . Well, that may seem like a spoiler right now, but its actually not as we will see. Just keep these things in mind all the time, even if we are doing &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt;.        &lt;/p&gt;
&lt;p&gt;Here is the direct link to the &lt;a href=&quot;https://github.com/saumya/CoffeeScript101&quot;&gt;Github&lt;/a&gt; repository for the code reference to this post.       &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CoffeeScript is generally written in a &lt;code&gt;.coffee&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;.coffee&lt;/code&gt; file is compiled to a &lt;code&gt;.js&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Each space (a blank space) in code has a meaning in the &lt;code&gt;.coffee&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Semicolons are optional and generally avoided&lt;/li&gt;
&lt;li&gt;In the beginning you may write more than one classes in a single &lt;code&gt;.coffee&lt;/code&gt; file, and thats perfectly alright here&lt;/li&gt;
&lt;li&gt;By default the &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; Classes you write are private            &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When compiled to JS, the contents of each file, are put inside a self invoking function. This is intentional to not pollute the Global variables. So if the content has some classes inside them, then those classes will also be inside the self-invoking function, restricting the access from outside.&lt;br&gt;The classes in &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; are compiled to as usual JS functions and the inheritence is done through the prototypical inheritence concepts of Javascript. Since all this happens behind the scenes and as a &lt;a href=&quot;http://coffeescript.org/#top&quot;&gt;CoffeeScript&lt;/a&gt; developer if you do not know, how its working, it would be a pain later to expect anything else from this language.          &lt;/p&gt;
&lt;p&gt;Thats all to start with the new year. Happy new year.         &lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>RequireJS, Load timeout for modules!</title>
      <link>http://saumya.github.io/ray/articles/44/</link>
      <pubDate>Mon, 17 Nov 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/44/</guid>
      <author></author>
      <description>&lt;p&gt;Working with &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;, will make you work with &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;. And if you are working with &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; for a little time, then you probably know what I am talking about. Sometimes, the modules we are loading through &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; throw errors saying&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;: Load timeout &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; modules
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will suggest to have a look at &lt;a href=&quot;http://requirejs.org/docs/errors.html&quot;&gt;RequireJS&lt;/a&gt; documentation for detailed explanation.&lt;br&gt;The most common and which may hit you in the begining is the &lt;code&gt;timeout&lt;/code&gt; for timeout itself. There are ways to fix this. The options are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;increase the timeout limit&lt;/li&gt;
&lt;li&gt;reload the page or the module on timeout error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; configuration has an option called &lt;code&gt;waitSeconds&lt;/code&gt;, which defaults to &lt;code&gt;7&lt;/code&gt;. Now if the module does not load in 7 seconds, it will giveup and throw the error. If &lt;code&gt;waitSeconds&lt;/code&gt; is set to &lt;code&gt;0&lt;/code&gt;, it will wait for &lt;code&gt;infinite&lt;/code&gt;. Well, along with that setting, set the &lt;code&gt;enforceDefine&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for reliability in all browsers and scenarios. This setting will look as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;requirejs.config({
    enforceDefine: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
    waitSeconds: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats a quickfix. But again, it may hit the performace of the application.&lt;br&gt;The otherway is &lt;a href=&quot;http://requirejs.org/docs/api.html#errbacks&quot;&gt;Errbacks&lt;/a&gt; as per &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;. so what are they. They are simply callbacks but since it happens in errors, its called &lt;code&gt;Errbacks&lt;/code&gt;. We can do stuff like reloading the whole application or the specified module or other error handling on these.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;'modules/one'&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;'modules/two'&lt;/span&gt;],
           &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(One,Two)&lt;/span&gt;{&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;//Application logic&lt;/span&gt;
        },
        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(error)&lt;/span&gt;{&lt;/span&gt;
            console.log(&lt;span class=&quot;string&quot;&gt;'Custom ERROR handler'&lt;/span&gt;,error);
            &lt;span class=&quot;comment&quot;&gt;//error.requireModules : is Array of all failed modules&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failedId = error.requireModules &amp;amp;&amp;amp; error.requireModules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];
            console.log(failedId);
            console.log(error.message);
        });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Upgrading to Cordova 3.4 and above</title>
      <link>http://saumya.github.io/ray/articles/43/</link>
      <pubDate>Thu, 23 Oct 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/43/</guid>
      <author></author>
      <description>&lt;p&gt;While trying to upgrade, one of my previous Cordova Android application, to latest &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; , noticed that &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; now makes it very difficult to switch to a native development workflow. Its not the flow itself, which is difficult, but the information about the flow and to get started with a project which is the problem. If you have ever worked with the native development flow of &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; , which I guess you must have, as that was the actual flow in the beginning. Then its exactly the same work flow, but the thing is, its not mentioned anywhere. And in between these, they had introduced a web development workflow and tried forcing to use it. Which itself is not clear and then combined the native workflow with it. Good that, that period is over. But its not clear at all from the docs.
Well, first of all, &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; is saying its released the version 4 of the toolkit. When you go to &lt;a href=&quot;http://cordova.apache.org/#download&quot;&gt;download&lt;/a&gt; section for native development workflow, you will &lt;a href=&quot;https://www.apache.org/dist/cordova/&quot;&gt;not find a version 4&lt;/a&gt; ! So, you have to go inside &lt;a href=&quot;https://www.apache.org/dist/cordova/platforms/&quot;&gt;platforms&lt;/a&gt;, there also you will not find version 4. So, I ended up downloading 3.6.4 for android and will suggest everyone to do that for the time being. After downloading the zipped file, extract it to a folder. Navigate to the folder and fireup the cordova create command to create a project.
Next is adding the plugins, because now &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; does not include plugins by default. For that, one has to go back to Cordova CLI and that can be done with Node and NPM. But instead of running Cordova to add plugins, one has to run Plugman to install plugins.&lt;/p&gt;
&lt;p&gt;The flow is &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;download Cordova Native development package&lt;/li&gt;
&lt;li&gt;download Node and NPM&lt;/li&gt;
&lt;li&gt;install Cordova and Plugman through NPM&lt;/li&gt;
&lt;li&gt;create project from inside the dowloaded Cordova folder&lt;/li&gt;
&lt;li&gt;navigate to the project folder&lt;/li&gt;
&lt;li&gt;run the Plugman command to add plugins to the project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Dojo Toolkit, Widget.</title>
      <link>http://saumya.github.io/ray/articles/42/</link>
      <pubDate>Tue, 30 Sep 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/42/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; has a component library named as &lt;code&gt;Dijit&lt;/code&gt;. Each component in this library is known as a &lt;code&gt;Widget&lt;/code&gt;. It is better to know the &lt;code&gt;dijit&lt;/code&gt; framework vocabulary before going further inside it. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Normally each &lt;code&gt;.js&lt;/code&gt; file represents a &lt;code&gt;Class&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each file, whose name starts with &lt;code&gt;_&lt;/code&gt; (underscore) is &lt;code&gt;not a concrete&lt;/code&gt; class. That means, this class is supposed to be extended to be used, &lt;code&gt;never directly used&lt;/code&gt; as is.&lt;/li&gt;
&lt;li&gt;Members inside a class, properties and methods, whose name starts with &lt;code&gt;_&lt;/code&gt; (underscore) are &lt;code&gt;private&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A class is defined by &lt;code&gt;declare()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; now supports AMD modules. So the module definition is pretty straight forward as in standard module definition. If you have ever used any other framework such as &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;, you already know, how to declare, extend, load and use a module and a class. &lt;/p&gt;
&lt;p&gt;Now, lets see what &lt;code&gt;Widget&lt;/code&gt; brings to the rules table. Each Widget has a life-cycle of its own. The lifecycle methods are as below in sequence.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor()&lt;/li&gt;
&lt;li&gt;postMixInProperties()&lt;/li&gt;
&lt;li&gt;buildRendering()&lt;/li&gt;
&lt;li&gt;setters and getters, example is set(“myProperty”,value)&lt;/li&gt;
&lt;li&gt;postCreate()&lt;/li&gt;
&lt;li&gt;startup()&lt;/li&gt;
&lt;li&gt;destroy()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are few methods which also be called in some widgets, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resize()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each &lt;code&gt;Widget&lt;/code&gt; is supposed to &lt;code&gt;Extend&lt;/code&gt; the &lt;code&gt;_WidgetBase&lt;/code&gt; class defined in &lt;code&gt;dijit/_WidgetBase&lt;/code&gt; package. Sometimes, it is necessary to use template strings or templates inside a  Widget. In that case, the &lt;code&gt;Widget&lt;/code&gt; extends &lt;code&gt;_WidgetBase&lt;/code&gt; and &lt;code&gt;_TemplatedMixin&lt;/code&gt;, defined in &lt;code&gt;dijit/_WidgetBase&lt;/code&gt; and &lt;code&gt;dijit/_TemplatedMixin&lt;/code&gt; package respectively.&lt;/p&gt;
&lt;p&gt;After creation of each child &lt;code&gt;Widget&lt;/code&gt; inside the parent Widget, its necessary to call the &lt;code&gt;startup()&lt;/code&gt; method of the child Widget. Since &lt;code&gt;startup()&lt;/code&gt; call goes through all the child widgets of a container Widget, its better to add all the child Widgets to the parent Widget and call parent’s &lt;code&gt;startup()&lt;/code&gt;, which will call &lt;code&gt;startup()&lt;/code&gt; of each child Widget.
While writing a custom Widget, its necessary to override parent’s lifecycle methods. At the sametime, it is necessary to continue the lifecycle of the Widget. So a call to parent’s method is necessary. In most of all programming languages it is done with a &lt;code&gt;super()&lt;/code&gt; call. In &lt;code&gt;dijit&lt;/code&gt; framework its called as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this.inherited(arguments);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So inside each of the above life-cycle methods, a call to &lt;code&gt;this.inherited(arguments);&lt;/code&gt; is necessary, either in the beginning or as the last line of the method.&lt;/p&gt;
&lt;p&gt;A custom &lt;code&gt;Widget&lt;/code&gt; has either of the 2 properties below or sometimes both, to add child widgets to  itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this.domNode&lt;/li&gt;
&lt;li&gt;this.containerNode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now to add child widgets to the parent widget there are methods like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addChild()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, this post may seem a lot but the idea is to make you aware of the vocabulary and some background to &lt;code&gt;dijit&lt;/code&gt; infrastructure. For a basic and complete &lt;code&gt;example&lt;/code&gt; &lt;a href=&quot;https://github.com/saumya/dojo101/blob/master/dojo-release-1.10.0-src/myWidgets/rayWidget3.js&quot;&gt;have a look at this widget&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Getting started with, Dojo Toolkit</title>
      <link>http://saumya.github.io/ray/articles/41/</link>
      <pubDate>Mon, 29 Sep 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/41/</guid>
      <author></author>
      <description>&lt;p&gt;To begin with, &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; or simply referred to as &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; is one of many libraries in javascript. First thing to do is, like any other javascript libraries, make sure which version of library you are studying and using. &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; has gone through major upgrades and if you are trying to do things the new way of &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; then better get to know the &lt;a href=&quot;http://dojotoolkit.org/documentation/tutorials/1.10/modern_dojo/&quot;&gt;new version&lt;/a&gt;. We will be focusing on the new version only(currently &lt;code&gt;1.10&lt;/code&gt;) and referring to old one, wherever necessary.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt; has got a combination following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A bare bone of functionality ( &lt;code&gt;dojo&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;A widget library ( &lt;code&gt;dijit&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;An experimental library ( &lt;code&gt;dojox&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;An Unit testing framework&lt;/li&gt;
&lt;li&gt;A compiler to do the minification and optimisation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of javascript libraries try to implement the classical programming concepts and &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; is another one of them. So, if you are a purist in Javascript, &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; will dissapoint you. The functional nature of Javascript is also eliminated here. &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; clearly disagrees to say that &lt;code&gt;function&lt;/code&gt; is &lt;code&gt;a first class citizen&lt;/code&gt;, which is again denying another nice feature of javascript. Well, but if you are coming from a classical programming background, that means from a programming language which is class based like Java, then &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; will seem natural. So, we will refer them in classical terms rather than Javascript terms.&lt;/p&gt;
&lt;p&gt;The core functionality of the toolkit is wrapped in a package called &lt;code&gt;dojo&lt;/code&gt;. Everythig that runs in the toolkit depends on this basic package. Next is &lt;code&gt;dijit&lt;/code&gt;, which can be called as a component library or in dojo’s terms these are widgets. Now &lt;code&gt;dojox&lt;/code&gt; is a package containing experimental widgets, which will eventually go into &lt;code&gt;dijit&lt;/code&gt; , once they are stable enough. Since widgets have to live a life of their own, there is a flow of lifecycle events. It is now obvious that any application using these widgets have to abide to these lifecycle events and some rules as a whole. In Dojo’s terms these are framework rules.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Checklist to join a corporate</title>
      <link>http://saumya.github.io/ray/articles/40/</link>
      <pubDate>Sat, 23  Aug 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/40/</guid>
      <author></author>
      <description>&lt;p&gt;It is a surprise for me, to see the processes these companines follow to get a person on board. I am not talking about interview. The technical interview is kind of rounds after rounds of never ending interviews. But at least, these are ok-ish situation for a tech person.&lt;br&gt;The real pain starts, once you get through the interview. Now you are selected and need to serve the notice period at old organisation and move on to join the new one. The problem is, once you are through the interview, this new companies will call you at least 5 times a day. This is plain and simple irritating. They will force you (no one can force you, but at least they will talk like that) to join before the scheduled time. 
If at all, you have joined them by keeping their words, there would be no respect at all for that. Once you come to join them, they will show how much process they follow! Really?!! If you follow all these, why you kept on calling a person who has not joined you? Where were your processes! Or is that a process of yours to trouble someone, who is not from your organisation! Simple stupid. So you make your own process, follow your own process and change that at will.&lt;br&gt;Well, just keep in mind that once you have come to join a new corporate, keep below things with you. These companies will not tell you, when they should have, that please bring all these with you.     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your own laptop (only windows with Internet Explorer)&lt;/li&gt;
&lt;li&gt;Your own datacard for internet&lt;/li&gt;
&lt;li&gt;Your phone with roaming activated   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once these are done, keep below things with you.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your cheque book&lt;/li&gt;
&lt;li&gt;Your father’s identity proof&lt;/li&gt;
&lt;li&gt;All your previous residing locations proof&lt;/li&gt;
&lt;li&gt;Two friends’ addresses and contact from each of all previous location and company&lt;/li&gt;
&lt;li&gt;Two local friends’ contacts and addresses (if they are not, create them !)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well last but most importantly keep “your common sense and simplicity” at home. Just rember that these are just mindless machines working for a factory which does not have and can not respect to have a brain.&lt;/p&gt;
&lt;p&gt;Never giveup.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>AngularJS 101</title>
      <link>http://saumya.github.io/ray/articles/39/</link>
      <pubDate>Tue, 24 Jun 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/39/</guid>
      <author></author>
      <description>&lt;p&gt;It took me sometime to make me comfortable in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. There are a lot of tutorials, discussions and videos out there about &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. I would suggest, go through them and go through as many as you can, before jumping into code with this framework. We will be looking at the very basics of the framework here and for &lt;code&gt;version 1.3&lt;/code&gt; and above, of the framework.&lt;br&gt;You must heard about MVC or Model-View-Controller architecture and &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. While thats true, lets keep that for a little late.&lt;br&gt;First of all, just remember that &lt;code&gt;$scope&lt;/code&gt; is model object and sometimes referred to as &lt;code&gt;ViewModel&lt;/code&gt;. Then there are &lt;code&gt;Views&lt;/code&gt;, which are either HTML tags or full html files. And then &lt;code&gt;Controllers&lt;/code&gt;, which are javascript files. At this point always remember that &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; revolves arround these &lt;code&gt;View&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt;. The data this &lt;code&gt;View&lt;/code&gt; displays is the same as the data the &lt;code&gt;Controller&lt;/code&gt; modifies and is available through &lt;code&gt;$scope&lt;/code&gt;. No matter what, &lt;code&gt;$scope&lt;/code&gt; remains in the middle as this&lt;br&gt;&lt;code&gt;View &amp;lt;---$scope---&amp;gt; Controller&lt;/code&gt;&lt;br&gt;Now, since &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; already uses &lt;code&gt;2-way data binding&lt;/code&gt; any changes to data or &lt;code&gt;$scope&lt;/code&gt; in &lt;code&gt;View&lt;/code&gt; or &lt;code&gt;Controller&lt;/code&gt; is reflected by each other.&lt;br&gt;An &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; application begins with a module named &lt;code&gt;ng-app&lt;/code&gt; and this &lt;code&gt;ng-app&lt;/code&gt; is generally only one. So what is a module ? Module is kind of self contained small applications inside a big application. The special module &lt;code&gt;ng-app&lt;/code&gt; is the only exception as its the big application and everything else in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; world happens inside it. All other modules generally go inside &lt;code&gt;ng-view&lt;/code&gt;, have a look at &lt;a href=&quot;https://github.com/saumya/ng-101/blob/master/index.html&quot;&gt;this html page&lt;/a&gt; for the reference.In terms of &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;, a module is a combination of a &lt;code&gt;View-$scope-Controller&lt;/code&gt;. Everytime you need to load this module, the View gets loaded in the &lt;code&gt;ng-view&lt;/code&gt; and its Controller gets initialised along with the &lt;code&gt;$scope&lt;/code&gt;. All these mapping are written in a &lt;code&gt;Route&lt;/code&gt;, which maps &lt;code&gt;View with Controller&lt;/code&gt;, &lt;a href=&quot;https://github.com/saumya/ng-101/blob/master/js/saumyaApp.js&quot;&gt;take a look at this&lt;/a&gt;. Route is a separate module as of &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; version 1.3. So, one need to include the JS file and the dependency. A quick reference of an &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; application looks as below        &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML page&lt;/li&gt;
&lt;li&gt;ng-app (root module)&lt;/li&gt;
&lt;li&gt;ng-view (sub modules load here)&lt;/li&gt;
&lt;li&gt;first JS file for Route and other things&lt;/li&gt;
&lt;li&gt;Route maps URL paths with sub-views and their controllers&lt;/li&gt;
&lt;li&gt;sub-views(HTML partials or pages) are loaded inside the ng-view and initialied with their controllers        &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far we are good. The next thing is, we can still make it more modularised. &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; allows, something called as &lt;code&gt;Directives&lt;/code&gt;, you may think of it as components. Inside a &lt;code&gt;Module&lt;/code&gt;, we can write our custom directives, which are &lt;code&gt;custom HTML tags&lt;/code&gt; along with its &lt;code&gt;controller&lt;/code&gt;. But always remember, &lt;code&gt;Directives&lt;/code&gt; are part of &lt;code&gt;View&lt;/code&gt;. So the &lt;code&gt;$scope&lt;/code&gt; is also available to them. Now, there are different pre-built modules with &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; for different job in hand, like &lt;code&gt;$http&lt;/code&gt; is for interacting with &lt;code&gt;web services&lt;/code&gt;.&lt;br&gt;&lt;a href=&quot;https://github.com/saumya/ng-101&quot;&gt;Refer to the project here&lt;/a&gt;, which I have created to better understand the basic of an &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; application. Always remember, anything in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; that we write falls upon either &lt;code&gt;View&lt;/code&gt; or &lt;code&gt;Controller&lt;/code&gt; and there is always &lt;code&gt;$scope&lt;/code&gt; available to both of these.        &lt;/p&gt;
&lt;p&gt;I would love to listen your inputs on this, please leave a comment for discussion.         &lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Looking at AngularJS</title>
      <link>http://saumya.github.io/ray/articles/38/</link>
      <pubDate>Sat, 07 Jun 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/38/</guid>
      <author></author>
      <description>&lt;p&gt;I had seen &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; before, almost one year back. When I came back to have a look at it again now, I got surprised to see “How long it has really come!”. Well here, I am just introducing some of the libraries, frameworks and projects that have eveloved arround &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;.          &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.polymer-project.org/&quot;&gt;Polymer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://angulardart.org/&quot;&gt;Angular Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ngcordova.com/&quot;&gt;ngCordova&lt;/a&gt;, Cordova powered by AngularJS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt;, framework for Hybrid Mobile Apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Upgrading to Ruby 2.x from 1.x with rvm, on an upgrade from old OSX to Mavericks.</title>
      <link>http://saumya.github.io/ray/articles/37/</link>
      <pubDate>Mon, 26 May 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/37/</guid>
      <author></author>
      <description>&lt;p&gt;This is a situation when you have updated the OS from a previous version of Mac OSX to the latest version of the OSX Mavericks. Generally OSX ships with a version of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;, which is latest by the time the OS is released. But when it comes to OSX upgrade and in this case particularly to OSX Mavericks, the operating system upgrade does not bring in the &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; upgrade. Rather, the old &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; lives on the new OSX. Well, if you have a decent understanding of managing &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; versions, you may be using one of the version management systems of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;. I used to have &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;. Now I have an upgraded OSX but need to have the latest version of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;. The steps are as below     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upgrade &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upgrade &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, there are issues with these two steps as I found throughout the net. A simple search in the internet will make you aware of this fact. So the refined steps are as below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install XCode Commandline tools&lt;/li&gt;
&lt;li&gt;Reinstall &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upgrade &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my case, I do not have to install the XCode commandline tools, probably because I am an iOS developer and always updates to the latest version of XCode along with the commandline tools. The thing to note here is with the OSX upgrade, the commandline tools of XCode is removed by the system. Even if, one installs the new &lt;code&gt;XCode&lt;/code&gt;, the &lt;code&gt;commandline tools&lt;/code&gt; are not included by default. All one has to do is &lt;code&gt;install&lt;/code&gt; it (&lt;code&gt;again&lt;/code&gt;).&lt;br&gt;Moving on, the next step is to upgrade the &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;. With the OSX upgrade, the normal &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt; update does not work.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rvm get stable
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, the fix is to &lt;code&gt;install rvm&lt;/code&gt; (you can call it &lt;code&gt;again&lt;/code&gt;) as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\curl -sSL https://get.rvm.io | bash -s stable
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once this step is done everything else is just normal &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; update thing. Update &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; with the commad as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rvm install ruby-2.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets install a gem such as json, which can be done with the command as follows. I was suggesting &lt;del&gt;sudo gem install json&lt;/del&gt;, but never do that. Instead use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem install json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It seems using &lt;code&gt;sudo&lt;/code&gt; &lt;code&gt;is not advisable&lt;/code&gt; to be used while using &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;. I got a reply in twitter for this blog post, from &lt;a href=&quot;https://twitter.com/rvm_io&quot;&gt;@rvm_io&lt;/a&gt; as &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;looks good, the only hint - never use sudo with RVM, sudo “disables” RVM controlled ruby, the gem most likely is installed in system    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thats all to it. The important thing is, if we try to install the 2.x version of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; with old &lt;a href=&quot;http://rvm.io/&quot;&gt;rvm&lt;/a&gt;, it will not work. Actually, it does not show even in the known list of &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy upgrading.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Making a RESTful API with NodeJS and Express</title>
      <link>http://saumya.github.io/ray/articles/36/</link>
      <pubDate>Wed, 21 May 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/36/</guid>
      <author></author>
      <description>&lt;p&gt;Here we will be making a basic REST API using the &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; framework for &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. I am not going in detail of how &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; works, but straight to the code, which is as below. While this may look as a regular &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; application, the important thing is the API can be called from any web server.      &lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;https://gist.github.com/saumya/402d2f035b23d7d08877.js&quot;&gt;&lt;/script&gt;
While developing APIs, the first thing came to me is, how to call this from another server?! For thats the only reason we are exposing the API. And the answer is enable &lt;a href=&quot;http://enable-cors.org/&quot;&gt;CORS&lt;/a&gt;, cross-origin resource sharing. It simply means, make the API available or expose to these servers. we can specify the domain names individually or in this partcular case, we have exposed the API to any sever by specifying * .       &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;app.all(&lt;span class=&quot;string&quot;&gt;'*'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(req, res, next)&lt;/span&gt; {&lt;/span&gt;
  res.header(&lt;span class=&quot;string&quot;&gt;&quot;Access-Control-Allow-Origin&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;);
  res.header(&lt;span class=&quot;string&quot;&gt;&quot;Access-Control-Allow-Headers&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;X-Requested-With&quot;&lt;/span&gt;);
  next();
 });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means, upon any API call, add these headers first. And the header says, its allowed from any &lt;code&gt;*&lt;/code&gt; domain. So the result is, before the API call hits any route, it first comes into this &lt;code&gt;all&lt;/code&gt; binding and sets the values and then goes to the respective route.&lt;/p&gt;
&lt;p&gt;Happy Noding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>NodeJS, HTML5, JQuery and what you may come across in an interview</title>
      <link>http://saumya.github.io/ray/articles/35/</link>
      <pubDate>Tue, 20 May 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/35/</guid>
      <author></author>
      <description>&lt;p&gt;This is not a surprise for me, but if you are new to the modern web development and working on Javascript stack, chances are that you come acrcoss these in everyday life. It may come from anywhere, your collegue, your senior, may be from an interviewer. But the cool thing is, you are right in those cases. All you have to do is ignore them and move on. I had seen this while working on Flash platform, when people were saying things about Flash and Flex. Now the platforms are changed but situation are same.          &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeJS is a different language.&lt;/li&gt;
&lt;li&gt;NodeJS is not javascript.&lt;/li&gt;
&lt;li&gt;NodeJS is bad for not having X, which Y language has&lt;/li&gt;
&lt;li&gt;Jquery is a different language.&lt;/li&gt;
&lt;li&gt;JQuery is not javascript.&lt;/li&gt;
&lt;li&gt;JQuery is better than javascript.&lt;/li&gt;
&lt;li&gt;HTML5 is a programming language.&lt;/li&gt;
&lt;li&gt;HTML5 is different from HTML.&lt;/li&gt;
&lt;li&gt;Have you worked on HTML5? If yes, have you worked on DOM?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I could answer to all these in single lines but then the interpretation would be wrong.&lt;br&gt;The point is people coming from traditional languages like, Java and C# and still working on those, think they know all. I would suggest, please come out from that and even if you want to target JVM, use a modern language like SCALA instead. Well, if these guys try to code in a modern platform like NodeJS, they suddenly make the simple solution, to a complex process, as per the old knowledge they were having. Even the elegance of these new modern platforms like Ruby, NodeJS etc seem to be bad in their eyes. Well, the problem is these guys are sitting on top positions in traditional service based companies. So, if you join one of these companies, or even appear for interview in those companies, chances are you will come across these scenarios. The best part is, you are right and they are wrong. So no need to feel bad if they talk like that. Just ignore and move on but never leave learning.&lt;br&gt;Another big problem for working in frontend is, these conventional people think, they can do a better architecture in frontend too, just because they can use an ORM in backend. So all those frontend elegant solutions provided by modern stacks will be bent according to these guys to a point where the elegance becomes a pain for you as a frontend developer. They will talk that “we had done these before this way”. Common, that way is over, that time is gone. Now learn something from the modern stack developers and make an elegant backend. I have even seen, these backend guys mentoring ObjectiveC guys, how to do an iPhone Application architecture, without knowing the iOS environment. This is not specific to iOS, but any mobile platform in general. Web is not mobile and there are different considerations and architecture depending upon the platform. While the modern web stack has changed and you simply do not understand it, how you can mentor a mobile application developer! Talking of backends, these guys even think traditional databases are the best, no need to try any other. They even hesitate to try a NoSQL! Common! Thats backend, at least update yourelf there before coming to frontend. Ask any new modern stack web developer, they will blow your mind with the stuff like NoSQL to responsive web applications. Even the enterprise is shifting to modern stack, but these are people who hold on to the past.The end result is, everyone suffers. But again, if you are new to the scenario, then do not worry, they will learn from their mistakes and all these time you have to live with it. All these, for someone on top does not know how to deal with new technology.&lt;br&gt;My honest suggestion to all you people starting your career in web development is, learn from the web, there are plenty of brilliant tutorials and examples available online and move on. Better, if you can, shift to a company where they know, what they are doing, rather than what they used to do.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Understanding BackboneJS View Event, jQuery Event and trigger()</title>
      <link>http://saumya.github.io/ray/articles/34/</link>
      <pubDate>Fri, 18 Apr 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/34/</guid>
      <author></author>
      <description>&lt;p&gt;The fun in working with &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is freedom. The library is so decoupled that, one can really do any kind of architecture for an application. This freedom will come in your way if you do not know what is happening behind. We will be focusing on ‘Event’ here.&lt;br&gt;Working with &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; often involves working with &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; too as a DOM manupilation library. When we work on HTML and DOM, in terms of &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; we are working on View. At this point we must understand, that this BackboneView can dispatch event and the DOM we are dealing with also is capable of dispatching event. The point to note here is event dispatched through &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; framework, does not bubble. Where as the default DOM events bubble. Well, since we generally work with &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; for DOM manupilation, events fired through &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; also has the same effect as DOM events, they bubble. Working with a &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; ViewObject, we deal with &lt;code&gt;el&lt;/code&gt; of the ViewObject. &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; also provides a &lt;code&gt;$el&lt;/code&gt; on each view. Take a note of this &lt;code&gt;$el&lt;/code&gt;, which is a &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; object.&lt;br&gt;Dispatching an Event in &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is done as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//somewhere inside the View&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;,{&lt;span class=&quot;string&quot;&gt;'data'&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;'myValue'&lt;/span&gt;});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The basic syntax for &lt;a href=&quot;http://backbonejs.org/#Events-trigger&quot;&gt;dispatching an event in BackboneJS&lt;/a&gt; is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;object.trigger(event, [*args])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember that the &lt;code&gt;second parameter&lt;/code&gt; in the &lt;code&gt;trigger&lt;/code&gt; is &lt;code&gt;data&lt;/code&gt; to be passed to the event-handler. Registering the listener for the event will be as &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.listenTo(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.viewObject, &lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onMyEvent);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now writing a handler for this event will look as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//handler&lt;/span&gt;
onMyEvent: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(eventdata)&lt;/span&gt;{&lt;/span&gt;
    console.log(eventdata);&lt;span class=&quot;comment&quot;&gt;//example: getting data from the event&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, we get the whole &lt;code&gt;data&lt;/code&gt; ( passed to the &lt;code&gt;trigger()&lt;/code&gt; method as second parameter ) , as the arguement to the handler. &lt;/p&gt;
&lt;p&gt;Now lets focus on the DOM event for the same scenario.
The dispatcher code will look as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$el.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;,{&lt;span class=&quot;string&quot;&gt;'data'&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;'myValue'&lt;/span&gt;});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, actually it seems that we are using &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; Event, but since we are dealing with &lt;code&gt;$el&lt;/code&gt;, we are actually &lt;a href=&quot;http://api.jquery.com/trigger/&quot;&gt;triggering a DOM event through jQuery&lt;/a&gt;. Since this is a DOM event, it has all the three phases in its life cycle; capture, target and bubble. So, we can really catch this event on a parent view of &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; and the code would be like &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;events: {
    &lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'onMyEvent'&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//this is actually listening to DOM event&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The handler code will look as &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;onMyEvent : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event,data)&lt;/span&gt;{&lt;/span&gt;
    event.preventDefault();
    &lt;span class=&quot;comment&quot;&gt;//code as required by application&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//But, see the second arguement is actually 'data', passed to 'trigger()'&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the difference in event handler here. We have now two arguements and the second arguement is the &lt;code&gt;data&lt;/code&gt; that is passed in to &lt;code&gt;trigger()&lt;/code&gt; call above.
All that is to it is, how you &lt;code&gt;trigger&lt;/code&gt; the event, from the two ways below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From the [BackboneJS] View&lt;/li&gt;
&lt;li&gt;From the DOM element     &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And then, writing a proper event-handler for the respective Event.     &lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;, sometimes you need to deal with situations, where you just want to listen for events without knowing the other Views. That way de-coupling the application. There is Mediator design pattern to do a central event dispatching system for the whole &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; application. Then there is this little but powerful thing, called bubbling, already available to native DOM.      &lt;/p&gt;
&lt;p&gt;Here are the links to the two trigger methods;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://api.jquery.com/trigger/&quot;&gt;jQuery trigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://backbonejs.org/#Events-trigger&quot;&gt;BackboneJS trigger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy Bubbling.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>jQuery and fixing AJAX cache for GET calls</title>
      <link>http://saumya.github.io/ray/articles/33/</link>
      <pubDate>Thu, 03 Apr 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/33/</guid>
      <author></author>
      <description>&lt;p&gt;It will come to you very soon, if you are trying to develop any decent webapp or phonegap mobile app using &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;.&lt;br&gt;The problem is, if we have the same &lt;code&gt;GET&lt;/code&gt; request multiple times, by default jQuery will cache the request. The end result is the response same as the first response!! Well, there is a setting in jQuery AJAX setup, where in we write &lt;code&gt;cache:false&lt;/code&gt; and that should work. Well, depending upon how the API is written on the server side, this call might not work! There are many reasons as to why it may not work, one simple reason is, to understand, how &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; behaves, when we set &lt;code&gt;cache:false&lt;/code&gt; as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; apiURL = &lt;span class=&quot;string&quot;&gt;&quot;my/api/server/URI&quot;&lt;/span&gt;;
$.ajax({
    url:apiURL,
    cache: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
    success:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(result)&lt;/span&gt;{&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
    },
    error:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt;{&lt;/span&gt;           
        &lt;span class=&quot;comment&quot;&gt;//            &lt;/span&gt;
    }   
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; will append &lt;code&gt;_={timestamp}&lt;/code&gt; to the GET parameters. Here is the &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;official documentation&lt;/a&gt; of the same. The service call will fail, if this extra parameter is not handled properly. A little workarround, fixed this for me, which is appending the timestamp mannually by hand instead of setting &lt;code&gt;cache: false&lt;/code&gt; in AJAX setup of &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;. The modified code looks as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeStamp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getTime();
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; apiURL = &lt;span class=&quot;string&quot;&gt;&quot;my/api/server/URI/&quot;&lt;/span&gt;+timeStamp;
$.ajax({
    url:apiURL,
    &lt;span class=&quot;comment&quot;&gt;//cache: false,//not needed now&lt;/span&gt;
    success:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(result)&lt;/span&gt;{&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
    },
    error:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt;{&lt;/span&gt;           
        &lt;span class=&quot;comment&quot;&gt;//            &lt;/span&gt;
    }   
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, that worked for me as my API end point was not handling ‘_’(underscore) properly, but could handle the extra parameters.&lt;br&gt;Depending upon the situations, find a right place and &lt;code&gt;add timestamp mannually&lt;/code&gt;, to fix the AJAX cache instead of setting it in the setup.     &lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Back to Lime (OpenFL)</title>
      <link>http://saumya.github.io/ray/articles/32/</link>
      <pubDate>Sat, 15 Mar 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/32/</guid>
      <author></author>
      <description>&lt;p&gt;Its almost 2 months, I did a project on &lt;a href=&quot;https://github.com/openfl/lime&quot;&gt;Lime&lt;/a&gt;(&lt;a href=&quot;http://www.openfl.org/&quot;&gt;OpneFL&lt;/a&gt;). Fortunately this weekend is the time and I started it. Well, first thing to mention is, there is a huge update to the whole tooling and many libraries of the &lt;a href=&quot;http://haxe.org/&quot;&gt;HAXE&lt;/a&gt;, Lime and OpenFL land. Allmost all the libs are updated.&lt;br&gt;Upon the develoment land on &lt;code&gt;mac&lt;/code&gt;, the first thing I noticed is, there is no need to type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;haxelib run openfl test neko
haxelib run lime test neko
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is just as simple as calling directly as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lime test neko
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yeah. Thats good start. I thought to document it here, as I have used to the commands on &lt;code&gt;mac&lt;/code&gt; and suddenly its changed (though changed for good), a note would be a point of reference in the future to refer to.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Migration checklist for Cordova(Phonegap) application from version 2.x to 3.x</title>
      <link>http://saumya.github.io/ray/articles/31/</link>
      <pubDate>Thu, 27 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/31/</guid>
      <author></author>
      <description>&lt;p&gt;There might be chances that you are re-writing a project or simply maintainig an old codebase of a &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;(phonegap) application. In both the cases, its ideal to go for the lastest version of the library. Being said that, its not that straight forward to migrate a phonegap 2.x application to Phonegap 3.x. And if, the project uses a 1.x version of &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; with &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuerymobile&lt;/a&gt;, you might want to update that to 2.x too, which adds up to more confusion and work, than solution. I will be focusing on &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; rather than &lt;a href=&quot;http://phonegap.com/&quot;&gt;Phonegap&lt;/a&gt; here. Yes, they are different! They are supposed to be the same but there are differences.      &lt;/p&gt;
&lt;h3 id=&quot;here-is-a-checklist-to-keep-things-in-perspective-&quot;&gt;Here is a checklist to keep things in perspective.&lt;/h3&gt;
&lt;h3 id=&quot;cordova&quot;&gt;Cordova&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get used to &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. Yes, thats now mandatory to use.&lt;/li&gt;
&lt;li&gt;Get used to &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; and &lt;a href=&quot;http://phonegap.com/&quot;&gt;Phonegap&lt;/a&gt;, they are different.&lt;/li&gt;
&lt;li&gt;Know the difference between &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; and &lt;a href=&quot;http://phonegap.com/&quot;&gt;Phonegap&lt;/a&gt;, at-least what they do internally.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_overview_index.md.html#Overview&quot;&gt;Read completely the getting started&lt;/a&gt; with &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Do not confuse with &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_overview_index.md.html#Overview_development_paths&quot;&gt;Web Project Dev&lt;/a&gt; work flow, if possible avoid it altogether.&lt;/li&gt;
&lt;li&gt;Start with &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_overview_index.md.html#Overview_development_paths&quot;&gt;Native Platform Dev&lt;/a&gt; workflow. This is the one, which is closer to the older version workflow.&lt;/li&gt;
&lt;li&gt;Do not use &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_cli_index.md.html#The%20Command-Line%20Interface&quot;&gt;CLI&lt;/a&gt; for creating project. You can download the &lt;a href=&quot;http://archive.apache.org/dist/cordova/&quot;&gt;whole archive for a version&lt;/a&gt; as you used to in the previous versions and still can create project with it.&lt;/li&gt;
&lt;li&gt;Get used to &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/plugin_ref_plugman.md.html#Using%20Plugman%20to%20Manage%20Plugins&quot;&gt;Plugman&lt;/a&gt; to manage plugins. Everything is now a plugin. That means, a default project created, is nothing more than a website. If you need to interact with a device, you have to add plugin. In &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/guide_overview_index.md.html#Overview_development_paths&quot;&gt;Native Platform Dev&lt;/a&gt;, these are managed by &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/plugin_ref_plugman.md.html#Using%20Plugman%20to%20Manage%20Plugins&quot;&gt;Plugman&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For the first couple of trials, &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/plugin_ref_plugman.md.html#Using%20Plugman%20to%20Manage%20Plugins_installing_core_plugins&quot;&gt;add all the plugins&lt;/a&gt;. That will make the project, behave as the older version projects, where everything is set by default. The document to install plugin is misleading.     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Instead&lt;/code&gt; of&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plugman --platform --project --plugin org.apache.cordova.battery-status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Use&lt;/code&gt;, the commands as below. The document is missing &lt;code&gt;--install&lt;/code&gt; from the command!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plugman --install --platform --project --plugin org.apache.cordova.battery-status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The actual code will look as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plugman --install --ios --path/to/project/folder --plugin org.apache.cordova.battery-status
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Get used to &lt;code&gt;config.xml&lt;/code&gt;, &lt;a href=&quot;http://cordova.apache.org/docs/en/3.4.0/config_ref_index.md.html#The%2520config.xml%2520File&quot;&gt;for configuring the whole project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jquery-and-jquerymobile&quot;&gt;jQuery and jQueryMobile&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Update the &lt;a href=&quot;http://api.jquerymobile.com/jQuery.mobile.changePage/&quot;&gt;page change code&lt;/a&gt; to remove the deprecated one and use the new one.&lt;/li&gt;
&lt;li&gt;Update the event listener code from deprecated &lt;a href=&quot;http://api.jquery.com/live/&quot;&gt;live()&lt;/a&gt; to &lt;a href=&quot;http://api.jquery.com/on/&quot;&gt;on()&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Keep an eye on all the &lt;a href=&quot;http://api.jquery.com/category/deprecated/&quot;&gt;deprecated&lt;/a&gt; APIs of jQuery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That should make you compile your old project in the new code.&lt;/p&gt;
&lt;p&gt;Happy transitioning.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Book Review, jQuery UI 1.10-The User Interface Library for jQuery.</title>
      <link>http://saumya.github.io/ray/articles/30/</link>
      <pubDate>Sat, 22 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/30/</guid>
      <author></author>
      <description>&lt;p&gt;There is no doubt that &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; is being in use for almost all the projects. But when it comes to making the UI, there are a lot many options in the name of frameworks or libraries. By any chance, if you happen to choose &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; to create your UI, then &lt;a href=&quot;http://www.packtpub.com/jquery-ui-1-10-user-interface-library/book&quot;&gt;this book&lt;/a&gt; is helpful.&lt;br&gt;&lt;a href=&quot;http://www.packtpub.com/jquery-ui-1-10-user-interface-library/book&quot;&gt;This book&lt;/a&gt; takes each of the components of &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; and describes about its customisation options in detail. Each chapter is dedicated to one of the components of the &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; library. So the book is lengthy but if you are getting started with the libray, then this is an advantage. The experienced ones also, will find its handy to get some tips.&lt;br&gt;All in all its a nice read and helpful, if you stick to &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; for the UI development. &lt;/p&gt;
&lt;p&gt;Happy reading.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Amazon S3, file system.</title>
      <link>http://saumya.github.io/ray/articles/29/</link>
      <pubDate>Wed, 19 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/29/</guid>
      <author></author>
      <description>&lt;p&gt;I had my hands dirty for the first time, in last couple of days, with Amazon Simple Storage Service (S3). I was playing with the javascript SDK and getting to know the environment in general. The first impression is, it just stores the files and folders. But, digging deep inside and playing with its APIs, made me realise that its different than the traditional storage.&lt;br&gt;&lt;code&gt;Everything is just a pointer&lt;/code&gt;, well thats how I see it.&lt;br&gt;Amazon says, everything is a file. So that means a folder is a file with a different naming convention. Thats it, if you get that, then the API is straight forward. And I must say from the beginning of the computer era, one thing has been consistent and that is file system. Now, the way, new storage solutions are emerging, it’s not actually different from others’ offers, but definitely different from traditional file systems. The new era of the file systems or more generally we can say data storage systems are emerging and Amazon is no different in that regard. So, all in all, a new storage system with a very simple SDK is exciting.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>jQuery Mobile, making change page work.</title>
      <link>http://saumya.github.io/ray/articles/28/</link>
      <pubDate>Sat, 15 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/28/</guid>
      <author></author>
      <description>&lt;p&gt;The &lt;a href=&quot;http://saumya.github.io/ray/articles/24/&quot;&gt;last post&lt;/a&gt; about the &lt;a href=&quot;http://saumya.github.io/ray/articles/24/&quot;&gt;change page&lt;/a&gt; API change of &lt;a href=&quot;http://jquerymobile.com&quot;&gt;jQuery Mobile&lt;/a&gt; tells you as to, how to change a page, in the &lt;a href=&quot;http://api.jquerymobile.com/jQuery.mobile.changePage/&quot;&gt;new API&lt;/a&gt;. I was hoping thats the only change, but there seems, some kind of fix necessary to make a page, change properly. I mean, there is this bug, where the page change actually does this. It goes to the page mentioned by the change page and then it comes back to the page again, from where it was moved. So the effect is, the page is not chaged at all and the user looks at a screen, where the application simply moves to another screen and comesback to the original screen.&lt;br&gt;For me the fix that worked is send &lt;code&gt;changeHash:true&lt;/code&gt; in the options object of the API.     &lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/saumya/9015917.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Amazon S3 Sync with NodeJS</title>
      <link>http://saumya.github.io/ray/articles/27/</link>
      <pubDate>Fri, 14 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/27/</guid>
      <author></author>
      <description>&lt;p&gt;This is my first practical cross-platform desktop application written in &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. The application is a simple desktop client to upload the changed files in a folder automatically to a bucket in &lt;a href=&quot;http://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt;. The main components, which make this application, are     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;node-webkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/browser-intro.html&quot;&gt;Amazon S3 SDK for browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, there is a &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; module as well for the SDK, but I prefer to take it only browser way at the moment.     &lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/saumya/AmazonS3Sync&quot;&gt;source code&lt;/a&gt; is available here and to run it, get a copy of the &lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;node-webkit&lt;/a&gt; for your environment. And that makes a cross-platform application on &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;.     &lt;/p&gt;
&lt;p&gt;Currently the application keeps an eye on a folder, you specify. Once a file is changed in that folder, is automatically uploaded to the ‘bucket’ you specify in the beginning of the application. Note, currently it just uploads the files, which are changed. It does not upload a new file in the folder or any existing file.&lt;/p&gt;
&lt;p&gt;Happy synching.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>iOS, customising top and bottom bar inside UINavigationController</title>
      <link>http://saumya.github.io/ray/articles/26/</link>
      <pubDate>Thu, 13 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/26/</guid>
      <author></author>
      <description>&lt;p&gt;This may seem a difficult or simple task, depending upon what and how you want to do it.&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UINavigationController_Class/Reference/Reference.html&quot;&gt;UINavigationController&lt;/a&gt; is simply a controller to manage all the UIViewControllers inside it. Now, customising each and every &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt; could be done by code or InterfaceBuilder, depending upon what you want to achieve. We will be seeing here, as to how, to customise the Navigation bar (top bar) and the Tab bar (bottom bar) of the respective &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt;.&lt;br&gt;These are the references to look for while customising &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt; through InterfaceBuilder.&lt;br&gt;Hide the Tab bar (bottom bar)     &lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;http://www.flickr.com/photos/saumyaray/12479138795/player/&quot; width=&quot;408&quot; height=&quot;477&quot; frameborder=&quot;0&quot; allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The above setting is on the same &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt;.&lt;br&gt;To display custom text on the back button in a UIViewController, look for the setting as below     &lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;http://www.flickr.com/photos/saumyaray/12476698994/player/&quot; width=&quot;500&quot; height=&quot;408&quot; frameborder=&quot;0&quot; allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;Just remember that the above setting is done on the &lt;code&gt;previous&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt; for the next &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt;, &lt;code&gt;its tricky&lt;/code&gt; that way.&lt;br&gt;Now the code reference for &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html#//apple_ref/doc/c_ref/UIViewController&quot;&gt;UIViewController&lt;/a&gt; is as below.          &lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/saumya/8969920.js&quot;&gt;&lt;/script&gt;     



&lt;p&gt;Happy customising.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>iOS fragmentation and UI development</title>
      <link>http://saumya.github.io/ray/articles/25/</link>
      <pubDate>Wed, 12 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/25/</guid>
      <author></author>
      <description>&lt;p&gt;It was not there 4 years back, when the iOS was just beginning its life. Whether you like it or not the truth is its fragmented now. There are all different versions of iOS, then different versions of the devices. These two itself bring a lot of different considerations, while developing for the platform now.&lt;br&gt;Its agreed that its less fragmented but then thats enough to bring in the pain to a frontend developer.&lt;br&gt;Now, to add to it, there are different device form factors. Starting with regular iPads, retina, air, mini, iphone, ipod touch and all have different specifications. So the point is, the XCode workflow allows one to &lt;code&gt;design&lt;/code&gt; for all different devices, that does mean &lt;code&gt;design is multiplied&lt;/code&gt; not &lt;code&gt;reduced&lt;/code&gt;. While its good and freedom to the UI designer, as a frontend developer one must keep an eye on all these form fragmentations.
Now the same code will produce, a different looking back button in an older iOS and a different looking one in the newer ones. The UI may hide some UI elements on a smaller heighted device and look perfect in a newer bigger iPhone/iPodTouch.&lt;br&gt;Thats doable but definitely increases time to implement UI, if its not designed, and well thought of, by people, who know what they are doing.&lt;br&gt;Happy designing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>jQuerymobile, changePage is deprecated as of 1.4.0, will be removed in 1.5.0.</title>
      <link>http://saumya.github.io/ray/articles/24/</link>
      <pubDate>Tue, 11 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/24/</guid>
      <author></author>
      <description>&lt;p&gt;This is really going to break things, if someone is updating the library to latest version. This is a very frequently used function and chances are, that, in a mobile web application its being used everywhere. Lets remind ourselves again that &lt;code&gt;jQuery.mobile.changePage&lt;/code&gt; is &lt;code&gt;deprecated as of 1.4.0&lt;/code&gt; and &lt;code&gt;will be removed in 1.5.0&lt;/code&gt;.&lt;br&gt;Now there are vaious ways to change page in a &lt;a href=&quot;http://jquerymobile.com&quot;&gt;jQuerymobile&lt;/a&gt; application. Here are the 3 options to do the page change in the new API.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;:mobile-pagecontainer&quot;&lt;/span&gt;).pagecontainer(&lt;span class=&quot;string&quot;&gt;&quot;change&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;, { options });
&lt;span class=&quot;comment&quot;&gt;//or&lt;/span&gt;
$.mobile.pageContainer.pagecontainer(&lt;span class=&quot;string&quot;&gt;&quot;change&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;, { options });
&lt;span class=&quot;comment&quot;&gt;//or&lt;/span&gt;
$(&lt;span class=&quot;string&quot;&gt;&quot;body&quot;&lt;/span&gt;).pagecontainer(&lt;span class=&quot;string&quot;&gt;&quot;change&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;, { options });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://api.jquerymobile.com/jQuery.mobile.changePage/&quot;&gt;Here is the official document for reference&lt;/a&gt;     &lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Making desktop applications, using NodeJS.</title>
      <link>http://saumya.github.io/ray/articles/23/</link>
      <pubDate>Mon, 10 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/23/</guid>
      <author></author>
      <description>&lt;p&gt;I am suprised to see, how big the javascript community has become! And specifically &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; has some serious people in its community. I was trying to do a desktop application in javascript and without searching in the internet, I started out to do it all over again! After a couple of days, out of curiosity, did a search in internet to find, that &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; has plenty of options to do the stuff.&lt;br&gt;Evaluating some options, I settled with &lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;Node-Webkit&lt;/a&gt;. For now the best 3 in my opinion are;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;Node-Webkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://appjs.com/&quot;&gt;AppJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hex.youdao.com/&quot;&gt;hex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I must say, &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; has already revolutionised the internet. If at all, you think of doing something, search for a &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; solution and its possible that the solution is already there.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>BackboneJS, making an event-dispatching Object.</title>
      <link>http://saumya.github.io/ray/articles/22/</link>
      <pubDate>Sat, 01 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/22/</guid>
      <author></author>
      <description>&lt;p&gt;Making Views, Collections and Models in &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is as simple as extending the raw &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MyView = Backbone.View.extend({});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Making a generic object and make it dispatch events is also kind of same, but then the syntax is a little different.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myUtilLib = _.extend({},Backbone.Events);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything else remains the same, but then, this little syntax change for an event dispatching object may come in your way, if you are new to &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;.&lt;br&gt;Here is a detailed example of an utility class for &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/saumya/8755642.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Typography.</title>
      <link>http://saumya.github.io/ray/articles/21/</link>
      <pubDate>Fri, 31 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/21/</guid>
      <author></author>
      <description>&lt;p&gt;Like many other things, there are a lot of nice typography available, which are free to use. There is no hidden spying on you or hidden charges or anything hidden, in the name of free.&lt;br&gt;I would like to mention, the two types, which are used in the theme &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/elegant&quot;&gt;Elegant&lt;/a&gt; for &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt;.     &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.fontsquirrel.com/fonts/kaushan-script&quot;&gt;Kaushan Script&lt;/a&gt; and &lt;a href=&quot;http://www.fontsquirrel.com/fonts/TeX-Gyre-Adventor&quot;&gt;TeX Gyre Adventor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I found these fonts at &lt;a href=&quot;http://www.fontsquirrel.com/&quot;&gt;fontsquirrel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/elegant&quot;&gt;Elegant&lt;/a&gt; is a free as in air, theme, and encourage you to take it, hack it and use it, for whatever reason you may want it to use.     &lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Theme, Elegant.</title>
      <link>http://saumya.github.io/ray/articles/20/</link>
      <pubDate>Thu, 30 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/20/</guid>
      <author></author>
      <description>&lt;p&gt;Continuing to create themes, which are free of the dependencies, here is my next theme, &lt;code&gt;Elegant&lt;/code&gt;. I am definitenly in love with &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintesmith&lt;/a&gt;. My frequency of blogging has increased exponentially. I am releasing this &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/elegant&quot;&gt;theme&lt;/a&gt; at github in my &lt;a href=&quot;https://github.com/saumya/wintersmithThemes&quot;&gt;Wintersmith Themes&lt;/a&gt; repository. It adds some typography to the plain theme &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/simple&quot;&gt;Simple&lt;/a&gt;.      &lt;/p&gt;
&lt;p&gt;Its a free as in air, theme, and encourage you to take it, hack it and use it, for whatever reason you may want it to use.     &lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Theme, Simple.</title>
      <link>http://saumya.github.io/ray/articles/19/</link>
      <pubDate>Tue, 28 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/19/</guid>
      <author></author>
      <description>&lt;p&gt;In order to get rid of the dependencies and make the site pure static, I re-wrote some of the CSS and font dependencies in the &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintesmith&lt;/a&gt;. I am releasing this &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/simple&quot;&gt;theme&lt;/a&gt; at github in my &lt;a href=&quot;https://github.com/saumya/wintersmithThemes&quot;&gt;Wintersmith Themes&lt;/a&gt; repository. The name of the theme is &lt;code&gt;Simple&lt;/code&gt;.&lt;br&gt;Its a free as in air theme, and encourage you to take it, hack it and use it, for whatever reason you may want it to use.&lt;br&gt;This blog today is using &lt;code&gt;Simple&lt;/code&gt; theme as an example of, what it looks like to use this theme.&lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Git commit throws fatal error for line endings.</title>
      <link>http://saumya.github.io/ray/articles/18/</link>
      <pubDate>Mon, 27 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/18/</guid>
      <author></author>
      <description>&lt;p&gt;This comes to me in a regular basis, thought it would be nice, to keep a note to me and anyone else dealing with same.     &lt;/p&gt;
&lt;p&gt;The short answer to fix this is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config core.safecrlf warn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are more descriptive answers available and &lt;a href=&quot;http://stackoverflow.com/questions/15467507/trying-to-commit-git-files-but-getting-fatal-lf-would-be-replaced-by-crlf-in&quot;&gt;here is a link to one of many solutions out there&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A theme for Indian republic day</title>
      <link>http://saumya.github.io/ray/articles/17/</link>
      <pubDate>Sun, 26 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/17/</guid>
      <author></author>
      <description>&lt;p&gt;Since I have the know how to theme my blog, here is the &lt;code&gt;Indian Republic Day&lt;/code&gt; theme. Its &lt;code&gt;Open source&lt;/code&gt; and available &lt;code&gt;at my github repository&lt;/code&gt; &lt;a href=&quot;https://github.com/saumya/wintersmithThemes/tree/master/indianRepublicDay&quot;&gt;here&lt;/a&gt;. I will be &lt;code&gt;sharing my themes&lt;/code&gt; for &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; at &lt;a href=&quot;https://github.com/saumya/wintersmithThemes&quot;&gt;this&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Happy republic day.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Getting started with Wintersmith themes</title>
      <link>http://saumya.github.io/ray/articles/16/</link>
      <pubDate>Sat, 25 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/16/</guid>
      <author></author>
      <description>&lt;p&gt;I am getting more and more conversant with the &lt;a href=&quot;http://jade-lang.com&quot;&gt;Jade&lt;/a&gt; templating engine and &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt;. Which I hope, is, what was one of the intentions, of moving from &lt;a href=&quot;http://wordpress.org&quot;&gt;Wordpress&lt;/a&gt; to &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt;. Well, trying my hands on to customise the theme, I found its extemely easy to just add another CSS to the &lt;code&gt;layout&lt;/code&gt; template ie; &lt;code&gt;layout.jade&lt;/code&gt; and start putting in the styles there. It can not be simpler than this. The base style is taken from the style definition at &lt;code&gt;main.css&lt;/code&gt;. If you look at the &lt;code&gt;layout.jade&lt;/code&gt;, it will look something as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=&lt;span class=&quot;string&quot;&gt;'/css/main.css'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are following this blog, I have mentioned previously how to configure &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; so as to make it working from any domain or subdomain. So the &lt;code&gt;layout.jade&lt;/code&gt; in my case, looks as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=locals.url+&lt;span class=&quot;string&quot;&gt;'/css/main.css'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whatever the condition may be, whether you are using default settings or my settings, the point is, just add another CSS file(&lt;code&gt;theme.css&lt;/code&gt;) below the default CSS.
So the default setting will be as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=&lt;span class=&quot;string&quot;&gt;'/css/main.css'&lt;/span&gt;)
link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=&lt;span class=&quot;string&quot;&gt;'/css/theme.css'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case, I am using a theme CSS file as &lt;code&gt;saumya.css&lt;/code&gt; and with my configuration change, it looks as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=locals.url+&lt;span class=&quot;string&quot;&gt;'/css/main.css'&lt;/span&gt;)
link(rel=&lt;span class=&quot;string&quot;&gt;'stylesheet'&lt;/span&gt;, href=locals.url+&lt;span class=&quot;string&quot;&gt;'/css/saumya.css'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now do the customisation in the &lt;code&gt;theme.css&lt;/code&gt;.     &lt;/p&gt;
&lt;p&gt;Hope you understand &lt;code&gt;the best practice of overriding styles&lt;/code&gt; than manipulating directly the original CSS file.&lt;/p&gt;
&lt;p&gt;Happy theming.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Want excitement, work with Freshers or even younger.</title>
      <link>http://saumya.github.io/ray/articles/15/</link>
      <pubDate>Fri, 24 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/15/</guid>
      <author></author>
      <description>&lt;p&gt;It is exciting to work with juniours and if you have never had an experience, try this. Which is highly recommended.&lt;br&gt;They can bring one or all of below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bring fresh ideas to the table.&lt;/li&gt;
&lt;li&gt;Bring in energy&lt;/li&gt;
&lt;li&gt;New ways of doing things&lt;/li&gt;
&lt;li&gt;Challenge the established&lt;/li&gt;
&lt;li&gt;Go the extra mile to prove it&lt;/li&gt;
&lt;li&gt;Can surprise you by solving something which you never have thought&lt;/li&gt;
&lt;li&gt;Bring in humanity&lt;/li&gt;
&lt;li&gt;Less logical and more intuitional&lt;/li&gt;
&lt;li&gt;Eager to learn     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, I can go on and on. But the thing is, you have to be careful. Like all seniors are not helpful, not all young ones have the qualities.&lt;br&gt;If you are a good mentor, then &lt;code&gt;make them conversant with the tools&lt;/code&gt; and &lt;code&gt;do not&lt;/code&gt; tell them, &lt;code&gt;how to do&lt;/code&gt;, at first. Ask them &lt;code&gt;what to do ?&lt;/code&gt;, you will be surprised by the results, they produce.     &lt;/p&gt;
&lt;p&gt;Happy Pair-Programming.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Phonegap, jQuery, jQueryMobile and AJAX caching</title>
      <link>http://saumya.github.io/ray/articles/14/</link>
      <pubDate>Thu, 23 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/14/</guid>
      <author></author>
      <description>&lt;p&gt;Developing for a fragmented landscape is not easy. Its even difficult, if you choose to use, a library or framework, which says &lt;code&gt;develop once and run everywhere&lt;/code&gt; or something like &lt;code&gt;it makes your application look like native&lt;/code&gt;.&lt;br&gt;First thing first. With every new release, we have another step addition to test. Contrary to the belief that, the new Operating System is obviously capable of running the old running application, it adds one more fragment to the already fragmented landscape. So if you are a mobile developer, keep this in mind that &lt;code&gt;new OS, is a new test step&lt;/code&gt;. Well, lets add one more device to this equation. Lets just focus on &lt;code&gt;Apple&lt;/code&gt; devices, considering there &lt;code&gt;so called, minimum number of device types&lt;/code&gt;. An iDevice is suppose to run the latest vesion of the iOS. But in the development environment, you might not able to keep up with new device types or OS updates. And only this can break your application. So make sure, you have &lt;code&gt;latest device and latest OS&lt;/code&gt;. Ok, then test your application in this device, chances are your application &lt;code&gt;may run&lt;/code&gt; but chances are &lt;code&gt;it might not&lt;/code&gt; too. So the point is &lt;code&gt;search arround&lt;/code&gt; the internet from the beginning itself, if there are known problems with the exact &lt;code&gt;device and OS&lt;/code&gt; combination.&lt;span class=&quot;more&quot;&gt;           &lt;/p&gt;
&lt;p&gt;Now, just think to add up to more OS, and more devices to the equation. Think of Android and the Windows mobile, you can imagine the complexity.
Ok. Lets add a library to the equation. Now it becomes &lt;code&gt;device + OS + library&lt;/code&gt; and then different vesions of the library. The new versions of the library should run the old running code, but thats an expectation, not reality. So make sure, you have gone through the combined equation search too.&lt;br&gt;&lt;code&gt;And thats the start&lt;/code&gt;&lt;br&gt;Here is &lt;code&gt;just one of many&lt;/code&gt; examples. &lt;a href=&quot;http://cordova.com/&quot;&gt;Phonegap(Cordova)&lt;/a&gt; and &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; together caches the AJAX calls. Now, thats happening in iOS6 for me. But there are evidences that it happens on other  environments too.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12506897/is-safari-on-ios-6-caching-ajax-results&quot;&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sencha.com/forum/showthread.php?244076-PhoneGap-and-iOS-6-Ajax-calls-weirdness&quot;&gt;sencha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.einternals.com/blog/web-development/ios6-0-caching-ajax-post-requests&quot;&gt;ios6-0-caching-ajax-post-requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.grobmeier.de/android-does-not-fire-ajax-reqests-because-they-are-caches-ajax-requests-at-least-on-jquery-mobile-10072011.html#.UuE5CBC6bcs&quot;&gt;android issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://community.phonegap.com/nitobi/topics/avoid_android_application_caching_on_ajax_calls_option_cache_false&quot;&gt;phonegap forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It took me sometime to understand, what the problem is?! It was working fine with iOS 4 and 5! Well, here is the tip which solved it. Make the configuraton option of AJAX call in &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, so that the AJAX call is not cached (else default is cache).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;headers : { &lt;span class=&quot;string&quot;&gt;&quot;cache-control&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt; },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete AJAX call will look somthing like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$.ajax({
headers : { &lt;span class=&quot;string&quot;&gt;&quot;cache-control&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt; },
url : &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;,
success : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(result)&lt;/span&gt; {&lt;/span&gt;}
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a &lt;a href=&quot;http://www.einternals.com/blog/web-development/ios6-0-caching-ajax-post-requests&quot;&gt;nice write up about how&lt;/a&gt; you configure &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; AJAX call, so that they are not cached.     &lt;/p&gt;
&lt;p&gt;Keep an eye and check serously for at leat these     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating system update&lt;/li&gt;
&lt;li&gt;Have not tested on this device before &lt;/li&gt;
&lt;li&gt;use of particualr library and frameworks (and the problem they bring)&lt;/li&gt;
&lt;li&gt;used library does not update to the new OS&lt;/li&gt;
&lt;li&gt;used library does not support this device
It goes on and on. The matter of fact is, you can not ignore testing it in all the devices and OSs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy fixing.      &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Author details on Wintersmith</title>
      <link>http://saumya.github.io/ray/articles/13/</link>
      <pubDate>Wed, 22 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/13/</guid>
      <author></author>
      <description>&lt;p&gt;This is probably exciting and why I moved, to &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt;. Part of the blogging itself, is learning the engine and the &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade template engine&lt;/a&gt;.      &lt;/p&gt;
&lt;p&gt;Here is a tip to configure the author name.      &lt;/p&gt;
&lt;p&gt;With every blog post, there is an author name, below the title, which reads as “written by author”. This comes from the blog itself as you probably know already. Thats fine and thats the default behaviour. If one needs to change it and which could be changed, here is the thing.      &lt;/p&gt;
&lt;p&gt;The details are populated from the &lt;code&gt;authors&lt;/code&gt; folder. The &lt;code&gt;author&lt;/code&gt; name specified in the blog meta data,ie; the top section, when writing the blog, is mapped to a file with the &lt;code&gt;same name as author&lt;/code&gt;. So the file name is &lt;code&gt;author.json&lt;/code&gt; in the &lt;code&gt;authors&lt;/code&gt; folder, where &lt;code&gt;author&lt;/code&gt; is specified in the blog meta-data. If it finds the file, then the &lt;code&gt;author name&lt;/code&gt; below the &lt;code&gt;title&lt;/code&gt; of the post is updated with the new data from the file and an email link is attached with it which is also taken from the &lt;code&gt;.json&lt;/code&gt; file. This is interesting, if it does not find the file, simply the autor name from the blog meta data, is put out in the blog, without the email link.      &lt;/p&gt;
&lt;p&gt;Happy hacking.      &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Experience with Parse</title>
      <link>http://saumya.github.io/ray/articles/12/</link>
      <pubDate>Tue, 21 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/12/</guid>
      <author></author>
      <description>&lt;p&gt;This is the &lt;code&gt;first time&lt;/code&gt;, I worked with &lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt; and must say its a nice to have tool for any web developer. &lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt; minimises the task a lot in terms of backend and hosting.&lt;br&gt;&lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt; has a lot of options to choose from and one can choose to use the only required ones.&lt;br&gt;Well, I started of with hosting only, for one of my &lt;a href=&quot;http://facebook.com/&quot;&gt;Facebook&lt;/a&gt; applications. They even have a SDK to integrate the &lt;a href=&quot;http://facebook.com/&quot;&gt;Facebook&lt;/a&gt; SDK with them. I have not yet implemented their SDK yet, but docs show its simplicity of use.&lt;br&gt;I have started working on a &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; application integrating &lt;a href=&quot;http://facebook.com/&quot;&gt;Facebook&lt;/a&gt; and hosting in &lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt;. That went quite smooth. Actually &lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt; &lt;code&gt;has extended&lt;/code&gt; &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; to provide another SDK of their own to create frontend applications.&lt;br&gt;Happy coding.      &lt;/p&gt;
</description>
    </item>
    <item>
      <title>BackboneJS, view and its events</title>
      <link>http://saumya.github.io/ray/articles/11/</link>
      <pubDate>Mon, 20 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/11/</guid>
      <author></author>
      <description>&lt;p&gt;Working in &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is fun and easy to begin with. Slowly but steadily it gets complicated as we move on and add more to the project. Being said that, &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; is not at all opinionated. So there is no rightway of doing something. If your solution works for your project, then its good to go. Well, then there are certain things, which may help you, better organise your code. One of such things is &lt;code&gt;View Events&lt;/code&gt;.&lt;br&gt;In a Backbone view, to listen to events and handle them, the general syntax is as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;events:{
        &lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;onClick&quot;&lt;/span&gt;
        },
onClick: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt;{&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//Do something with the event&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//or&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//specifically do it for a target&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; btnID = event.target.id;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(btnID===&lt;span class=&quot;string&quot;&gt;'btn_one'&lt;/span&gt;){
        console.log(&lt;span class=&quot;string&quot;&gt;'TODO:'&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, it may be easier at first, but we are listening for events for the whole view and then in the handler checking it. There is a way in &lt;a href=&quot;http://backbonejs.org/&quot;&gt;BackboneJS&lt;/a&gt; that directly and listens for events for that particular target. The code looks as this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;events:{
        &lt;span class=&quot;string&quot;&gt;&quot;click #btn_one&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;onClick&quot;&lt;/span&gt;
        },
onClick: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt;{&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//btn_one is clicked&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//Do something with the event&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy coding.      &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Distribute iOS app on your web site</title>
      <link>http://saumya.github.io/ray/articles/10/</link>
      <pubDate>Wed, 15 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/10/</guid>
      <author></author>
      <description>&lt;p&gt;Its not that difficult as it sounds.&lt;br&gt;First of all, there are distribution services out there. I am not going to name them here, but they are available. A simple web search will show you that. 
Now, the question is, how do they do it, or the more significant question is, can we do it ourselves. The answer is yes.
There are 3 basic things required for distribution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.ipa file ( iOS app )&lt;/li&gt;
&lt;li&gt;.plist file ( manifest file for the app )&lt;/li&gt;
&lt;li&gt;.html file ( html file for showing the link to the user )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The iOS app must be compiled with the Ad-HOC distribution certificate with the device(where the app will be installed) UDIDs included. Thats the same procedure, as one would follow, while distributing through other stores. Once its compiled, you say &lt;code&gt;Archive for distribution&lt;/code&gt; in XCode, which will create the &lt;code&gt;.ipa&lt;/code&gt; file. The manifest file defines the application meta data, if you go through the manifest file below, there is a place to point to the &lt;code&gt;.ipa&lt;/code&gt; file, make sure, you provide &lt;code&gt;full URL to .ipa&lt;/code&gt; file. The download link on HTML file will point to this manifest file. Here is the boilerplate for a typical manifest file (which is a .plist file). The HTML file, is simply  having a link pointing to the &lt;code&gt;.plist&lt;/code&gt; file.     &lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;https://gist.github.com/saumya/8440357.js&quot;&gt;&lt;/script&gt;&lt;br&gt;Now simply link to the plist file in the HTML file as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;a href=&amp;quot;itms-services://?action=download-manifest&amp;amp;url=https://myServer/iOS-dist/iOSAppDist.plist&amp;quot; class=&amp;quot;button&amp;quot;&amp;gt;Install My App&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now visit the URL through iPhone, where your HTML file is stored. Once you click the link, it will download and install the iOS app.&lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>HTML5, requestAnimationFrame</title>
      <link>http://saumya.github.io/ray/articles/9/</link>
      <pubDate>Tue, 14 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/9/</guid>
      <author></author>
      <description>&lt;p&gt;Making a javascript application, at somepoint, involves use of &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; functions. Well, the possibility increases even more, when one needs to animate elements. So we know what it means to use these two functions.&lt;br&gt;Fortunately we have a new method, called &lt;code&gt;requestAnimationFrame()&lt;/code&gt;, which is elegant and effective. Now animations will not eat up mobile battery life, but still be smooth. This is optimised to takecare of the host environment, such as mobile browser, desktop browser etc. It even minimises the repeat call, if the application using it, is not visible or scrolled out of view, sweet.&lt;br&gt;&lt;a href=&quot;http://caniuse.com/requestanimationframe&quot;&gt;Check, which browsers and versions support this function,&lt;/a&gt; just to make yourself clear.&lt;br&gt;Here are few links which explain &lt;code&gt;requestAnimationFrame&lt;/code&gt; function in more detail.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/window.requestAnimationFrame&quot;&gt;mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/&quot;&gt;Paul Irish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://creativejs.com/resources/requestanimationframe/&quot;&gt;Creative JS&lt;/a&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Its kind of &lt;code&gt;saying bye bye&lt;/code&gt; to &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt;.&lt;br&gt;Happy Animating.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Native Android development and getting Key Hash for Facebook</title>
      <link>http://saumya.github.io/ray/articles/8/</link>
      <pubDate>Mon, 13 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/8/</guid>
      <author></author>
      <description>&lt;p&gt;If you are developing for native Android, and creating a Facebook login, then the fist thing which will come to you, is a setting on Facebook console called “Key Hashes”.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/p&gt;
&lt;p&gt;While trying to do the Facebook suggested way, I lost some time and could not really get it working perfectly. Searching the internet told me that people had been in that path and that the solution is not working. Well, then I got a script to get the hash key. Finally this worked for me, all the time. So quickly I wrapped it in a function and put it here for anyone trying to fight the “key hash”.    &lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/saumya/8399013.js&quot;&gt;&lt;/script&gt;    

&lt;p&gt;Now, all that remains is, put this function on the first activity of your Android project and call the function with your package name as a string arguement on the onCreation method. That will print out the hash key on logCat window. Just copy-paste that code in Facebook console. Then you can remove that call to the function.    &lt;/p&gt;
&lt;p&gt;Happy Hacking ! &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wintersmith configuration</title>
      <link>http://saumya.github.io/ray/articles/7/</link>
      <pubDate>Sun, 12 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/7/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; is perfect on creating a static site, but the problem arises when one needs to configure it to meet a particular need. I think, thats true for any framework.&lt;br&gt;The problem I encountered is, putting the static blog in any domain or sub-domain. &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; generates urls which are default to root &lt;code&gt;/&lt;/code&gt; and to change it to any domain means one has to change it to the domain one wishes to put the site on. Thats as simple as that. Well, for most parts. Then, there are places where it creates a relative URL.    &lt;/p&gt;
&lt;p&gt;To solve this, I looked inside the templates and configuration. &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; reads from the &lt;code&gt;config.json&lt;/code&gt; file to get the base URL and make the other URLs. So I changed the &lt;code&gt;url&lt;/code&gt; to my desired URL and added another parameter to the &lt;code&gt;locals&lt;/code&gt; object of the &lt;code&gt;config.json&lt;/code&gt; named &lt;code&gt;folder&lt;/code&gt;, Then changed the URL in templates, from &lt;code&gt;/&lt;/code&gt; to &lt;code&gt;locals.url&lt;/code&gt; and at some places to &lt;code&gt;locals.url+&amp;#39;/&amp;#39;+locals.folder&lt;/code&gt; and thats it. Its now perfectly alright to take my site to wherever I want. All I need to do is change these variables and build the site again with &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; build command.&lt;br&gt;Is this the rightway? Well, seriously I do not know, but it works.   &lt;/p&gt;
&lt;p&gt;Happy Hacking ! &lt;/p&gt;
</description>
    </item>
    <item>
      <title>The technology choice of the blog.</title>
      <link>http://saumya.github.io/ray/articles/6/</link>
      <pubDate>Sat, 11 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/6/</guid>
      <author></author>
      <description>&lt;p&gt;First question to answer is &lt;code&gt;why I moved to a static page solution?&lt;/code&gt;, there are a lot of answers to this.
Here is a nice writeup by David Tucker. &lt;a href=&quot;http://davidtucker.net/articles/move-to-static-site-generator/&quot;&gt;The Need for a Static Site Generator.&lt;/a&gt;&lt;br&gt;Now, since we know a static page site is the need of the time, the technology choice is important too. Obviously the first thing, that comes to mind is &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, yeah, its simple and just works. Being in MAC, its even tempting to use &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, as &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; comes installed with the OS. Further more &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; support is in-built with &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages&quot;&gt;GitHub Pages&lt;/a&gt;. It could have been as simple as that.&lt;br&gt;I choose Javascript as the language of choice, since its exciting now, what we could do with it, so this blog would be one of my playgrounds for the work I do. I have already getting more and more familiar with &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt; templating engine and &lt;a href=&quot;http://nodejs.org/&quot;&gt;nodeJS&lt;/a&gt; workflows, &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;wintersmith&lt;/a&gt; is such a nice engine which works on &lt;a href=&quot;http://nodejs.org/&quot;&gt;nodeJS&lt;/a&gt;. Just the matter of time, as how far Javascript has come!   &lt;/p&gt;
&lt;p&gt;Happy Coding&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Finally added Disqus</title>
      <link>http://saumya.github.io/ray/articles/5/</link>
      <pubDate>Sat, 11 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/5/</guid>
      <author></author>
      <description>&lt;p&gt;The final technical integration to &lt;code&gt;make the blog a conversation&lt;/code&gt; engine, is done. Can not imagine how far the blogging has come and how easy now it is to setup things. Yes can feel the new internet now. Remembering the back days, when I created a static HTML page and served through internet. Its a full circle now. Though the generation of the static pages are automated, but the thing is we are back to decentralised internet.&lt;/p&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Its moved to github now.</title>
      <link>http://saumya.github.io/ray/articles/4/</link>
      <pubDate>Fri, 10 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/4/</guid>
      <author></author>
      <description>&lt;p&gt;Do you notice ?! Now this blog is served from Github itself. The publishing was never excicting as this.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;How it works?&lt;/code&gt; Git commit and the post is out there.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The wait is over.</title>
      <link>http://saumya.github.io/ray/articles/3/</link>
      <pubDate>Fri, 10 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/3/</guid>
      <author></author>
      <description>&lt;p&gt;After a week of searching, studying and re-searching things, finally landed up with this.
Well, there is not much to &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;wintersmith&lt;/a&gt;, it 10 mins job at max if someone has a little experience in NodeJS.The main delay for me was to trying to produce a static site out of my old blog, which was running in &lt;a href=&quot;http://wordpress.org/&quot;&gt;WordPress&lt;/a&gt; eninge.&lt;/p&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Thanking wordpress.</title>
      <link>http://saumya.github.io/ray/articles/2/</link>
      <pubDate>Tue, 07 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/2/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;code&gt;Why?&lt;/code&gt; Thats for being there as a very solid option for blogging.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/p&gt;
&lt;p&gt;Its a pleasure to use &lt;a href=&quot;http://wordpress.org&quot;&gt;Wordpress&lt;/a&gt; for such along time. In fact its the reason I started into blogging. I have a &lt;a href=&quot;http://saumyaray.wordpress.com/&quot;&gt;Wordpress&lt;/a&gt; hosted blog till now too. 
This blog was using Wordpress as its blogging engine from 2010 and thats a beautiful engine, I must say.&lt;/p&gt;
&lt;p&gt;The reason I moved this to &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; is, I want to focus on javascript environment now, the same reason was there, with Wordpress. 
I was focusing on PHP and MySql, those days. So its not that Wordpress is bad but seriously speaking Wordpress is now far beyound a blogging platform.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Finally, a static site !</title>
      <link>http://saumya.github.io/ray/articles/1/</link>
      <pubDate>Tue, 07 Jan 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://saumya.github.io/ray/articles/1/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;code&gt;Why?&lt;/code&gt; Thats for learning.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;What?&lt;/code&gt; Life. Javascript, NodeJS, Express, Jade, Sass, Grunt and the list goes on.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It&amp;#39;s learning till the end.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;so-why-wait-&quot;&gt;So why wait ?!&lt;/h2&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube-nocookie.com/embed/nql49wrkURY?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;code&gt;Thank you&lt;/code&gt; so much for stopping by.&lt;/p&gt;
&lt;p&gt;Lets get started.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>